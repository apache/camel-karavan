/**
 * Generated by karavan build tools - do NOT edit this file!
 */
import {    CamelElement, 
    ProcessorStep, 
    FromStep, 
    Expression, 
    PolicyStep, 
    SetPropertyStep, 
    SagaStep, 
    TodStep, 
    ThreadsStep, 
    InterceptSendToEndpointStep, 
    LogStep, 
    LoopStep, 
    DelayStep, 
    SampleStep, 
    DoFinallyStep, 
    LoadBalanceStep, 
    ValidateStep, 
    TransformStep, 
    RemoveHeadersStep, 
    IdempotentConsumerStep, 
    InterceptStep, 
    WhenStep, 
    ProcessStep, 
    OnFallbackStep, 
    MarshalStep, 
    OnCompletionStep, 
    ClaimCheckStep, 
    DoCatchStep, 
    InOnlyStep, 
    ConvertBodyToStep, 
    CircuitBreakerStep, 
    PollEnrichStep, 
    Otherwise, 
    ResequenceStep, 
    RoutingSlipStep, 
    BeanStep, 
    RecipientListStep, 
    DynamicRouterStep, 
    RollbackStep, 
    EnrichStep, 
    InOutStep, 
    SplitStep, 
    WireTapStep, 
    MulticastStep, 
    StopStep, 
    SetBodyStep, 
    SortStep, 
    InterceptFromStep, 
    ThrowExceptionStep, 
    ToStep, 
    FilterStep, 
    ServiceCallStep, 
    ThrottleStep, 
    WhenSkipSendToEndpointStep, 
    RemovePropertiesStep, 
    SetHeaderStep, 
    ChoiceStep, 
    AggregateStep, 
    RemovePropertyStep, 
    RemoveHeaderStep, 
    ScriptStep, 
    DoTryStep, 
    SetExchangePatternStep, 
    TransactedStep, 
    PipelineStep, 
    UnmarshalStep, 
} from '../model/CamelModel' 

export class CamelApi { 

    static createStep = (name: string, body: any): CamelElement => {
       switch (name){
            case 'from': return CamelApi.createFrom(body)
            case 'expression': return CamelApi.createExpression(body)
            case 'policy': return CamelApi.createPolicy(body)
            case 'setProperty': return CamelApi.createSetProperty(body)
            case 'saga': return CamelApi.createSaga(body)
            case 'tod': return CamelApi.createTod(body)
            case 'threads': return CamelApi.createThreads(body)
            case 'interceptSendToEndpoint': return CamelApi.createInterceptSendToEndpoint(body)
            case 'log': return CamelApi.createLog(body)
            case 'loop': return CamelApi.createLoop(body)
            case 'delay': return CamelApi.createDelay(body)
            case 'sample': return CamelApi.createSample(body)
            case 'doFinally': return CamelApi.createDoFinally(body)
            case 'loadBalance': return CamelApi.createLoadBalance(body)
            case 'validate': return CamelApi.createValidate(body)
            case 'transform': return CamelApi.createTransform(body)
            case 'removeHeaders': return CamelApi.createRemoveHeaders(body)
            case 'idempotentConsumer': return CamelApi.createIdempotentConsumer(body)
            case 'intercept': return CamelApi.createIntercept(body)
            case 'when': return CamelApi.createWhen(body)
            case 'process': return CamelApi.createProcess(body)
            case 'onFallback': return CamelApi.createOnFallback(body)
            case 'marshal': return CamelApi.createMarshal(body)
            case 'onCompletion': return CamelApi.createOnCompletion(body)
            case 'claimCheck': return CamelApi.createClaimCheck(body)
            case 'doCatch': return CamelApi.createDoCatch(body)
            case 'inOnly': return CamelApi.createInOnly(body)
            case 'convertBodyTo': return CamelApi.createConvertBodyTo(body)
            case 'circuitBreaker': return CamelApi.createCircuitBreaker(body)
            case 'pollEnrich': return CamelApi.createPollEnrich(body)
            case 'otherwise': return CamelApi.createOtherwise(body)
            case 'resequence': return CamelApi.createResequence(body)
            case 'routingSlip': return CamelApi.createRoutingSlip(body)
            case 'bean': return CamelApi.createBean(body)
            case 'recipientList': return CamelApi.createRecipientList(body)
            case 'dynamicRouter': return CamelApi.createDynamicRouter(body)
            case 'rollback': return CamelApi.createRollback(body)
            case 'enrich': return CamelApi.createEnrich(body)
            case 'inOut': return CamelApi.createInOut(body)
            case 'split': return CamelApi.createSplit(body)
            case 'wireTap': return CamelApi.createWireTap(body)
            case 'multicast': return CamelApi.createMulticast(body)
            case 'stop': return CamelApi.createStop(body)
            case 'setBody': return CamelApi.createSetBody(body)
            case 'sort': return CamelApi.createSort(body)
            case 'interceptFrom': return CamelApi.createInterceptFrom(body)
            case 'throwException': return CamelApi.createThrowException(body)
            case 'to': return CamelApi.createTo(body)
            case 'filter': return CamelApi.createFilter(body)
            case 'serviceCall': return CamelApi.createServiceCall(body)
            case 'throttle': return CamelApi.createThrottle(body)
            case 'whenSkipSendToEndpoint': return CamelApi.createWhenSkipSendToEndpoint(body)
            case 'removeProperties': return CamelApi.createRemoveProperties(body)
            case 'setHeader': return CamelApi.createSetHeader(body)
            case 'choice': return CamelApi.createChoice(body)
            case 'aggregate': return CamelApi.createAggregate(body)
            case 'removeProperty': return CamelApi.createRemoveProperty(body)
            case 'removeHeader': return CamelApi.createRemoveHeader(body)
            case 'script': return CamelApi.createScript(body)
            case 'doTry': return CamelApi.createDoTry(body)
            case 'setExchangePattern': return CamelApi.createSetExchangePattern(body)
            case 'transacted': return CamelApi.createTransacted(body)
            case 'pipeline': return CamelApi.createPipeline(body)
            case 'unmarshal': return CamelApi.createUnmarshal(body)
            default: return new ProcessorStep('') 
        }
    }
    static createExpression = (element: any): Expression => {
        return new Expression({...element})
    }
    static createFrom = (element: any): FromStep => {
        const fromStep = element ? new FromStep({...element.from}) : new FromStep()
        fromStep.from.steps = CamelApi.createSteps(element?.from?.steps)
        fromStep.uuid = element?.uuid ? element.uuid : fromStep.uuid
        return fromStep
    }

    static createPolicy = (element: any): PolicyStep => {
        const policyStep = element ? new PolicyStep({...element.policy}) : new PolicyStep()
        policyStep.policy.steps = CamelApi.createSteps(element?.policy?.steps)
        policyStep.uuid = element?.uuid ? element.uuid : policyStep.uuid
        return policyStep
    }

    static createSetProperty = (element: any): SetPropertyStep => {
        const setPropertyStep = element ? new SetPropertyStep({...element.setProperty}) : new SetPropertyStep()
        setPropertyStep.setProperty.expression = CamelApi.createExpression(element?.setProperty?.expression)
        setPropertyStep.uuid = element?.uuid ? element.uuid : setPropertyStep.uuid
        return setPropertyStep
    }

    static createSaga = (element: any): SagaStep => {
        const sagaStep = element ? new SagaStep({...element.saga}) : new SagaStep()
        sagaStep.saga.steps = CamelApi.createSteps(element?.saga?.steps)
        sagaStep.uuid = element?.uuid ? element.uuid : sagaStep.uuid
        return sagaStep
    }

    static createTod = (element: any): TodStep => {
        const todStep = element ? new TodStep({...element.tod}) : new TodStep()
        todStep.uuid = element?.uuid ? element.uuid : todStep.uuid
        return todStep
    }

    static createThreads = (element: any): ThreadsStep => {
        const threadsStep = element ? new ThreadsStep({...element.threads}) : new ThreadsStep()
        threadsStep.uuid = element?.uuid ? element.uuid : threadsStep.uuid
        return threadsStep
    }

    static createInterceptSendToEndpoint = (element: any): InterceptSendToEndpointStep => {
        const interceptSendToEndpointStep = element ? new InterceptSendToEndpointStep({...element.interceptSendToEndpoint}) : new InterceptSendToEndpointStep()
        interceptSendToEndpointStep.interceptSendToEndpoint.steps = CamelApi.createSteps(element?.interceptSendToEndpoint?.steps)
        interceptSendToEndpointStep.uuid = element?.uuid ? element.uuid : interceptSendToEndpointStep.uuid
        return interceptSendToEndpointStep
    }

    static createLog = (element: any): LogStep => {
        const logStep = element ? new LogStep({...element.log}) : new LogStep()
        logStep.uuid = element?.uuid ? element.uuid : logStep.uuid
        return logStep
    }

    static createLoop = (element: any): LoopStep => {
        const loopStep = element ? new LoopStep({...element.loop}) : new LoopStep()
        loopStep.loop.expression = CamelApi.createExpression(element?.loop?.expression)
        loopStep.loop.steps = CamelApi.createSteps(element?.loop?.steps)
        loopStep.uuid = element?.uuid ? element.uuid : loopStep.uuid
        return loopStep
    }

    static createDelay = (element: any): DelayStep => {
        const delayStep = element ? new DelayStep({...element.delay}) : new DelayStep()
        delayStep.delay.expression = CamelApi.createExpression(element?.delay?.expression)
        delayStep.uuid = element?.uuid ? element.uuid : delayStep.uuid
        return delayStep
    }

    static createSample = (element: any): SampleStep => {
        const sampleStep = element ? new SampleStep({...element.sample}) : new SampleStep()
        sampleStep.uuid = element?.uuid ? element.uuid : sampleStep.uuid
        return sampleStep
    }

    static createDoFinally = (element: any): DoFinallyStep => {
        const doFinallyStep = element ? new DoFinallyStep({...element.doFinally}) : new DoFinallyStep()
        doFinallyStep.doFinally.steps = CamelApi.createSteps(element?.doFinally?.steps)
        doFinallyStep.uuid = element?.uuid ? element.uuid : doFinallyStep.uuid
        return doFinallyStep
    }

    static createLoadBalance = (element: any): LoadBalanceStep => {
        const loadBalanceStep = element ? new LoadBalanceStep({...element.loadBalance}) : new LoadBalanceStep()
        loadBalanceStep.loadBalance.steps = CamelApi.createSteps(element?.loadBalance?.steps)
        loadBalanceStep.uuid = element?.uuid ? element.uuid : loadBalanceStep.uuid
        return loadBalanceStep
    }

    static createValidate = (element: any): ValidateStep => {
        const validateStep = element ? new ValidateStep({...element.validate}) : new ValidateStep()
        validateStep.validate.expression = CamelApi.createExpression(element?.validate?.expression)
        validateStep.uuid = element?.uuid ? element.uuid : validateStep.uuid
        return validateStep
    }

    static createTransform = (element: any): TransformStep => {
        const transformStep = element ? new TransformStep({...element.transform}) : new TransformStep()
        transformStep.transform.expression = CamelApi.createExpression(element?.transform?.expression)
        transformStep.uuid = element?.uuid ? element.uuid : transformStep.uuid
        return transformStep
    }

    static createRemoveHeaders = (element: any): RemoveHeadersStep => {
        const removeHeadersStep = element ? new RemoveHeadersStep({...element.removeHeaders}) : new RemoveHeadersStep()
        removeHeadersStep.uuid = element?.uuid ? element.uuid : removeHeadersStep.uuid
        return removeHeadersStep
    }

    static createIdempotentConsumer = (element: any): IdempotentConsumerStep => {
        const idempotentConsumerStep = element ? new IdempotentConsumerStep({...element.idempotentConsumer}) : new IdempotentConsumerStep()
        idempotentConsumerStep.idempotentConsumer.expression = CamelApi.createExpression(element?.idempotentConsumer?.expression)
        idempotentConsumerStep.idempotentConsumer.steps = CamelApi.createSteps(element?.idempotentConsumer?.steps)
        idempotentConsumerStep.uuid = element?.uuid ? element.uuid : idempotentConsumerStep.uuid
        return idempotentConsumerStep
    }

    static createIntercept = (element: any): InterceptStep => {
        const interceptStep = element ? new InterceptStep({...element.intercept}) : new InterceptStep()
        interceptStep.intercept.steps = CamelApi.createSteps(element?.intercept?.steps)
        interceptStep.uuid = element?.uuid ? element.uuid : interceptStep.uuid
        return interceptStep
    }

    static createWhen = (element: any): WhenStep => {
        const whenStep = element ? new WhenStep({...element.when}) : new WhenStep()
        whenStep.when.expression = CamelApi.createExpression(element?.when?.expression)
        whenStep.when.steps = CamelApi.createSteps(element?.when?.steps)
        whenStep.uuid = element?.uuid ? element.uuid : whenStep.uuid
        return whenStep
    }

    static createProcess = (element: any): ProcessStep => {
        const processStep = element ? new ProcessStep({...element.process}) : new ProcessStep()
        processStep.uuid = element?.uuid ? element.uuid : processStep.uuid
        return processStep
    }

    static createOnFallback = (element: any): OnFallbackStep => {
        const onFallbackStep = element ? new OnFallbackStep({...element.onFallback}) : new OnFallbackStep()
        onFallbackStep.onFallback.steps = CamelApi.createSteps(element?.onFallback?.steps)
        onFallbackStep.uuid = element?.uuid ? element.uuid : onFallbackStep.uuid
        return onFallbackStep
    }

    static createMarshal = (element: any): MarshalStep => {
        const marshalStep = element ? new MarshalStep({...element.marshal}) : new MarshalStep()
        marshalStep.uuid = element?.uuid ? element.uuid : marshalStep.uuid
        return marshalStep
    }

    static createOnCompletion = (element: any): OnCompletionStep => {
        const onCompletionStep = element ? new OnCompletionStep({...element.onCompletion}) : new OnCompletionStep()
        onCompletionStep.onCompletion.onWhen = CamelApi.createWhen(element?.onCompletion?.onWhen)
        onCompletionStep.onCompletion.steps = CamelApi.createSteps(element?.onCompletion?.steps)
        onCompletionStep.uuid = element?.uuid ? element.uuid : onCompletionStep.uuid
        return onCompletionStep
    }

    static createClaimCheck = (element: any): ClaimCheckStep => {
        const claimCheckStep = element ? new ClaimCheckStep({...element.claimCheck}) : new ClaimCheckStep()
        claimCheckStep.uuid = element?.uuid ? element.uuid : claimCheckStep.uuid
        return claimCheckStep
    }

    static createDoCatch = (element: any): DoCatchStep => {
        const doCatchStep = element ? new DoCatchStep({...element.doCatch}) : new DoCatchStep()
        doCatchStep.doCatch.onWhen = CamelApi.createWhen(element?.doCatch?.onWhen)
        doCatchStep.doCatch.steps = CamelApi.createSteps(element?.doCatch?.steps)
        doCatchStep.uuid = element?.uuid ? element.uuid : doCatchStep.uuid
        return doCatchStep
    }

    static createInOnly = (element: any): InOnlyStep => {
        const inOnlyStep = element ? new InOnlyStep({...element.inOnly}) : new InOnlyStep()
        inOnlyStep.uuid = element?.uuid ? element.uuid : inOnlyStep.uuid
        return inOnlyStep
    }

    static createConvertBodyTo = (element: any): ConvertBodyToStep => {
        const convertBodyToStep = element ? new ConvertBodyToStep({...element.convertBodyTo}) : new ConvertBodyToStep()
        convertBodyToStep.uuid = element?.uuid ? element.uuid : convertBodyToStep.uuid
        return convertBodyToStep
    }

    static createCircuitBreaker = (element: any): CircuitBreakerStep => {
        const circuitBreakerStep = element ? new CircuitBreakerStep({...element.circuitBreaker}) : new CircuitBreakerStep()
        circuitBreakerStep.circuitBreaker.onFallback = CamelApi.createOnFallback(element?.circuitBreaker?.onFallback)
        circuitBreakerStep.circuitBreaker.steps = CamelApi.createSteps(element?.circuitBreaker?.steps)
        circuitBreakerStep.uuid = element?.uuid ? element.uuid : circuitBreakerStep.uuid
        return circuitBreakerStep
    }

    static createPollEnrich = (element: any): PollEnrichStep => {
        const pollEnrichStep = element ? new PollEnrichStep({...element.pollEnrich}) : new PollEnrichStep()
        pollEnrichStep.pollEnrich.expression = CamelApi.createExpression(element?.pollEnrich?.expression)
        pollEnrichStep.uuid = element?.uuid ? element.uuid : pollEnrichStep.uuid
        return pollEnrichStep
    }

    static createOtherwise = (element: any): Otherwise => {
        const otherwise = element ? new Otherwise({...element}) : new Otherwise();
        otherwise.steps = CamelApi.createSteps(element?.steps);
        if (element?.uuid) otherwise.uuid = element?.uuid;
        return otherwise
    }

    static createResequence = (element: any): ResequenceStep => {
        const resequenceStep = element ? new ResequenceStep({...element.resequence}) : new ResequenceStep()
        resequenceStep.resequence.expression = CamelApi.createExpression(element?.resequence?.expression)
        resequenceStep.resequence.steps = CamelApi.createSteps(element?.resequence?.steps)
        resequenceStep.uuid = element?.uuid ? element.uuid : resequenceStep.uuid
        return resequenceStep
    }

    static createRoutingSlip = (element: any): RoutingSlipStep => {
        const routingSlipStep = element ? new RoutingSlipStep({...element.routingSlip}) : new RoutingSlipStep()
        routingSlipStep.routingSlip.expression = CamelApi.createExpression(element?.routingSlip?.expression)
        routingSlipStep.uuid = element?.uuid ? element.uuid : routingSlipStep.uuid
        return routingSlipStep
    }

    static createBean = (element: any): BeanStep => {
        const beanStep = element ? new BeanStep({...element.bean}) : new BeanStep()
        beanStep.uuid = element?.uuid ? element.uuid : beanStep.uuid
        return beanStep
    }

    static createRecipientList = (element: any): RecipientListStep => {
        const recipientListStep = element ? new RecipientListStep({...element.recipientList}) : new RecipientListStep()
        recipientListStep.recipientList.expression = CamelApi.createExpression(element?.recipientList?.expression)
        recipientListStep.uuid = element?.uuid ? element.uuid : recipientListStep.uuid
        return recipientListStep
    }

    static createDynamicRouter = (element: any): DynamicRouterStep => {
        const dynamicRouterStep = element ? new DynamicRouterStep({...element.dynamicRouter}) : new DynamicRouterStep()
        dynamicRouterStep.dynamicRouter.expression = CamelApi.createExpression(element?.dynamicRouter?.expression)
        dynamicRouterStep.uuid = element?.uuid ? element.uuid : dynamicRouterStep.uuid
        return dynamicRouterStep
    }

    static createRollback = (element: any): RollbackStep => {
        const rollbackStep = element ? new RollbackStep({...element.rollback}) : new RollbackStep()
        rollbackStep.uuid = element?.uuid ? element.uuid : rollbackStep.uuid
        return rollbackStep
    }

    static createEnrich = (element: any): EnrichStep => {
        const enrichStep = element ? new EnrichStep({...element.enrich}) : new EnrichStep()
        enrichStep.enrich.expression = CamelApi.createExpression(element?.enrich?.expression)
        enrichStep.uuid = element?.uuid ? element.uuid : enrichStep.uuid
        return enrichStep
    }

    static createInOut = (element: any): InOutStep => {
        const inOutStep = element ? new InOutStep({...element.inOut}) : new InOutStep()
        inOutStep.uuid = element?.uuid ? element.uuid : inOutStep.uuid
        return inOutStep
    }

    static createSplit = (element: any): SplitStep => {
        const splitStep = element ? new SplitStep({...element.split}) : new SplitStep()
        splitStep.split.expression = CamelApi.createExpression(element?.split?.expression)
        splitStep.split.steps = CamelApi.createSteps(element?.split?.steps)
        splitStep.uuid = element?.uuid ? element.uuid : splitStep.uuid
        return splitStep
    }

    static createWireTap = (element: any): WireTapStep => {
        const wireTapStep = element ? new WireTapStep({...element.wireTap}) : new WireTapStep()
        wireTapStep.wireTap.body = CamelApi.createExpression(element?.wireTap?.body)
        wireTapStep.wireTap.setHeader = element && element?.wireTap ? element?.wireTap?.setHeader.map((x:any) => CamelApi.createSetHeader(x)) :[]
        wireTapStep.uuid = element?.uuid ? element.uuid : wireTapStep.uuid
        return wireTapStep
    }

    static createMulticast = (element: any): MulticastStep => {
        const multicastStep = element ? new MulticastStep({...element.multicast}) : new MulticastStep()
        multicastStep.multicast.steps = CamelApi.createSteps(element?.multicast?.steps)
        multicastStep.uuid = element?.uuid ? element.uuid : multicastStep.uuid
        return multicastStep
    }

    static createStop = (element: any): StopStep => {
        const stopStep = element ? new StopStep({...element.stop}) : new StopStep()
        stopStep.uuid = element?.uuid ? element.uuid : stopStep.uuid
        return stopStep
    }

    static createSetBody = (element: any): SetBodyStep => {
        const setBodyStep = element ? new SetBodyStep({...element.setBody}) : new SetBodyStep()
        setBodyStep.setBody.expression = CamelApi.createExpression(element?.setBody?.expression)
        setBodyStep.uuid = element?.uuid ? element.uuid : setBodyStep.uuid
        return setBodyStep
    }

    static createSort = (element: any): SortStep => {
        const sortStep = element ? new SortStep({...element.sort}) : new SortStep()
        sortStep.sort.expression = CamelApi.createExpression(element?.sort?.expression)
        sortStep.uuid = element?.uuid ? element.uuid : sortStep.uuid
        return sortStep
    }

    static createInterceptFrom = (element: any): InterceptFromStep => {
        const interceptFromStep = element ? new InterceptFromStep({...element.interceptFrom}) : new InterceptFromStep()
        interceptFromStep.interceptFrom.steps = CamelApi.createSteps(element?.interceptFrom?.steps)
        interceptFromStep.uuid = element?.uuid ? element.uuid : interceptFromStep.uuid
        return interceptFromStep
    }

    static createThrowException = (element: any): ThrowExceptionStep => {
        const throwExceptionStep = element ? new ThrowExceptionStep({...element.throwException}) : new ThrowExceptionStep()
        throwExceptionStep.uuid = element?.uuid ? element.uuid : throwExceptionStep.uuid
        return throwExceptionStep
    }

    static createTo = (element: any): ToStep => {
        const toStep = element ? new ToStep({...element.to}) : new ToStep()
        toStep.uuid = element?.uuid ? element.uuid : toStep.uuid
        return toStep
    }

    static createFilter = (element: any): FilterStep => {
        const filterStep = element ? new FilterStep({...element.filter}) : new FilterStep()
        filterStep.filter.expression = CamelApi.createExpression(element?.filter?.expression)
        filterStep.filter.steps = CamelApi.createSteps(element?.filter?.steps)
        filterStep.uuid = element?.uuid ? element.uuid : filterStep.uuid
        return filterStep
    }

    static createServiceCall = (element: any): ServiceCallStep => {
        const serviceCallStep = element ? new ServiceCallStep({...element.serviceCall}) : new ServiceCallStep()
        serviceCallStep.uuid = element?.uuid ? element.uuid : serviceCallStep.uuid
        return serviceCallStep
    }

    static createThrottle = (element: any): ThrottleStep => {
        const throttleStep = element ? new ThrottleStep({...element.throttle}) : new ThrottleStep()
        throttleStep.throttle.correlationExpression = CamelApi.createExpression(element?.throttle?.correlationExpression)
        throttleStep.throttle.expression = CamelApi.createExpression(element?.throttle?.expression)
        throttleStep.uuid = element?.uuid ? element.uuid : throttleStep.uuid
        return throttleStep
    }

    static createWhenSkipSendToEndpoint = (element: any): WhenSkipSendToEndpointStep => {
        const whenSkipSendToEndpointStep = element ? new WhenSkipSendToEndpointStep({...element.whenSkipSendToEndpoint}) : new WhenSkipSendToEndpointStep()
        whenSkipSendToEndpointStep.whenSkipSendToEndpoint.expression = CamelApi.createExpression(element?.whenSkipSendToEndpoint?.expression)
        whenSkipSendToEndpointStep.whenSkipSendToEndpoint.steps = CamelApi.createSteps(element?.whenSkipSendToEndpoint?.steps)
        whenSkipSendToEndpointStep.uuid = element?.uuid ? element.uuid : whenSkipSendToEndpointStep.uuid
        return whenSkipSendToEndpointStep
    }

    static createRemoveProperties = (element: any): RemovePropertiesStep => {
        const removePropertiesStep = element ? new RemovePropertiesStep({...element.removeProperties}) : new RemovePropertiesStep()
        removePropertiesStep.uuid = element?.uuid ? element.uuid : removePropertiesStep.uuid
        return removePropertiesStep
    }

    static createSetHeader = (element: any): SetHeaderStep => {
        const setHeaderStep = element ? new SetHeaderStep({...element.setHeader}) : new SetHeaderStep()
        setHeaderStep.setHeader.expression = CamelApi.createExpression(element?.setHeader?.expression)
        setHeaderStep.uuid = element?.uuid ? element.uuid : setHeaderStep.uuid
        return setHeaderStep
    }

    static createChoice = (element: any): ChoiceStep => {
        const choiceStep = element ? new ChoiceStep({...element.choice}) : new ChoiceStep()
        choiceStep.choice.otherwise = CamelApi.createOtherwise(element?.choice?.otherwise)
        choiceStep.choice.when = element && element?.choice ? element?.choice?.when.map((x:any) => CamelApi.createWhen(x)) :[]
        choiceStep.uuid = element?.uuid ? element.uuid : choiceStep.uuid
        return choiceStep
    }

    static createAggregate = (element: any): AggregateStep => {
        const aggregateStep = element ? new AggregateStep({...element.aggregate}) : new AggregateStep()
        aggregateStep.aggregate.completionPredicate = CamelApi.createExpression(element?.aggregate?.completionPredicate)
        aggregateStep.aggregate.completionSizeExpression = CamelApi.createExpression(element?.aggregate?.completionSizeExpression)
        aggregateStep.aggregate.completionTimeoutExpression = CamelApi.createExpression(element?.aggregate?.completionTimeoutExpression)
        aggregateStep.aggregate.correlationExpression = CamelApi.createExpression(element?.aggregate?.correlationExpression)
        aggregateStep.aggregate.steps = CamelApi.createSteps(element?.aggregate?.steps)
        aggregateStep.uuid = element?.uuid ? element.uuid : aggregateStep.uuid
        return aggregateStep
    }

    static createRemoveProperty = (element: any): RemovePropertyStep => {
        const removePropertyStep = element ? new RemovePropertyStep({...element.removeProperty}) : new RemovePropertyStep()
        removePropertyStep.uuid = element?.uuid ? element.uuid : removePropertyStep.uuid
        return removePropertyStep
    }

    static createRemoveHeader = (element: any): RemoveHeaderStep => {
        const removeHeaderStep = element ? new RemoveHeaderStep({...element.removeHeader}) : new RemoveHeaderStep()
        removeHeaderStep.uuid = element?.uuid ? element.uuid : removeHeaderStep.uuid
        return removeHeaderStep
    }

    static createScript = (element: any): ScriptStep => {
        const scriptStep = element ? new ScriptStep({...element.script}) : new ScriptStep()
        scriptStep.script.expression = CamelApi.createExpression(element?.script?.expression)
        scriptStep.uuid = element?.uuid ? element.uuid : scriptStep.uuid
        return scriptStep
    }

    static createDoTry = (element: any): DoTryStep => {
        const doTryStep = element ? new DoTryStep({...element.doTry}) : new DoTryStep()
        doTryStep.doTry.doCatch = element && element?.doTry ? element?.doTry?.doCatch.map((x:any) => CamelApi.createDoCatch(x)) :[]
        doTryStep.doTry.doFinally = CamelApi.createDoFinally(element?.doTry?.doFinally)
        doTryStep.doTry.steps = CamelApi.createSteps(element?.doTry?.steps)
        doTryStep.uuid = element?.uuid ? element.uuid : doTryStep.uuid
        return doTryStep
    }

    static createSetExchangePattern = (element: any): SetExchangePatternStep => {
        const setExchangePatternStep = element ? new SetExchangePatternStep({...element.setExchangePattern}) : new SetExchangePatternStep()
        setExchangePatternStep.uuid = element?.uuid ? element.uuid : setExchangePatternStep.uuid
        return setExchangePatternStep
    }

    static createTransacted = (element: any): TransactedStep => {
        const transactedStep = element ? new TransactedStep({...element.transacted}) : new TransactedStep()
        transactedStep.transacted.steps = CamelApi.createSteps(element?.transacted?.steps)
        transactedStep.uuid = element?.uuid ? element.uuid : transactedStep.uuid
        return transactedStep
    }

    static createPipeline = (element: any): PipelineStep => {
        const pipelineStep = element ? new PipelineStep({...element.pipeline}) : new PipelineStep()
        pipelineStep.pipeline.steps = CamelApi.createSteps(element?.pipeline?.steps)
        pipelineStep.uuid = element?.uuid ? element.uuid : pipelineStep.uuid
        return pipelineStep
    }

    static createUnmarshal = (element: any): UnmarshalStep => {
        const unmarshalStep = element ? new UnmarshalStep({...element.unmarshal}) : new UnmarshalStep()
        unmarshalStep.uuid = element?.uuid ? element.uuid : unmarshalStep.uuid
        return unmarshalStep
    }

    static createSteps = (elements: any[] | undefined): ProcessorStep[] => {
        const result: ProcessorStep[] = []
        if (elements !== undefined){
            elements.forEach(e => {
                const stepName = Object.keys(e).filter(key => !['uuid', 'dslName'].includes(key))[0];
                result.push(CamelApi.createStep(stepName, e));
            })
        }
        return result
    }

    static elementFromStep = (step: CamelElement): CamelElement => {
        switch (step.dslName){
            case 'fromStep' : return (step as FromStep).from
            case 'policyStep': return (step as PolicyStep).policy
            case 'setPropertyStep': return (step as SetPropertyStep).setProperty
            case 'sagaStep': return (step as SagaStep).saga
            case 'todStep': return (step as TodStep).tod
            case 'threadsStep': return (step as ThreadsStep).threads
            case 'interceptSendToEndpointStep': return (step as InterceptSendToEndpointStep).interceptSendToEndpoint
            case 'logStep': return (step as LogStep).log
            case 'loopStep': return (step as LoopStep).loop
            case 'delayStep': return (step as DelayStep).delay
            case 'sampleStep': return (step as SampleStep).sample
            case 'doFinallyStep': return (step as DoFinallyStep).doFinally
            case 'loadBalanceStep': return (step as LoadBalanceStep).loadBalance
            case 'validateStep': return (step as ValidateStep).validate
            case 'transformStep': return (step as TransformStep).transform
            case 'removeHeadersStep': return (step as RemoveHeadersStep).removeHeaders
            case 'idempotentConsumerStep': return (step as IdempotentConsumerStep).idempotentConsumer
            case 'interceptStep': return (step as InterceptStep).intercept
            case 'whenStep': return (step as WhenStep).when
            case 'processStep': return (step as ProcessStep).process
            case 'onFallbackStep': return (step as OnFallbackStep).onFallback
            case 'marshalStep': return (step as MarshalStep).marshal
            case 'onCompletionStep': return (step as OnCompletionStep).onCompletion
            case 'claimCheckStep': return (step as ClaimCheckStep).claimCheck
            case 'doCatchStep': return (step as DoCatchStep).doCatch
            case 'inOnlyStep': return (step as InOnlyStep).inOnly
            case 'convertBodyToStep': return (step as ConvertBodyToStep).convertBodyTo
            case 'circuitBreakerStep': return (step as CircuitBreakerStep).circuitBreaker
            case 'pollEnrichStep': return (step as PollEnrichStep).pollEnrich
            case 'otherwise': return (step as Otherwise)
            case 'resequenceStep': return (step as ResequenceStep).resequence
            case 'routingSlipStep': return (step as RoutingSlipStep).routingSlip
            case 'beanStep': return (step as BeanStep).bean
            case 'recipientListStep': return (step as RecipientListStep).recipientList
            case 'dynamicRouterStep': return (step as DynamicRouterStep).dynamicRouter
            case 'rollbackStep': return (step as RollbackStep).rollback
            case 'enrichStep': return (step as EnrichStep).enrich
            case 'inOutStep': return (step as InOutStep).inOut
            case 'splitStep': return (step as SplitStep).split
            case 'wireTapStep': return (step as WireTapStep).wireTap
            case 'multicastStep': return (step as MulticastStep).multicast
            case 'stopStep': return (step as StopStep).stop
            case 'setBodyStep': return (step as SetBodyStep).setBody
            case 'sortStep': return (step as SortStep).sort
            case 'interceptFromStep': return (step as InterceptFromStep).interceptFrom
            case 'throwExceptionStep': return (step as ThrowExceptionStep).throwException
            case 'toStep': return (step as ToStep).to
            case 'filterStep': return (step as FilterStep).filter
            case 'serviceCallStep': return (step as ServiceCallStep).serviceCall
            case 'throttleStep': return (step as ThrottleStep).throttle
            case 'whenSkipSendToEndpointStep': return (step as WhenSkipSendToEndpointStep).whenSkipSendToEndpoint
            case 'removePropertiesStep': return (step as RemovePropertiesStep).removeProperties
            case 'setHeaderStep': return (step as SetHeaderStep).setHeader
            case 'choiceStep': return (step as ChoiceStep).choice
            case 'aggregateStep': return (step as AggregateStep).aggregate
            case 'removePropertyStep': return (step as RemovePropertyStep).removeProperty
            case 'removeHeaderStep': return (step as RemoveHeaderStep).removeHeader
            case 'scriptStep': return (step as ScriptStep).script
            case 'doTryStep': return (step as DoTryStep).doTry
            case 'setExchangePatternStep': return (step as SetExchangePatternStep).setExchangePattern
            case 'transactedStep': return (step as TransactedStep).transacted
            case 'pipelineStep': return (step as PipelineStep).pipeline
            case 'unmarshalStep': return (step as UnmarshalStep).unmarshal
            default : return new CamelElement('')
        }
    }
    static addStep = (steps: ProcessorStep[], step: ProcessorStep, parentId: string): ProcessorStep[] => {
        const result: ProcessorStep[] = [];
        steps.forEach(el => {
            switch (el.dslName) {
                case 'policyStep':
                    const policyChildren = (el as PolicyStep).policy?.steps || [];
                    if (el.uuid === parentId) policyChildren.push(step)
                    else (el as PolicyStep).policy.steps = CamelApi.addStep(policyChildren, step, parentId);
                    break;
                case 'choiceStep':
                    const choiceChildren = (el as ChoiceStep).choice?.when || [];
                    if (el.uuid === parentId && step.dslName === 'whenStep') {
                        choiceChildren.push(step as WhenStep);
                        (el as ChoiceStep).choice.when = choiceChildren;
                    }  else if (el.uuid === parentId && step.dslName === 'otherwise' && !(el as ChoiceStep).choice.otherwise) {
                        (el as ChoiceStep).choice.otherwise = step;
                    } else {
                        (el as ChoiceStep).choice.when = CamelApi.addStep(choiceChildren, step, parentId) as WhenStep[];
                        const otherwise = (el as ChoiceStep).choice.otherwise;
                        if (otherwise?.uuid === parentId){
                            otherwise.steps = otherwise.steps ? [...otherwise.steps] : [];
                            otherwise.steps.push(step);
                            (el as ChoiceStep).choice.otherwise = otherwise
                        } else if (otherwise && otherwise.steps && otherwise.steps.length > 0){
                            otherwise.steps = CamelApi.addStep(otherwise.steps, step, parentId);
                            (el as ChoiceStep).choice.otherwise = otherwise;
                        }
                    }
                    break;
                case 'otherwise':
                    const otherwiseChildren = (el as Otherwise).steps || [];
                    if (el.uuid === parentId) otherwiseChildren.push(step)
                    else (el as Otherwise).steps = CamelApi.addStep(otherwiseChildren, step, parentId);
                    break;
                case 'fromStep':
                    const fromChildren = (el as FromStep).from?.steps || [];
                    if (el.uuid === parentId) fromChildren.push(step)
                    else (el as FromStep).from.steps = CamelApi.addStep(fromChildren, step, parentId);
                    break;
                case 'onCompletionStep':
                    const onCompletionChildren = (el as OnCompletionStep).onCompletion?.steps || [];
                    if (el.uuid === parentId) onCompletionChildren.push(step)
                    else (el as OnCompletionStep).onCompletion.steps = CamelApi.addStep(onCompletionChildren, step, parentId);
                    break;
                case 'splitStep':
                    const splitChildren = (el as SplitStep).split?.steps || [];
                    if (el.uuid === parentId) splitChildren.push(step)
                    else (el as SplitStep).split.steps = CamelApi.addStep(splitChildren, step, parentId);
                    break;
                case 'transactedStep':
                    const transactedChildren = (el as TransactedStep).transacted?.steps || [];
                    if (el.uuid === parentId) transactedChildren.push(step)
                    else (el as TransactedStep).transacted.steps = CamelApi.addStep(transactedChildren, step, parentId);
                    break;
                case 'interceptFromStep':
                    const interceptFromChildren = (el as InterceptFromStep).interceptFrom?.steps || [];
                    if (el.uuid === parentId) interceptFromChildren.push(step)
                    else (el as InterceptFromStep).interceptFrom.steps = CamelApi.addStep(interceptFromChildren, step, parentId);
                    break;
                case 'doCatchStep':
                    const doCatchChildren = (el as DoCatchStep).doCatch?.steps || [];
                    if (el.uuid === parentId) doCatchChildren.push(step)
                    else (el as DoCatchStep).doCatch.steps = CamelApi.addStep(doCatchChildren, step, parentId);
                    break;
                case 'circuitBreakerStep':
                    const circuitBreakerChildren = (el as CircuitBreakerStep).circuitBreaker?.steps || [];
                    if (el.uuid === parentId) circuitBreakerChildren.push(step)
                    else (el as CircuitBreakerStep).circuitBreaker.steps = CamelApi.addStep(circuitBreakerChildren, step, parentId);
                    break;
                case 'interceptStep':
                    const interceptChildren = (el as InterceptStep).intercept?.steps || [];
                    if (el.uuid === parentId) interceptChildren.push(step)
                    else (el as InterceptStep).intercept.steps = CamelApi.addStep(interceptChildren, step, parentId);
                    break;
                case 'onFallbackStep':
                    const onFallbackChildren = (el as OnFallbackStep).onFallback?.steps || [];
                    if (el.uuid === parentId) onFallbackChildren.push(step)
                    else (el as OnFallbackStep).onFallback.steps = CamelApi.addStep(onFallbackChildren, step, parentId);
                    break;
                case 'multicastStep':
                    const multicastChildren = (el as MulticastStep).multicast?.steps || [];
                    if (el.uuid === parentId) multicastChildren.push(step)
                    else (el as MulticastStep).multicast.steps = CamelApi.addStep(multicastChildren, step, parentId);
                    break;
                case 'loadBalanceStep':
                    const loadBalanceChildren = (el as LoadBalanceStep).loadBalance?.steps || [];
                    if (el.uuid === parentId) loadBalanceChildren.push(step)
                    else (el as LoadBalanceStep).loadBalance.steps = CamelApi.addStep(loadBalanceChildren, step, parentId);
                    break;
                case 'whenSkipSendToEndpointStep':
                    const whenSkipSendToEndpointChildren = (el as WhenSkipSendToEndpointStep).whenSkipSendToEndpoint?.steps || [];
                    if (el.uuid === parentId) whenSkipSendToEndpointChildren.push(step)
                    else (el as WhenSkipSendToEndpointStep).whenSkipSendToEndpoint.steps = CamelApi.addStep(whenSkipSendToEndpointChildren, step, parentId);
                    break;
                case 'loopStep':
                    const loopChildren = (el as LoopStep).loop?.steps || [];
                    if (el.uuid === parentId) loopChildren.push(step)
                    else (el as LoopStep).loop.steps = CamelApi.addStep(loopChildren, step, parentId);
                    break;
                case 'interceptSendToEndpointStep':
                    const interceptSendToEndpointChildren = (el as InterceptSendToEndpointStep).interceptSendToEndpoint?.steps || [];
                    if (el.uuid === parentId) interceptSendToEndpointChildren.push(step)
                    else (el as InterceptSendToEndpointStep).interceptSendToEndpoint.steps = CamelApi.addStep(interceptSendToEndpointChildren, step, parentId);
                    break;
                case 'doTryStep':
                    const doTryChildren = (el as DoTryStep).doTry?.steps || [];
                    if (el.uuid === parentId) doTryChildren.push(step)
                    else (el as DoTryStep).doTry.steps = CamelApi.addStep(doTryChildren, step, parentId);
                    break;
                case 'resequenceStep':
                    const resequenceChildren = (el as ResequenceStep).resequence?.steps || [];
                    if (el.uuid === parentId) resequenceChildren.push(step)
                    else (el as ResequenceStep).resequence.steps = CamelApi.addStep(resequenceChildren, step, parentId);
                    break;
                case 'pipelineStep':
                    const pipelineChildren = (el as PipelineStep).pipeline?.steps || [];
                    if (el.uuid === parentId) pipelineChildren.push(step)
                    else (el as PipelineStep).pipeline.steps = CamelApi.addStep(pipelineChildren, step, parentId);
                    break;
                case 'sagaStep':
                    const sagaChildren = (el as SagaStep).saga?.steps || [];
                    if (el.uuid === parentId) sagaChildren.push(step)
                    else (el as SagaStep).saga.steps = CamelApi.addStep(sagaChildren, step, parentId);
                    break;
                case 'whenStep':
                    const whenChildren = (el as WhenStep).when?.steps || [];
                    if (el.uuid === parentId) whenChildren.push(step)
                    else (el as WhenStep).when.steps = CamelApi.addStep(whenChildren, step, parentId);
                    break;
                case 'doFinallyStep':
                    const doFinallyChildren = (el as DoFinallyStep).doFinally?.steps || [];
                    if (el.uuid === parentId) doFinallyChildren.push(step)
                    else (el as DoFinallyStep).doFinally.steps = CamelApi.addStep(doFinallyChildren, step, parentId);
                    break;
                case 'filterStep':
                    const filterChildren = (el as FilterStep).filter?.steps || [];
                    if (el.uuid === parentId) filterChildren.push(step)
                    else (el as FilterStep).filter.steps = CamelApi.addStep(filterChildren, step, parentId);
                    break;
                case 'aggregateStep':
                    const aggregateChildren = (el as AggregateStep).aggregate?.steps || [];
                    if (el.uuid === parentId) aggregateChildren.push(step)
                    else (el as AggregateStep).aggregate.steps = CamelApi.addStep(aggregateChildren, step, parentId);
                    break;
                case 'idempotentConsumerStep':
                    const idempotentConsumerChildren = (el as IdempotentConsumerStep).idempotentConsumer?.steps || [];
                    if (el.uuid === parentId) idempotentConsumerChildren.push(step)
                    else (el as IdempotentConsumerStep).idempotentConsumer.steps = CamelApi.addStep(idempotentConsumerChildren, step, parentId);
                    break;
            }
            result.push(el);
        })
        return result;
    }

    static deleteStep = (steps: ProcessorStep[] | undefined, uuidToDelete: string): ProcessorStep[] => {
        const result: ProcessorStep[] = []
        if (steps !== undefined){
            steps.forEach(step => {
                if (step.uuid !== uuidToDelete){
                    switch (step.dslName){
                        case 'policyStep': (step as PolicyStep).policy.steps = CamelApi.deleteStep((step as PolicyStep).policy.steps, uuidToDelete); break;
                        case 'choiceStep':
                            const otherwise = (step as ChoiceStep).choice.otherwise;
                            if (otherwise && otherwise.uuid === uuidToDelete) {
                                (step as ChoiceStep).choice.otherwise = undefined;
                            } else if (otherwise && otherwise.uuid !== uuidToDelete) {
                                otherwise.steps = CamelApi.deleteStep(otherwise.steps, uuidToDelete);
                                (step as ChoiceStep).choice.otherwise = otherwise;
                            }
                            (step as ChoiceStep).choice.when = CamelApi.deleteWhen((step as ChoiceStep).choice.when, uuidToDelete);
                            break;
                        case 'otherwise': (step as Otherwise).steps = CamelApi.deleteStep((step as Otherwise).steps, uuidToDelete); break;
                        case 'fromStep': (step as FromStep).from.steps = CamelApi.deleteStep((step as FromStep).from.steps, uuidToDelete); break;
                        case 'onCompletionStep': (step as OnCompletionStep).onCompletion.steps = CamelApi.deleteStep((step as OnCompletionStep).onCompletion.steps, uuidToDelete); break;
                        case 'splitStep': (step as SplitStep).split.steps = CamelApi.deleteStep((step as SplitStep).split.steps, uuidToDelete); break;
                        case 'transactedStep': (step as TransactedStep).transacted.steps = CamelApi.deleteStep((step as TransactedStep).transacted.steps, uuidToDelete); break;
                        case 'interceptFromStep': (step as InterceptFromStep).interceptFrom.steps = CamelApi.deleteStep((step as InterceptFromStep).interceptFrom.steps, uuidToDelete); break;
                        case 'doCatchStep': (step as DoCatchStep).doCatch.steps = CamelApi.deleteStep((step as DoCatchStep).doCatch.steps, uuidToDelete); break;
                        case 'circuitBreakerStep': (step as CircuitBreakerStep).circuitBreaker.steps = CamelApi.deleteStep((step as CircuitBreakerStep).circuitBreaker.steps, uuidToDelete); break;
                        case 'interceptStep': (step as InterceptStep).intercept.steps = CamelApi.deleteStep((step as InterceptStep).intercept.steps, uuidToDelete); break;
                        case 'onFallbackStep': (step as OnFallbackStep).onFallback.steps = CamelApi.deleteStep((step as OnFallbackStep).onFallback.steps, uuidToDelete); break;
                        case 'multicastStep': (step as MulticastStep).multicast.steps = CamelApi.deleteStep((step as MulticastStep).multicast.steps, uuidToDelete); break;
                        case 'loadBalanceStep': (step as LoadBalanceStep).loadBalance.steps = CamelApi.deleteStep((step as LoadBalanceStep).loadBalance.steps, uuidToDelete); break;
                        case 'whenSkipSendToEndpointStep': (step as WhenSkipSendToEndpointStep).whenSkipSendToEndpoint.steps = CamelApi.deleteStep((step as WhenSkipSendToEndpointStep).whenSkipSendToEndpoint.steps, uuidToDelete); break;
                        case 'loopStep': (step as LoopStep).loop.steps = CamelApi.deleteStep((step as LoopStep).loop.steps, uuidToDelete); break;
                        case 'interceptSendToEndpointStep': (step as InterceptSendToEndpointStep).interceptSendToEndpoint.steps = CamelApi.deleteStep((step as InterceptSendToEndpointStep).interceptSendToEndpoint.steps, uuidToDelete); break;
                        case 'doTryStep': (step as DoTryStep).doTry.steps = CamelApi.deleteStep((step as DoTryStep).doTry.steps, uuidToDelete); break;
                        case 'resequenceStep': (step as ResequenceStep).resequence.steps = CamelApi.deleteStep((step as ResequenceStep).resequence.steps, uuidToDelete); break;
                        case 'pipelineStep': (step as PipelineStep).pipeline.steps = CamelApi.deleteStep((step as PipelineStep).pipeline.steps, uuidToDelete); break;
                        case 'sagaStep': (step as SagaStep).saga.steps = CamelApi.deleteStep((step as SagaStep).saga.steps, uuidToDelete); break;
                        case 'whenStep': (step as WhenStep).when.steps = CamelApi.deleteStep((step as WhenStep).when.steps, uuidToDelete); break;
                        case 'doFinallyStep': (step as DoFinallyStep).doFinally.steps = CamelApi.deleteStep((step as DoFinallyStep).doFinally.steps, uuidToDelete); break;
                        case 'filterStep': (step as FilterStep).filter.steps = CamelApi.deleteStep((step as FilterStep).filter.steps, uuidToDelete); break;
                        case 'aggregateStep': (step as AggregateStep).aggregate.steps = CamelApi.deleteStep((step as AggregateStep).aggregate.steps, uuidToDelete); break;
                        case 'idempotentConsumerStep': (step as IdempotentConsumerStep).idempotentConsumer.steps = CamelApi.deleteStep((step as IdempotentConsumerStep).idempotentConsumer.steps, uuidToDelete); break;
                    }
                    result.push(step);
                }
            })
        }
        return result
    }

    static deleteWhen = (whens: WhenStep[] | undefined, uuidToDelete: string): WhenStep[] => {
        const result: WhenStep[] = []
        if (whens !== undefined){
            whens.forEach(when => {
                if (when.uuid !== uuidToDelete) {
                    when.when.steps = CamelApi.deleteStep(when.when.steps, uuidToDelete);
                    result.push(when);
                }
            })
        }
        return result
    }

    static getExpressionLanguage = (init?: Partial<Expression>): string | undefined => {
        if (init?.constant) return 'constant'
        if (init?.csimple) return 'csimple'
        if (init?.datasonnet) return 'datasonnet'
        if (init?.exchangeProperty) return 'exchangeProperty'
        if (init?.groovy) return 'groovy'
        if (init?.header) return 'header'
        if (init?.hl7terser) return 'hl7terser'
        if (init?.joor) return 'joor'
        if (init?.jsonpath) return 'jsonpath'
        if (init?.method) return 'method'
        if (init?.mvel) return 'mvel'
        if (init?.ognl) return 'ognl'
        if (init?.ref) return 'ref'
        if (init?.simple) return 'simple'
        if (init?.spel) return 'spel'
        if (init?.tokenize) return 'tokenize'
        if (init?.xpath) return 'xpath'
        if (init?.xquery) return 'xquery'
        if (init?.xtokenize) return 'xtokenize'
        return undefined;
    }
}

