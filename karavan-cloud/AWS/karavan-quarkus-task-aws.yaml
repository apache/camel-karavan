apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: karavan-quarkus-builder
spec:
  params:
    - name: project
      type: string 
  steps:
    - name: karavan-create-aws-ecr-repository
      image: amazon/aws-cli:2.9.3@sha256:6a37d15ee2f17362cdd2807aeae6b0e38575ea417224d1c4999cbc2923d67da6 #tag: 2.0.52
      script: |
         #!/usr/bin/env bash
         echo "Configure aws-cli"
         export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
         REPO_NAME=${NAMESPACE}/$(inputs.params.project)
         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID 
         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
         aws configure set region $AWS_REGION
         aws configure set output $AWS_OUTPUT 
         password=$(aws ecr get-login-password --region ${AWS_REGION})
         output=$(aws ecr describe-repositories --repository-names ${REPO_NAME} 2>&1)
         if [ $? -ne 0 ]; then
          if echo ${output} | grep -q RepositoryNotFoundException; then
            output=$(aws ecr create-repository --repository-name ${NAMESPACE}/$(inputs.params.project) --region $AWS_REGION --tags '[{"Key":'\""$NAMESPACE"\"',"Value":"$(inputs.params.project)"}]')
            if [ $? -ne 0 ]; then
             >&2 echo ${output}
             echo "Failed to create repository $REPO_NAME"
             exit 1
            else
             echo "Successfully created repository $REPO_NAME"
            fi
          else
            >&2 echo ${output}
            exit 1
          fi
         else
            >&2 echo "Repository $REPO_NAME already exist. ${output}"
         fi
         echo $password > /workspace/ecr_password.txt
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_secret_access_key 
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_region
        - name: AWS_OUTPUT
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_output     
        - name: AWS_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_account                      
    - name: karavan-build-deploy
      script: |
          #!/usr/bin/env bash
          KAMELETS_DIR="/kamelets"
          if  [[ $KAMELETS_GIT_REPOSITORY == https* ]] ;
          then
              replacer=https://$KAMELETS_GIT_PASSWORD@
              prefix=https://
              url="${KAMELETS_GIT_REPOSITORY/$prefix/$replacer}"    
              git clone --depth 1 --branch ${KAMELETS_GIT_BRANCH} $url ${KAMELETS_DIR}
          else
              git clone --depth 1 --branch ${KAMELETS_GIT_BRANCH} ${KAMELETS_GIT_REPOSITORY} ${KAMELETS_DIR}    
          fi

          CHECKOUT_DIR="/scripts"
          
          if  [[ $PROJECTS_GIT_REPOSITORY == https* ]] ;
          then
              replacer=https://$PROJECTS_GIT_PASSWORD@
              prefix=https://
              url="${PROJECTS_GIT_REPOSITORY/$prefix/$replacer}"    
              git clone --depth 1 --branch ${PROJECTS_GIT_BRANCH} $url ${CHECKOUT_DIR}
          else
              git clone --depth 1 --branch ${PROJECTS_GIT_BRANCH} ${PROJECTS_GIT_REPOSITORY} ${CHECKOUT_DIR}    
          fi

          cd ${CHECKOUT_DIR}/$(inputs.params.project) 

          entrypoint -Dcamel.jbang.version=3.18.3 camel@apache/camel export --local-kamelet-dir=${KAMELETS_DIR}

          export LAST_COMMIT=$(git rev-parse --short HEAD)
          export DATE=$(date '+%Y%m%d%H%M%S')
          TOKEN="$(cat /workspace/ecr_password.txt)"
          export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
          /opt/mvnd/bin/mvnd package \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=true \
            -Dquarkus.container-image.insecure=false \
            -Dquarkus.container-image.username=AWS \
            -Dquarkus.container-image.password=${TOKEN} \
            -Dquarkus.container-image.registry=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com \
            -Dquarkus.container-image.builder=jib \
            -Dquarkus.kubernetes.deploy=true \
            -Dquarkus.kubernetes.deployment-target=kubernetes \
            -Dquarkus.kubernetes.add-version-to-label-selectors=false \
            -Dquarkus.kubernetes.labels.\"app.kubernetes.io/runtime\"=camel \
            -Dquarkus.container-image.group=${NAMESPACE} \
            -Dquarkus.container-image.tag=${DATE}
      image: ghcr.io/apache/camel-karavan-builder:3.18.6
      env:
        - name: PROJECTS_GIT_REPOSITORY
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-repository
        - name: PROJECTS_GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-username
        - name: PROJECTS_GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-password
        - name: PROJECTS_GIT_BRANCH
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-branch
        - name: KAMELETS_GIT_REPOSITORY
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-repository
        - name: KAMELETS_GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-username
        - name: KAMELETS_GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-password
        - name: KAMELETS_GIT_BRANCH
          valueFrom:
            secretKeyRef:
              name: karavan
              key: git-branch      
        - name: AWS_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_account
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: karavan
              key: aws_region                             
  workspaces:
    - mountPath: /root/.m2
      name: karavan-m2-cache
    - mountPath: /jbang/.jbang/cache
      name: karavan-jbang-cache