/**
 * Generated by karavan build tools - do NOT edit this file!
 */
import {CamelElement} from "./IntegrationDefinition";export class ProcessorDefinition extends CamelElement {
    idempotentConsumer?: IdempotentConsumerDefinition;
    doTry?: TryDefinition;
    convertBodyTo?: ConvertBodyDefinition | string;
    recipientList?: RecipientListDefinition;
    when?: WhenDefinition;
    setHeader?: SetHeaderDefinition;
    inOnly?: InOnlyDefinition | string;
    inOut?: InOutDefinition | string;
    split?: SplitDefinition;
    interceptSendToEndpoint?: InterceptSendToEndpointDefinition | string;
    loop?: LoopDefinition;
    setExchangePattern?: SetExchangePatternDefinition | string;
    marshal?: MarshalDefinition;
    onFallback?: OnFallbackDefinition;
    circuitBreaker?: CircuitBreakerDefinition;
    enrich?: EnrichDefinition;
    kamelet?: KameletDefinition | string;
    saga?: SagaDefinition;
    bean?: BeanDefinition | string;
    otherwise?: OtherwiseDefinition;
    toD?: ToDynamicDefinition | string;
    sort?: SortDefinition;
    loadBalance?: LoadBalanceDefinition;
    script?: ScriptDefinition;
    removeHeader?: RemoveHeaderDefinition | string;
    delay?: DelayDefinition;
    stop?: StopDefinition;
    serviceCall?: ServiceCallDefinition | string;
    intercept?: InterceptDefinition;
    doSwitch?: SwitchDefinition;
    whenSkipSendToEndpoint?: WhenSkipSendToEndpointDefinition;
    setProperty?: SetPropertyDefinition;
    removeProperty?: RemovePropertyDefinition | string;
    interceptFrom?: InterceptFromDefinition | string;
    onCompletion?: OnCompletionDefinition;
    throttle?: ThrottleDefinition;
    doFinally?: FinallyDefinition;
    log?: LogDefinition | string;
    doCatch?: CatchDefinition;
    transacted?: TransactedDefinition;
    claimCheck?: ClaimCheckDefinition;
    pollEnrich?: PollEnrichDefinition;
    removeHeaders?: RemoveHeadersDefinition | string;
    aggregate?: AggregateDefinition;
    resequence?: ResequenceDefinition;
    routingSlip?: RoutingSlipDefinition | string;
    transform?: TransformDefinition;
    removeProperties?: RemovePropertiesDefinition | string;
    policy?: PolicyDefinition;
    validate?: ValidateDefinition;
    rollback?: RollbackDefinition | string;
    process?: ProcessDefinition;
    threads?: ThreadsDefinition;
    setBody?: SetBodyDefinition;
    sample?: SamplingDefinition;
    throwException?: ThrowExceptionDefinition;
    dynamicRouter?: DynamicRouterDefinition;
    multicast?: MulticastDefinition;
    filter?: FilterDefinition;
    pipeline?: PipelineDefinition;
    unmarshal?: UnmarshalDefinition;
    wireTap?: WireTapDefinition;
    step?: StepDefinition;
    to?: ToDefinition | string;
    choice?: ChoiceDefinition
    public constructor(init?: Partial<ProcessorDefinition>) {
        super('ProcessorDefinition')
        Object.assign(this, init)
    }
}

export class DeadLetterChannelBuilder extends CamelElement {
    executorServiceRef?: string;
    onRedeliveryRef?: string;
    retryWhileRef?: string;
    asyncDelayedRedelivery?: boolean;
    useOriginalBody?: boolean;
    onPrepareFailureRef?: string;
    useOriginalMessage?: boolean;
    onExceptionOccurredRef?: string;
    deadLetterHandleNewException?: boolean;
    deadLetterUri?: string
    public constructor(init?: Partial<DeadLetterChannelBuilder>) {
        super('DeadLetterChannelBuilder')
        Object.assign(this, init)
    }
}

export class DefaultErrorHandlerBuilder extends CamelElement {
    executorServiceRef?: string;
    onRedeliveryRef?: string;
    retryWhileRef?: string;
    asyncDelayedRedelivery?: boolean;
    useOriginalBody?: boolean;
    onPrepareFailureRef?: string;
    useOriginalMessage?: boolean;
    onExceptionOccurredRef?: string
    public constructor(init?: Partial<DefaultErrorHandlerBuilder>) {
        super('DefaultErrorHandlerBuilder')
        Object.assign(this, init)
    }
}

export class ErrorHandlerBuilderRef extends CamelElement {
    deadLetterChannel?: DeadLetterChannelBuilder | string;
    ref?: string;
    log?: DefaultErrorHandlerBuilder;
    none?: NoErrorHandlerBuilder
    public constructor(init?: Partial<ErrorHandlerBuilderRef>) {
        super('ErrorHandlerBuilderRef')
        Object.assign(this, init)
    }
}

export class NoErrorHandlerBuilder extends CamelElement {

    public constructor(init?: Partial<NoErrorHandlerBuilder>) {
        super('NoErrorHandlerBuilder')
        Object.assign(this, init)
    }
}

export class BeansDeserializer extends CamelElement {

    public constructor(init?: Partial<BeansDeserializer>) {
        super('BeansDeserializer')
        Object.assign(this, init)
    }
}

export class NamedBeanDefinition extends CamelElement {
    name: string = '';
    type: string = '';
    properties?: any = {}
    public constructor(init?: Partial<NamedBeanDefinition>) {
        super('NamedBeanDefinition')
        Object.assign(this, init)
    }
}

export class OutputAwareFromDefinition extends CamelElement {
    parameters?: any = {};
    steps: CamelElement[] = [];
    uri: string = ''
    public constructor(init?: Partial<OutputAwareFromDefinition>) {
        super('OutputAwareFromDefinition')
        Object.assign(this, init)
    }
}

export class AggregateDefinition extends CamelElement {
    strategyMethodAllowNull?: boolean;
    closeCorrelationKeyOnCompletion?: number;
    description?: string;
    discardOnAggregationFailure?: boolean;
    eagerCheckCompletion?: boolean;
    correlationExpression?: ExpressionSubElementDefinition;
    strategyMethodName?: string;
    aggregationRepositoryRef?: string;
    completionOnNewCorrelationGroup?: boolean;
    stepName?: string = 'aggregate';
    completionInterval?: string;
    parallelProcessing?: boolean;
    id?: string;
    completionPredicate?: ExpressionSubElementDefinition;
    forceCompletionOnStop?: boolean;
    completionFromBatchConsumer?: boolean;
    executorServiceRef?: string;
    completeAllOnStop?: boolean;
    completionSize?: number;
    optimisticLockRetryPolicy?: OptimisticLockRetryPolicyDefinition;
    aggregateControllerRef?: string;
    steps?: CamelElement[] = [];
    completionSizeExpression?: ExpressionSubElementDefinition;
    completionTimeout?: string;
    completionTimeoutExpression?: ExpressionSubElementDefinition;
    inheritErrorHandler?: boolean;
    timeoutCheckerExecutorServiceRef?: string;
    ignoreInvalidCorrelationKeys?: boolean;
    discardOnCompletionTimeout?: boolean;
    completionTimeoutCheckerInterval?: string;
    optimisticLocking?: boolean;
    strategyRef?: string
    public constructor(init?: Partial<AggregateDefinition>) {
        super('AggregateDefinition')
        Object.assign(this, init)
    }
}

export class BeanDefinition extends CamelElement {
    cache?: boolean;
    inheritErrorHandler?: boolean;
    ref?: string;
    method?: string;
    stepName?: string = 'bean';
    scope?: string;
    description?: string;
    id?: string;
    beanType?: string
    public constructor(init?: Partial<BeanDefinition>) {
        super('BeanDefinition')
        Object.assign(this, init)
    }
}

export class CatchDefinition extends CamelElement {
    exception?: string[] = [];
    inheritErrorHandler?: boolean;
    stepName?: string = 'doCatch';
    onWhen?: WhenDefinition;
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<CatchDefinition>) {
        super('CatchDefinition')
        Object.assign(this, init)
    }
}

export class ChoiceDefinition extends CamelElement {
    otherwise?: OtherwiseDefinition;
    inheritErrorHandler?: boolean;
    stepName?: string = 'choice';
    description?: string;
    id?: string;
    when?: WhenDefinition[] = []
    public constructor(init?: Partial<ChoiceDefinition>) {
        super('ChoiceDefinition')
        Object.assign(this, init)
    }
}

export class CircuitBreakerDefinition extends CamelElement {
    faultToleranceConfiguration?: FaultToleranceConfigurationDefinition;
    hystrixConfiguration?: HystrixConfigurationDefinition;
    inheritErrorHandler?: boolean;
    configurationRef?: string;
    stepName?: string = 'circuitBreaker';
    resilience4jConfiguration?: Resilience4jConfigurationDefinition;
    onFallback?: OnFallbackDefinition;
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<CircuitBreakerDefinition>) {
        super('CircuitBreakerDefinition')
        Object.assign(this, init)
    }
}

export class ClaimCheckDefinition extends CamelElement {
    filter?: string;
    inheritErrorHandler?: boolean;
    stepName?: string = 'claimCheck';
    description?: string;
    id?: string;
    strategyMethodName?: string;
    operation: string = '';
    key?: string;
    strategyRef?: string
    public constructor(init?: Partial<ClaimCheckDefinition>) {
        super('ClaimCheckDefinition')
        Object.assign(this, init)
    }
}

export class ContextScanDefinition extends CamelElement {
    excludes?: string[] = [];
    includeNonSingletons?: boolean;
    includes?: string[] = []
    public constructor(init?: Partial<ContextScanDefinition>) {
        super('ContextScanDefinition')
        Object.assign(this, init)
    }
}

export class ConvertBodyDefinition extends CamelElement {
    charset?: string;
    inheritErrorHandler?: boolean;
    stepName?: string = 'convertBodyTo';
    description?: string;
    id?: string;
    type: string = '';
    mandatory?: boolean
    public constructor(init?: Partial<ConvertBodyDefinition>) {
        super('ConvertBodyDefinition')
        Object.assign(this, init)
    }
}

export class DataFormatDefinition extends CamelElement {
    id?: string
    public constructor(init?: Partial<DataFormatDefinition>) {
        super('DataFormatDefinition')
        Object.assign(this, init)
    }
}

export class DelayDefinition extends CamelElement {
    executorServiceRef?: string;
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'delay';
    callerRunsWhenRejected?: boolean;
    asyncDelayed?: boolean;
    description?: string;
    id?: string
    public constructor(init?: Partial<DelayDefinition>) {
        super('DelayDefinition')
        Object.assign(this, init)
    }
}

export class DescriptionDefinition extends CamelElement {
    text?: string;
    lang?: string
    public constructor(init?: Partial<DescriptionDefinition>) {
        super('DescriptionDefinition')
        Object.assign(this, init)
    }
}

export class DynamicRouterDefinition extends CamelElement {
    uriDelimiter?: string;
    ignoreInvalidEndpoints?: boolean;
    inheritErrorHandler?: boolean;
    cacheSize?: number;
    expression?: ExpressionDefinition;
    stepName?: string = 'dynamicRouter';
    description?: string;
    id?: string
    public constructor(init?: Partial<DynamicRouterDefinition>) {
        super('DynamicRouterDefinition')
        Object.assign(this, init)
    }
}

export class EnrichDefinition extends CamelElement {
    strategyMethodAllowNull?: string;
    cacheSize?: number;
    expression?: ExpressionDefinition;
    description?: string;
    allowOptimisedComponents?: boolean;
    strategyMethodName?: string;
    inheritErrorHandler?: boolean;
    stepName?: string = 'enrich';
    ignoreInvalidEndpoint?: boolean;
    id?: string;
    aggregateOnException?: boolean;
    shareUnitOfWork?: boolean;
    strategyRef?: string
    public constructor(init?: Partial<EnrichDefinition>) {
        super('EnrichDefinition')
        Object.assign(this, init)
    }
}

export class ExpressionSubElementDefinition extends CamelElement {
    ognl?: OgnlExpression | string;
    constant?: ConstantExpression | string;
    mvel?: MvelExpression | string;
    method?: MethodCallExpression | string;
    xquery?: XQueryExpression | string;
    datasonnet?: DatasonnetExpression | string;
    language?: LanguageExpression;
    simple?: SimpleExpression | string;
    hl7terser?: Hl7TerserExpression | string;
    tokenize?: TokenizerExpression | string;
    spel?: SpELExpression | string;
    ref?: RefExpression | string;
    xpath?: XPathExpression | string;
    groovy?: GroovyExpression | string;
    csimple?: CSimpleExpression | string;
    exchangeProperty?: ExchangePropertyExpression | string;
    jsonpath?: JsonPathExpression | string;
    header?: HeaderExpression | string;
    joor?: JoorExpression | string;
    xtokenize?: XMLTokenizerExpression | string
    public constructor(init?: Partial<ExpressionSubElementDefinition>) {
        super('ExpressionSubElementDefinition')
        Object.assign(this, init)
    }
}

export class FaultToleranceConfigurationDefinition extends CamelElement {
    circuitBreakerRef?: string;
    failureRatio?: number;
    timeoutDuration?: string;
    timeoutEnabled?: boolean;
    successThreshold?: number;
    timeoutPoolSize?: number;
    requestVolumeThreshold?: number;
    timeoutScheduledExecutorServiceRef?: string;
    bulkheadExecutorServiceRef?: string;
    delay?: string;
    bulkheadWaitingTaskQueue?: number;
    id?: string;
    bulkheadMaxConcurrentCalls?: number;
    bulkheadEnabled?: boolean
    public constructor(init?: Partial<FaultToleranceConfigurationDefinition>) {
        super('FaultToleranceConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class FilterDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'filter';
    description?: string;
    id?: string;
    steps?: CamelElement[] = [];
    statusPropertyName?: string
    public constructor(init?: Partial<FilterDefinition>) {
        super('FilterDefinition')
        Object.assign(this, init)
    }
}

export class FinallyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'doFinally';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<FinallyDefinition>) {
        super('FinallyDefinition')
        Object.assign(this, init)
    }
}

export class FromDefinition extends CamelElement {
    stepName?: string = 'from';
    parameters?: any = {};
    steps: CamelElement[] = [];
    uri: string = ''
    public constructor(init?: Partial<FromDefinition>) {
        super('FromDefinition')
        Object.assign(this, init)
    }
}

export class GlobalOptionDefinition extends CamelElement {
    value: string = '';
    key: string = ''
    public constructor(init?: Partial<GlobalOptionDefinition>) {
        super('GlobalOptionDefinition')
        Object.assign(this, init)
    }
}

export class GlobalOptionsDefinition extends CamelElement {
    globalOption?: GlobalOptionDefinition[] = []
    public constructor(init?: Partial<GlobalOptionsDefinition>) {
        super('GlobalOptionsDefinition')
        Object.assign(this, init)
    }
}

export class HystrixConfigurationDefinition extends CamelElement {
    metricsRollingPercentileEnabled?: boolean;
    circuitBreakerForceOpen?: boolean;
    circuitBreakerEnabled?: boolean;
    fallbackIsolationSemaphoreMaxConcurrentRequests?: number;
    circuitBreakerRequestVolumeThreshold?: number;
    groupKey?: string;
    metricsRollingStatisticalWindowBuckets?: number;
    metricsRollingStatisticalWindowInMilliseconds?: number;
    threadPoolKey?: string;
    queueSizeRejectionThreshold?: number;
    fallbackEnabled?: boolean;
    threadPoolRollingNumberStatisticalWindowInMilliseconds?: number;
    maxQueueSize?: number;
    circuitBreakerSleepWindowInMilliseconds?: number;
    id?: string;
    keepAliveTime?: number;
    executionIsolationThreadInterruptOnTimeout?: boolean;
    executionTimeoutInMilliseconds?: number;
    executionIsolationSemaphoreMaxConcurrentRequests?: number;
    requestLogEnabled?: boolean;
    circuitBreakerErrorThresholdPercentage?: number;
    executionTimeoutEnabled?: boolean;
    threadPoolRollingNumberStatisticalWindowBuckets?: number;
    circuitBreakerForceClosed?: boolean;
    corePoolSize?: number;
    maximumSize?: number;
    metricsRollingPercentileWindowInMilliseconds?: number;
    executionIsolationStrategy?: string;
    metricsHealthSnapshotIntervalInMilliseconds?: number;
    metricsRollingPercentileWindowBuckets?: number;
    allowMaximumSizeToDivergeFromCoreSize?: boolean;
    metricsRollingPercentileBucketSize?: number
    public constructor(init?: Partial<HystrixConfigurationDefinition>) {
        super('HystrixConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class IdempotentConsumerDefinition extends CamelElement {
    completionEager?: string;
    skipDuplicate?: boolean;
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    eager?: boolean;
    stepName?: string = 'idempotentConsumer';
    messageIdRepositoryRef: string = '';
    description?: string;
    removeOnFailure?: boolean;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<IdempotentConsumerDefinition>) {
        super('IdempotentConsumerDefinition')
        Object.assign(this, init)
    }
}

export class InOnlyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'inOnly';
    description?: string;
    id?: string;
    parameters?: any = {};
    uri: string = ''
    public constructor(init?: Partial<InOnlyDefinition>) {
        super('InOnlyDefinition')
        Object.assign(this, init)
    }
}

export class InOutDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'inOut';
    description?: string;
    id?: string;
    parameters?: any = {};
    uri: string = ''
    public constructor(init?: Partial<InOutDefinition>) {
        super('InOutDefinition')
        Object.assign(this, init)
    }
}

export class InputTypeDefinition extends CamelElement {
    urn: string = '';
    description?: string;
    id?: string;
    validate?: boolean
    public constructor(init?: Partial<InputTypeDefinition>) {
        super('InputTypeDefinition')
        Object.assign(this, init)
    }
}

export class InterceptDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'intercept';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<InterceptDefinition>) {
        super('InterceptDefinition')
        Object.assign(this, init)
    }
}

export class InterceptFromDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'interceptFrom';
    description?: string;
    id?: string;
    steps?: CamelElement[] = [];
    uri?: string
    public constructor(init?: Partial<InterceptFromDefinition>) {
        super('InterceptFromDefinition')
        Object.assign(this, init)
    }
}

export class InterceptSendToEndpointDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    afterUri?: string;
    stepName?: string = 'interceptSendToEndpoint';
    description?: string;
    id?: string;
    steps?: CamelElement[] = [];
    uri: string = '';
    skipSendToOriginalEndpoint?: string
    public constructor(init?: Partial<InterceptSendToEndpointDefinition>) {
        super('InterceptSendToEndpointDefinition')
        Object.assign(this, init)
    }
}

export class KameletDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'kamelet';
    name: string = '';
    parameters?: any = {}
    public constructor(init?: Partial<KameletDefinition>) {
        super('KameletDefinition')
        Object.assign(this, init)
    }
}

export class LoadBalanceDefinition extends CamelElement {
    random?: RandomLoadBalancerDefinition;
    inheritErrorHandler?: boolean;
    customLoadBalancer?: CustomLoadBalancerDefinition | string;
    stepName?: string = 'loadBalance';
    failover?: FailoverLoadBalancerDefinition;
    sticky?: StickyLoadBalancerDefinition;
    description?: string;
    topic?: TopicLoadBalancerDefinition;
    id?: string;
    steps?: CamelElement[] = [];
    weighted?: WeightedLoadBalancerDefinition;
    roundRobin?: RoundRobinLoadBalancerDefinition
    public constructor(init?: Partial<LoadBalanceDefinition>) {
        super('LoadBalanceDefinition')
        Object.assign(this, init)
    }
}

export class LoadBalancerDefinition extends CamelElement {
    id?: string
    public constructor(init?: Partial<LoadBalancerDefinition>) {
        super('LoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class LogDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    logName?: string;
    stepName?: string = 'log';
    marker?: string;
    description?: string;
    loggerRef?: string;
    id?: string;
    message: string = '';
    loggingLevel?: string
    public constructor(init?: Partial<LogDefinition>) {
        super('LogDefinition')
        Object.assign(this, init)
    }
}

export class LoopDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'loop';
    doWhile?: boolean;
    description?: string;
    breakOnShutdown?: boolean;
    copy?: boolean;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<LoopDefinition>) {
        super('LoopDefinition')
        Object.assign(this, init)
    }
}

export class MarshalDefinition extends CamelElement {
    univocityCsv?: UniVocityCsvDataFormat;
    protobuf?: ProtobufDataFormat | string;
    tarFile?: TarFileDataFormat;
    tidyMarkup?: TidyMarkupDataFormat;
    csv?: CsvDataFormat | string;
    base64?: Base64DataFormat;
    zipDeflater?: ZipDeflaterDataFormat;
    description?: string;
    bindy?: BindyDataFormat;
    syslog?: SyslogDataFormat;
    zipFile?: ZipFileDataFormat;
    jaxb?: JaxbDataFormat;
    rss?: RssDataFormat;
    stepName?: string = 'marshal';
    mimeMultipart?: MimeMultipartDataFormat;
    asn1?: ASN1DataFormat | string;
    pgp?: PGPDataFormat;
    thrift?: ThriftDataFormat | string;
    json?: JsonDataFormat;
    lzf?: LZFDataFormat;
    id?: string;
    fhirXml?: FhirXmlDataFormat;
    barcode?: BarcodeDataFormat;
    avro?: AvroDataFormat | string;
    yaml?: YAMLDataFormat;
    beanio?: BeanioDataFormat;
    fhirJson?: FhirJsonDataFormat;
    any23?: Any23DataFormat | string;
    custom?: CustomDataFormat | string;
    flatpack?: FlatpackDataFormat;
    cbor?: CBORDataFormat;
    crypto?: CryptoDataFormat;
    univocityTsv?: UniVocityTsvDataFormat;
    hl7?: HL7DataFormat;
    inheritErrorHandler?: boolean;
    jsonApi?: JsonApiDataFormat;
    xmlSecurity?: XMLSecurityDataFormat;
    ical?: IcalDataFormat;
    univocityFixed?: UniVocityFixedDataFormat;
    jacksonXml?: JacksonXMLDataFormat;
    grok?: GrokDataFormat;
    xstream?: XStreamDataFormat | string;
    gzipDeflater?: GzipDeflaterDataFormat;
    soap?: SoapDataFormat | string
    public constructor(init?: Partial<MarshalDefinition>) {
        super('MarshalDefinition')
        Object.assign(this, init)
    }
}

export class MulticastDefinition extends CamelElement {
    strategyMethodAllowNull?: boolean;
    executorServiceRef?: string;
    description?: string;
    strategyMethodName?: string;
    steps?: CamelElement[] = [];
    timeout?: string;
    onPrepareRef?: string;
    inheritErrorHandler?: boolean;
    streaming?: boolean;
    stepName?: string = 'multicast';
    stopOnException?: boolean;
    stopOnAggregateException?: boolean;
    parallelProcessing?: boolean;
    id?: string;
    parallelAggregate?: boolean;
    shareUnitOfWork?: boolean;
    strategyRef?: string
    public constructor(init?: Partial<MulticastDefinition>) {
        super('MulticastDefinition')
        Object.assign(this, init)
    }
}

export class OnCompletionDefinition extends CamelElement {
    mode?: string;
    executorServiceRef?: string;
    inheritErrorHandler?: boolean;
    onCompleteOnly?: boolean;
    stepName?: string = 'onCompletion';
    parallelProcessing?: boolean;
    onWhen?: WhenDefinition;
    description?: string;
    id?: string;
    useOriginalMessage?: boolean;
    steps?: CamelElement[] = [];
    onFailureOnly?: boolean
    public constructor(init?: Partial<OnCompletionDefinition>) {
        super('OnCompletionDefinition')
        Object.assign(this, init)
    }
}

export class OnExceptionDefinition extends CamelElement {
    exception?: string[] = [];
    redeliveryPolicy?: RedeliveryPolicyDefinition;
    continued?: ExpressionSubElementDefinition;
    description?: string;
    useOriginalMessage?: boolean;
    steps?: CamelElement[] = [];
    retryWhile?: ExpressionSubElementDefinition;
    inheritErrorHandler?: boolean;
    onRedeliveryRef?: string;
    stepName?: string = 'onException';
    useOriginalBody?: boolean;
    handled?: ExpressionSubElementDefinition;
    onWhen?: WhenDefinition;
    id?: string;
    onExceptionOccurredRef?: string;
    redeliveryPolicyRef?: string
    public constructor(init?: Partial<OnExceptionDefinition>) {
        super('OnExceptionDefinition')
        Object.assign(this, init)
    }
}

export class OnFallbackDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'onFallback';
    fallbackViaNetwork?: boolean;
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<OnFallbackDefinition>) {
        super('OnFallbackDefinition')
        Object.assign(this, init)
    }
}

export class OptimisticLockRetryPolicyDefinition extends CamelElement {
    retryDelay?: string;
    maximumRetries?: number;
    randomBackOff?: boolean;
    exponentialBackOff?: boolean;
    maximumRetryDelay?: string
    public constructor(init?: Partial<OptimisticLockRetryPolicyDefinition>) {
        super('OptimisticLockRetryPolicyDefinition')
        Object.assign(this, init)
    }
}

export class OtherwiseDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'otherwise';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<OtherwiseDefinition>) {
        super('OtherwiseDefinition')
        Object.assign(this, init)
    }
}

export class OutputDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<OutputDefinition>) {
        super('OutputDefinition')
        Object.assign(this, init)
    }
}

export class OutputTypeDefinition extends CamelElement {
    urn: string = '';
    description?: string;
    id?: string;
    validate?: boolean
    public constructor(init?: Partial<OutputTypeDefinition>) {
        super('OutputTypeDefinition')
        Object.assign(this, init)
    }
}

export class PackageScanDefinition extends CamelElement {
    excludes?: string[] = [];
    package?: string[] = [];
    includes?: string[] = []
    public constructor(init?: Partial<PackageScanDefinition>) {
        super('PackageScanDefinition')
        Object.assign(this, init)
    }
}

export class PipelineDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'pipeline';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<PipelineDefinition>) {
        super('PipelineDefinition')
        Object.assign(this, init)
    }
}

export class PolicyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    ref: string = '';
    stepName?: string = 'policy';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<PolicyDefinition>) {
        super('PolicyDefinition')
        Object.assign(this, init)
    }
}

export class PollEnrichDefinition extends CamelElement {
    strategyMethodAllowNull?: boolean;
    inheritErrorHandler?: boolean;
    cacheSize?: number;
    expression?: ExpressionDefinition;
    stepName?: string = 'pollEnrich';
    ignoreInvalidEndpoint?: number;
    description?: string;
    id?: string;
    strategyMethodName?: string;
    aggregateOnException?: boolean;
    timeout?: string;
    strategyRef?: string
    public constructor(init?: Partial<PollEnrichDefinition>) {
        super('PollEnrichDefinition')
        Object.assign(this, init)
    }
}

export class ProcessDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    ref: string = '';
    stepName?: string = 'process';
    description?: string;
    id?: string
    public constructor(init?: Partial<ProcessDefinition>) {
        super('ProcessDefinition')
        Object.assign(this, init)
    }
}

export class PropertyDefinition extends CamelElement {
    value: string = '';
    key: string = ''
    public constructor(init?: Partial<PropertyDefinition>) {
        super('PropertyDefinition')
        Object.assign(this, init)
    }
}

export class RecipientListDefinition extends CamelElement {
    strategyMethodAllowNull?: boolean;
    executorServiceRef?: string;
    cacheSize?: number;
    expression?: ExpressionDefinition;
    description?: string;
    strategyMethodName?: string;
    timeout?: string;
    onPrepareRef?: string;
    ignoreInvalidEndpoints?: boolean;
    inheritErrorHandler?: boolean;
    streaming?: boolean;
    stepName?: string = 'recipientList';
    stopOnException?: boolean;
    delimiter?: string;
    stopOnAggregateException?: boolean;
    parallelProcessing?: boolean;
    id?: string;
    parallelAggregate?: boolean;
    shareUnitOfWork?: boolean;
    strategyRef?: string
    public constructor(init?: Partial<RecipientListDefinition>) {
        super('RecipientListDefinition')
        Object.assign(this, init)
    }
}

export class RedeliveryPolicyDefinition extends CamelElement {
    logNewException?: boolean;
    backOffMultiplier?: number;
    exchangeFormatterRef?: string;
    allowRedeliveryWhileStopping?: boolean;
    delayPattern?: string;
    retriesExhaustedLogLevel?: string;
    logStackTrace?: boolean;
    retryAttemptedLogInterval?: number;
    logRetryAttempted?: boolean;
    maximumRedeliveryDelay?: string;
    useExponentialBackOff?: boolean;
    logExhaustedMessageHistory?: boolean;
    collisionAvoidanceFactor?: number;
    asyncDelayedRedelivery?: boolean;
    logRetryStackTrace?: boolean;
    disableRedelivery?: boolean;
    logContinued?: boolean;
    retryAttemptedLogLevel?: string;
    redeliveryDelay?: string;
    logExhaustedMessageBody?: boolean;
    logHandled?: boolean;
    maximumRedeliveries?: number;
    logExhausted?: boolean;
    useCollisionAvoidance?: boolean
    public constructor(init?: Partial<RedeliveryPolicyDefinition>) {
        super('RedeliveryPolicyDefinition')
        Object.assign(this, init)
    }
}

export class RemoveHeaderDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'removeHeader';
    name: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<RemoveHeaderDefinition>) {
        super('RemoveHeaderDefinition')
        Object.assign(this, init)
    }
}

export class RemoveHeadersDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'removeHeaders';
    excludePattern?: string;
    pattern: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<RemoveHeadersDefinition>) {
        super('RemoveHeadersDefinition')
        Object.assign(this, init)
    }
}

export class RemovePropertiesDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'removeProperties';
    excludePattern?: string;
    pattern: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<RemovePropertiesDefinition>) {
        super('RemovePropertiesDefinition')
        Object.assign(this, init)
    }
}

export class RemovePropertyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'removeProperty';
    name?: string;
    description?: string;
    id?: string
    public constructor(init?: Partial<RemovePropertyDefinition>) {
        super('RemovePropertyDefinition')
        Object.assign(this, init)
    }
}

export class ResequenceDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    streamConfig?: StreamResequencerConfig;
    expression: ExpressionDefinition = new ExpressionDefinition();
    stepName?: string = 'resequence';
    description?: string;
    id?: string;
    steps?: CamelElement[] = [];
    batchConfig?: BatchResequencerConfig
    public constructor(init?: Partial<ResequenceDefinition>) {
        super('ResequenceDefinition')
        Object.assign(this, init)
    }
}

export class Resilience4jConfigurationDefinition extends CamelElement {
    failureRateThreshold?: number;
    circuitBreakerRef?: string;
    slowCallDurationThreshold?: number;
    minimumNumberOfCalls?: number;
    permittedNumberOfCallsInHalfOpenState?: number;
    slowCallRateThreshold?: number;
    writableStackTraceEnabled?: boolean;
    automaticTransitionFromOpenToHalfOpenEnabled?: boolean;
    slidingWindowSize?: number;
    id?: string;
    configRef?: string;
    slidingWindowType?: string;
    waitDurationInOpenState?: number
    public constructor(init?: Partial<Resilience4jConfigurationDefinition>) {
        super('Resilience4jConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class RestContextRefDefinition extends CamelElement {
    ref: string = ''
    public constructor(init?: Partial<RestContextRefDefinition>) {
        super('RestContextRefDefinition')
        Object.assign(this, init)
    }
}

export class RollbackDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'rollback';
    markRollbackOnly?: boolean;
    description?: string;
    id?: string;
    message?: string;
    markRollbackOnlyLast?: boolean
    public constructor(init?: Partial<RollbackDefinition>) {
        super('RollbackDefinition')
        Object.assign(this, init)
    }
}

export class RouteBuilderDefinition extends CamelElement {
    ref: string = '';
    id?: string
    public constructor(init?: Partial<RouteBuilderDefinition>) {
        super('RouteBuilderDefinition')
        Object.assign(this, init)
    }
}

export class RouteConfigurationContextRefDefinition extends CamelElement {
    ref: string = ''
    public constructor(init?: Partial<RouteConfigurationContextRefDefinition>) {
        super('RouteConfigurationContextRefDefinition')
        Object.assign(this, init)
    }
}

export class RouteConfigurationDefinition extends CamelElement {
    onCompletion?: OnCompletionDefinition[] = [];
    interceptSendToEndpoint?: InterceptSendToEndpointDefinition[] = [];
    intercept?: InterceptDefinition[] = [];
    onException?: OnExceptionDefinition[] = [];
    id?: string;
    interceptFrom?: InterceptFromDefinition[] = []
    public constructor(init?: Partial<RouteConfigurationDefinition>) {
        super('RouteConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class RouteContextRefDefinition extends CamelElement {
    ref: string = ''
    public constructor(init?: Partial<RouteContextRefDefinition>) {
        super('RouteContextRefDefinition')
        Object.assign(this, init)
    }
}

export class RouteDefinition extends CamelElement {
    stepName?: string = 'route';
    routeConfigurationId?: string;
    description?: string;
    from: FromDefinition = new FromDefinition();
    id?: string;
    group?: string
    public constructor(init?: Partial<RouteDefinition>) {
        super('RouteDefinition')
        Object.assign(this, init)
    }
}

export class RouteTemplateBeanDefinition extends CamelElement {
    name: string = '';
    property?: PropertyDefinition[] = [];
    type: string = '';
    beanType?: string;
    properties?: any = {};
    script?: RouteTemplateScriptDefinition | string
    public constructor(init?: Partial<RouteTemplateBeanDefinition>) {
        super('RouteTemplateBeanDefinition')
        Object.assign(this, init)
    }
}

export class RouteTemplateDefinition extends CamelElement {
    stepName?: string = 'template';
    beans?: NamedBeanDefinition[] = [];
    from: FromDefinition = new FromDefinition();
    id: string = '';
    parameters?: RouteTemplateParameterDefinition[] = []
    public constructor(init?: Partial<RouteTemplateDefinition>) {
        super('RouteTemplateDefinition')
        Object.assign(this, init)
    }
}

export class RouteTemplateParameterDefinition extends CamelElement {
    defaultValue?: string;
    name: string = '';
    description?: string;
    required?: boolean
    public constructor(init?: Partial<RouteTemplateParameterDefinition>) {
        super('RouteTemplateParameterDefinition')
        Object.assign(this, init)
    }
}

export class RouteTemplateScriptDefinition extends CamelElement {
    script?: string
    public constructor(init?: Partial<RouteTemplateScriptDefinition>) {
        super('RouteTemplateScriptDefinition')
        Object.assign(this, init)
    }
}

export class RoutingSlipDefinition extends CamelElement {
    uriDelimiter?: string;
    ignoreInvalidEndpoints?: boolean;
    inheritErrorHandler?: boolean;
    cacheSize?: number;
    expression?: ExpressionDefinition;
    stepName?: string = 'routingSlip';
    description?: string;
    id?: string
    public constructor(init?: Partial<RoutingSlipDefinition>) {
        super('RoutingSlipDefinition')
        Object.assign(this, init)
    }
}

export class SagaActionUriDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    description?: string;
    id?: string;
    parameters?: any = {};
    uri: string = ''
    public constructor(init?: Partial<SagaActionUriDefinition>) {
        super('SagaActionUriDefinition')
        Object.assign(this, init)
    }
}

export class SagaDefinition extends CamelElement {
    completion?: string;
    description?: string;
    completionMode?: string;
    sagaServiceRef?: string;
    timeoutInMilliseconds?: number;
    steps?: CamelElement[] = [];
    timeout?: string;
    inheritErrorHandler?: boolean;
    propagation?: string;
    stepName?: string = 'saga';
    compensation?: string;
    id?: string;
    option?: SagaOptionDefinition[] = []
    public constructor(init?: Partial<SagaDefinition>) {
        super('SagaDefinition')
        Object.assign(this, init)
    }
}

export class SagaOptionDefinition extends CamelElement {
    expression?: ExpressionDefinition;
    optionName: string = ''
    public constructor(init?: Partial<SagaOptionDefinition>) {
        super('SagaOptionDefinition')
        Object.assign(this, init)
    }
}

export class SamplingDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'sample';
    description?: string;
    messageFrequency?: number;
    id?: string;
    units?: string;
    samplePeriod?: string
    public constructor(init?: Partial<SamplingDefinition>) {
        super('SamplingDefinition')
        Object.assign(this, init)
    }
}

export class ScriptDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'script';
    description?: string;
    id?: string
    public constructor(init?: Partial<ScriptDefinition>) {
        super('ScriptDefinition')
        Object.assign(this, init)
    }
}

export class SetBodyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'setBody';
    description?: string;
    id?: string
    public constructor(init?: Partial<SetBodyDefinition>) {
        super('SetBodyDefinition')
        Object.assign(this, init)
    }
}

export class SetExchangePatternDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'setExchangePattern';
    pattern: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<SetExchangePatternDefinition>) {
        super('SetExchangePatternDefinition')
        Object.assign(this, init)
    }
}

export class SetHeaderDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'setHeader';
    name: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<SetHeaderDefinition>) {
        super('SetHeaderDefinition')
        Object.assign(this, init)
    }
}

export class SetPropertyDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'setProperty';
    name: string = '';
    description?: string;
    id?: string
    public constructor(init?: Partial<SetPropertyDefinition>) {
        super('SetPropertyDefinition')
        Object.assign(this, init)
    }
}

export class SortDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'sort';
    description?: string;
    comparatorRef?: string;
    id?: string
    public constructor(init?: Partial<SortDefinition>) {
        super('SortDefinition')
        Object.assign(this, init)
    }
}

export class SplitDefinition extends CamelElement {
    strategyMethodAllowNull?: boolean;
    executorServiceRef?: string;
    expression?: ExpressionDefinition;
    description?: string;
    strategyMethodName?: string;
    steps?: CamelElement[] = [];
    timeout?: string;
    onPrepareRef?: string;
    inheritErrorHandler?: boolean;
    streaming?: boolean;
    stepName?: string = 'split';
    stopOnException?: boolean;
    delimiter?: string;
    stopOnAggregateException?: boolean;
    parallelProcessing?: boolean;
    id?: string;
    parallelAggregate?: boolean;
    shareUnitOfWork?: boolean;
    strategyRef?: string
    public constructor(init?: Partial<SplitDefinition>) {
        super('SplitDefinition')
        Object.assign(this, init)
    }
}

export class StepDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'step';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<StepDefinition>) {
        super('StepDefinition')
        Object.assign(this, init)
    }
}

export class StopDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'stop';
    description?: string;
    id?: string
    public constructor(init?: Partial<StopDefinition>) {
        super('StopDefinition')
        Object.assign(this, init)
    }
}

export class SwitchDefinition extends CamelElement {
    otherwise?: OtherwiseDefinition;
    inheritErrorHandler?: boolean;
    stepName?: string = 'doSwitch';
    description?: string;
    id?: string;
    when?: WhenDefinition[] = []
    public constructor(init?: Partial<SwitchDefinition>) {
        super('SwitchDefinition')
        Object.assign(this, init)
    }
}

export class ThreadPoolProfileDefinition extends CamelElement {
    keepAliveTime?: number;
    maxQueueSize?: number;
    allowCoreThreadTimeOut?: boolean;
    poolSize?: number;
    description?: string;
    defaultProfile?: boolean;
    id?: string;
    maxPoolSize?: number;
    rejectedPolicy?: string;
    timeUnit?: string
    public constructor(init?: Partial<ThreadPoolProfileDefinition>) {
        super('ThreadPoolProfileDefinition')
        Object.assign(this, init)
    }
}

export class ThreadsDefinition extends CamelElement {
    executorServiceRef?: string;
    keepAliveTime?: number;
    callerRunsWhenRejected?: string;
    poolSize?: number;
    description?: string;
    threadName?: string;
    rejectedPolicy?: string;
    inheritErrorHandler?: boolean;
    stepName?: string = 'threads';
    maxQueueSize?: number;
    allowCoreThreadTimeOut?: boolean;
    id?: string;
    maxPoolSize?: number;
    timeUnit?: string
    public constructor(init?: Partial<ThreadsDefinition>) {
        super('ThreadsDefinition')
        Object.assign(this, init)
    }
}

export class ThrottleDefinition extends CamelElement {
    executorServiceRef?: string;
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'throttle';
    callerRunsWhenRejected?: boolean;
    timePeriodMillis?: string;
    asyncDelayed?: boolean;
    description?: string;
    rejectExecution?: boolean;
    correlationExpression?: ExpressionSubElementDefinition;
    id?: string
    public constructor(init?: Partial<ThrottleDefinition>) {
        super('ThrottleDefinition')
        Object.assign(this, init)
    }
}

export class ThrowExceptionDefinition extends CamelElement {
    exceptionType?: string;
    inheritErrorHandler?: boolean;
    ref?: string;
    stepName?: string = 'throwException';
    description?: string;
    id?: string;
    message?: string
    public constructor(init?: Partial<ThrowExceptionDefinition>) {
        super('ThrowExceptionDefinition')
        Object.assign(this, init)
    }
}

export class ToDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    stepName?: string = 'to';
    pattern?: string;
    description?: string;
    id?: string;
    parameters?: any = {};
    uri: string = ''
    public constructor(init?: Partial<ToDefinition>) {
        super('ToDefinition')
        Object.assign(this, init)
    }
}

export class ToDynamicDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    cacheSize?: number;
    stepName?: string = 'toD';
    ignoreInvalidEndpoint?: boolean;
    autoStartComponents?: boolean;
    pattern?: string;
    description?: string;
    id?: string;
    allowOptimisedComponents?: boolean;
    parameters?: any = {};
    uri: string = ''
    public constructor(init?: Partial<ToDynamicDefinition>) {
        super('ToDynamicDefinition')
        Object.assign(this, init)
    }
}

export class TransactedDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    ref?: string;
    stepName?: string = 'transacted';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<TransactedDefinition>) {
        super('TransactedDefinition')
        Object.assign(this, init)
    }
}

export class TransformDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'transform';
    description?: string;
    id?: string
    public constructor(init?: Partial<TransformDefinition>) {
        super('TransformDefinition')
        Object.assign(this, init)
    }
}

export class TryDefinition extends CamelElement {
    doFinally?: FinallyDefinition;
    inheritErrorHandler?: boolean;
    stepName?: string = 'doTry';
    doCatch?: CatchDefinition[] = [];
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<TryDefinition>) {
        super('TryDefinition')
        Object.assign(this, init)
    }
}

export class UnmarshalDefinition extends CamelElement {
    univocityCsv?: UniVocityCsvDataFormat;
    protobuf?: ProtobufDataFormat | string;
    tarFile?: TarFileDataFormat;
    tidyMarkup?: TidyMarkupDataFormat;
    csv?: CsvDataFormat | string;
    base64?: Base64DataFormat;
    zipDeflater?: ZipDeflaterDataFormat;
    description?: string;
    bindy?: BindyDataFormat;
    syslog?: SyslogDataFormat;
    zipFile?: ZipFileDataFormat;
    jaxb?: JaxbDataFormat;
    rss?: RssDataFormat;
    stepName?: string = 'unmarshal';
    mimeMultipart?: MimeMultipartDataFormat;
    asn1?: ASN1DataFormat | string;
    pgp?: PGPDataFormat;
    thrift?: ThriftDataFormat | string;
    json?: JsonDataFormat;
    lzf?: LZFDataFormat;
    id?: string;
    fhirXml?: FhirXmlDataFormat;
    barcode?: BarcodeDataFormat;
    avro?: AvroDataFormat | string;
    yaml?: YAMLDataFormat;
    beanio?: BeanioDataFormat;
    fhirJson?: FhirJsonDataFormat;
    any23?: Any23DataFormat | string;
    custom?: CustomDataFormat | string;
    flatpack?: FlatpackDataFormat;
    cbor?: CBORDataFormat;
    crypto?: CryptoDataFormat;
    univocityTsv?: UniVocityTsvDataFormat;
    hl7?: HL7DataFormat;
    inheritErrorHandler?: boolean;
    jsonApi?: JsonApiDataFormat;
    xmlSecurity?: XMLSecurityDataFormat;
    ical?: IcalDataFormat;
    univocityFixed?: UniVocityFixedDataFormat;
    jacksonXml?: JacksonXMLDataFormat;
    grok?: GrokDataFormat;
    xstream?: XStreamDataFormat | string;
    gzipDeflater?: GzipDeflaterDataFormat;
    soap?: SoapDataFormat | string
    public constructor(init?: Partial<UnmarshalDefinition>) {
        super('UnmarshalDefinition')
        Object.assign(this, init)
    }
}

export class ValidateDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'validate';
    description?: string;
    id?: string;
    predicateExceptionFactory?: string
    public constructor(init?: Partial<ValidateDefinition>) {
        super('ValidateDefinition')
        Object.assign(this, init)
    }
}

export class WhenDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'when';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<WhenDefinition>) {
        super('WhenDefinition')
        Object.assign(this, init)
    }
}

export class WhenSkipSendToEndpointDefinition extends CamelElement {
    inheritErrorHandler?: boolean;
    expression?: ExpressionDefinition;
    stepName?: string = 'whenSkipSendToEndpoint';
    description?: string;
    id?: string;
    steps?: CamelElement[] = []
    public constructor(init?: Partial<WhenSkipSendToEndpointDefinition>) {
        super('WhenSkipSendToEndpointDefinition')
        Object.assign(this, init)
    }
}

export class WireTapDefinition extends CamelElement {
    executorServiceRef?: string;
    cacheSize?: number;
    pattern?: string;
    description?: string;
    allowOptimisedComponents?: boolean;
    body?: ExpressionSubElementDefinition;
    uri: string = '';
    setHeader?: SetHeaderDefinition[] = [];
    onPrepareRef?: string;
    dynamicUri?: boolean;
    processorRef?: string;
    inheritErrorHandler?: boolean;
    stepName?: string = 'wireTap';
    ignoreInvalidEndpoint?: boolean;
    autoStartComponents?: boolean;
    copy?: boolean;
    id?: string;
    parameters?: any = {}
    public constructor(init?: Partial<WireTapDefinition>) {
        super('WireTapDefinition')
        Object.assign(this, init)
    }
}

export class BlacklistServiceCallServiceFilterConfiguration extends CamelElement {
    servers?: string[] = [];
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<BlacklistServiceCallServiceFilterConfiguration>) {
        super('BlacklistServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class CachingServiceCallServiceDiscoveryConfiguration extends CamelElement {
    dnsServiceDiscovery?: DnsServiceCallServiceDiscoveryConfiguration;
    kubernetesServiceDiscovery?: KubernetesServiceCallServiceDiscoveryConfiguration;
    consulServiceDiscovery?: ConsulServiceCallServiceDiscoveryConfiguration;
    id?: string;
    units?: string;
    etcdServiceDiscovery?: EtcdServiceCallServiceDiscoveryConfiguration;
    staticServiceDiscovery?: StaticServiceCallServiceDiscoveryConfiguration;
    combinedServiceDiscovery?: CombinedServiceCallServiceDiscoveryConfiguration;
    properties?: PropertyDefinition[] = [];
    timeout?: number
    public constructor(init?: Partial<CachingServiceCallServiceDiscoveryConfiguration>) {
        super('CachingServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class CombinedServiceCallServiceDiscoveryConfiguration extends CamelElement {
    cachingServiceDiscovery?: CachingServiceCallServiceDiscoveryConfiguration;
    dnsServiceDiscovery?: DnsServiceCallServiceDiscoveryConfiguration;
    kubernetesServiceDiscovery?: KubernetesServiceCallServiceDiscoveryConfiguration;
    consulServiceDiscovery?: ConsulServiceCallServiceDiscoveryConfiguration;
    id?: string;
    etcdServiceDiscovery?: EtcdServiceCallServiceDiscoveryConfiguration;
    staticServiceDiscovery?: StaticServiceCallServiceDiscoveryConfiguration;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<CombinedServiceCallServiceDiscoveryConfiguration>) {
        super('CombinedServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class CombinedServiceCallServiceFilterConfiguration extends CamelElement {
    blacklistServiceFilter?: BlacklistServiceCallServiceFilterConfiguration;
    passThroughServiceFilter?: PassThroughServiceCallServiceFilterConfiguration;
    healthyServiceFilter?: HealthyServiceCallServiceFilterConfiguration;
    customServiceFilter?: CustomServiceCallServiceFilterConfiguration;
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<CombinedServiceCallServiceFilterConfiguration>) {
        super('CombinedServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class ConsulServiceCallServiceDiscoveryConfiguration extends CamelElement {
    password?: string;
    aclToken?: string;
    readTimeoutMillis?: number;
    connectTimeoutMillis?: number;
    datacenter?: string;
    writeTimeoutMillis?: number;
    id?: string;
    userName?: string;
    blockSeconds?: number;
    properties?: PropertyDefinition[] = [];
    url?: string
    public constructor(init?: Partial<ConsulServiceCallServiceDiscoveryConfiguration>) {
        super('ConsulServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class CustomServiceCallServiceFilterConfiguration extends CamelElement {
    ref?: string;
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<CustomServiceCallServiceFilterConfiguration>) {
        super('CustomServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class DefaultServiceCallServiceLoadBalancerConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<DefaultServiceCallServiceLoadBalancerConfiguration>) {
        super('DefaultServiceCallServiceLoadBalancerConfiguration')
        Object.assign(this, init)
    }
}

export class DnsServiceCallServiceDiscoveryConfiguration extends CamelElement {
    domain?: string;
    proto?: string;
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<DnsServiceCallServiceDiscoveryConfiguration>) {
        super('DnsServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class EtcdServiceCallServiceDiscoveryConfiguration extends CamelElement {
    uris?: string;
    password?: string;
    servicePath?: string;
    id?: string;
    type?: string;
    userName?: string;
    properties?: PropertyDefinition[] = [];
    timeout?: number
    public constructor(init?: Partial<EtcdServiceCallServiceDiscoveryConfiguration>) {
        super('EtcdServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class HealthyServiceCallServiceFilterConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<HealthyServiceCallServiceFilterConfiguration>) {
        super('HealthyServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class KubernetesServiceCallServiceDiscoveryConfiguration extends CamelElement {
    lookup?: string;
    portProtocol?: string;
    caCertData?: string;
    portName?: string;
    oauthToken?: string;
    clientKeyAlgo?: string;
    clientCertFile?: string;
    dnsDomain?: string;
    password?: string;
    apiVersion?: string;
    clientKeyData?: string;
    masterUrl?: string;
    namespace?: string;
    clientCertData?: string;
    caCertFile?: string;
    clientKeyFile?: string;
    id?: string;
    clientKeyPassphrase?: string;
    properties?: PropertyDefinition[] = [];
    trustCerts?: boolean;
    username?: string
    public constructor(init?: Partial<KubernetesServiceCallServiceDiscoveryConfiguration>) {
        super('KubernetesServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class PassThroughServiceCallServiceFilterConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<PassThroughServiceCallServiceFilterConfiguration>) {
        super('PassThroughServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class RibbonServiceCallServiceLoadBalancerConfiguration extends CamelElement {
    password?: string;
    clientName?: string;
    namespace?: string;
    id?: string;
    properties?: PropertyDefinition[] = [];
    username?: string
    public constructor(init?: Partial<RibbonServiceCallServiceLoadBalancerConfiguration>) {
        super('RibbonServiceCallServiceLoadBalancerConfiguration')
        Object.assign(this, init)
    }
}

export class ServiceCallConfigurationDefinition extends CamelElement {
    pattern?: string;
    blacklistServiceFilter?: BlacklistServiceCallServiceFilterConfiguration;
    expressionRef?: string;
    passThroughServiceFilter?: PassThroughServiceCallServiceFilterConfiguration;
    dnsServiceDiscovery?: DnsServiceCallServiceDiscoveryConfiguration;
    healthyServiceFilter?: HealthyServiceCallServiceFilterConfiguration;
    ribbonLoadBalancer?: RibbonServiceCallServiceLoadBalancerConfiguration;
    serviceChooserRef?: string;
    consulServiceDiscovery?: ConsulServiceCallServiceDiscoveryConfiguration;
    id?: string;
    defaultLoadBalancer?: DefaultServiceCallServiceLoadBalancerConfiguration;
    serviceDiscoveryRef?: string;
    expression?: ServiceCallExpressionConfiguration;
    kubernetesServiceDiscovery?: KubernetesServiceCallServiceDiscoveryConfiguration;
    customServiceFilter?: CustomServiceCallServiceFilterConfiguration;
    zookeeperServiceDiscovery?: ZooKeeperServiceCallServiceDiscoveryConfiguration;
    uri?: string;
    component?: string;
    cachingServiceDiscovery?: CachingServiceCallServiceDiscoveryConfiguration;
    loadBalancerRef?: string;
    serviceFilterRef?: string;
    combinedServiceFilter?: CombinedServiceCallServiceFilterConfiguration;
    etcdServiceDiscovery?: EtcdServiceCallServiceDiscoveryConfiguration;
    staticServiceDiscovery?: StaticServiceCallServiceDiscoveryConfiguration;
    combinedServiceDiscovery?: CombinedServiceCallServiceDiscoveryConfiguration
    public constructor(init?: Partial<ServiceCallConfigurationDefinition>) {
        super('ServiceCallConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class ServiceCallDefinition extends CamelElement {
    pattern?: string;
    description?: string;
    blacklistServiceFilter?: BlacklistServiceCallServiceFilterConfiguration;
    expressionRef?: string;
    passThroughServiceFilter?: PassThroughServiceCallServiceFilterConfiguration;
    dnsServiceDiscovery?: DnsServiceCallServiceDiscoveryConfiguration;
    healthyServiceFilter?: HealthyServiceCallServiceFilterConfiguration;
    stepName?: string = 'serviceCall';
    ribbonLoadBalancer?: RibbonServiceCallServiceLoadBalancerConfiguration;
    serviceChooserRef?: string;
    consulServiceDiscovery?: ConsulServiceCallServiceDiscoveryConfiguration;
    id?: string;
    defaultLoadBalancer?: DefaultServiceCallServiceLoadBalancerConfiguration;
    serviceDiscoveryRef?: string;
    expression?: ServiceCallExpressionConfiguration;
    configurationRef?: string;
    kubernetesServiceDiscovery?: KubernetesServiceCallServiceDiscoveryConfiguration;
    customServiceFilter?: CustomServiceCallServiceFilterConfiguration;
    zookeeperServiceDiscovery?: ZooKeeperServiceCallServiceDiscoveryConfiguration;
    uri?: string;
    component?: string;
    inheritErrorHandler?: boolean;
    cachingServiceDiscovery?: CachingServiceCallServiceDiscoveryConfiguration;
    loadBalancerRef?: string;
    serviceFilterRef?: string;
    combinedServiceFilter?: CombinedServiceCallServiceFilterConfiguration;
    name: string = '';
    etcdServiceDiscovery?: EtcdServiceCallServiceDiscoveryConfiguration;
    staticServiceDiscovery?: StaticServiceCallServiceDiscoveryConfiguration;
    combinedServiceDiscovery?: CombinedServiceCallServiceDiscoveryConfiguration
    public constructor(init?: Partial<ServiceCallDefinition>) {
        super('ServiceCallDefinition')
        Object.assign(this, init)
    }
}

export class ServiceCallExpressionConfiguration extends CamelElement {
    hostHeader?: string;
    expressionType?: ExpressionDefinition;
    id?: string;
    portHeader?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ServiceCallExpressionConfiguration>) {
        super('ServiceCallExpressionConfiguration')
        Object.assign(this, init)
    }
}

export class ServiceCallServiceChooserConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ServiceCallServiceChooserConfiguration>) {
        super('ServiceCallServiceChooserConfiguration')
        Object.assign(this, init)
    }
}

export class ServiceCallServiceDiscoveryConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ServiceCallServiceDiscoveryConfiguration>) {
        super('ServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class ServiceCallServiceFilterConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ServiceCallServiceFilterConfiguration>) {
        super('ServiceCallServiceFilterConfiguration')
        Object.assign(this, init)
    }
}

export class ServiceCallServiceLoadBalancerConfiguration extends CamelElement {
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ServiceCallServiceLoadBalancerConfiguration>) {
        super('ServiceCallServiceLoadBalancerConfiguration')
        Object.assign(this, init)
    }
}

export class StaticServiceCallServiceDiscoveryConfiguration extends CamelElement {
    servers?: string[] = [];
    id?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<StaticServiceCallServiceDiscoveryConfiguration>) {
        super('StaticServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class ZooKeeperServiceCallServiceDiscoveryConfiguration extends CamelElement {
    nodes: string = '';
    reconnectMaxRetries?: string;
    basePath: string = '';
    reconnectBaseSleepTime?: string;
    namespace?: string;
    reconnectMaxSleepTime?: string;
    sessionTimeout?: string;
    id?: string;
    connectionTimeout?: string;
    properties?: PropertyDefinition[] = []
    public constructor(init?: Partial<ZooKeeperServiceCallServiceDiscoveryConfiguration>) {
        super('ZooKeeperServiceCallServiceDiscoveryConfiguration')
        Object.assign(this, init)
    }
}

export class BatchResequencerConfig extends CamelElement {
    batchSize?: number;
    reverse?: boolean;
    allowDuplicates?: boolean;
    batchTimeout?: string;
    ignoreInvalidExchanges?: boolean
    public constructor(init?: Partial<BatchResequencerConfig>) {
        super('BatchResequencerConfig')
        Object.assign(this, init)
    }
}

export class StreamResequencerConfig extends CamelElement {
    comparatorRef?: string;
    timeout?: string;
    capacity?: number;
    deliveryAttemptInterval?: string;
    ignoreInvalidExchanges?: boolean;
    rejectOld?: boolean
    public constructor(init?: Partial<StreamResequencerConfig>) {
        super('StreamResequencerConfig')
        Object.assign(this, init)
    }
}

export class ASN1DataFormat extends CamelElement {
    dataFormatName?: string = 'asn1';
    usingIterator?: boolean;
    id?: string;
    unmarshalType?: string
    public constructor(init?: Partial<ASN1DataFormat>) {
        super('ASN1DataFormat')
        Object.assign(this, init)
    }
}

export class Any23DataFormat extends CamelElement {
    extractors?: string[] = [];
    configuration?: PropertyDefinition[] = [];
    dataFormatName?: string = 'any23';
    baseUri?: string;
    id?: string;
    outputFormat?: string
    public constructor(init?: Partial<Any23DataFormat>) {
        super('Any23DataFormat')
        Object.assign(this, init)
    }
}

export class AvroDataFormat extends CamelElement {
    allowUnmarshallType?: boolean;
    include?: string;
    contentTypeHeader?: boolean;
    jsonView?: string;
    dataFormatName?: string = 'avro';
    autoDiscoverSchemaResolver?: boolean;
    timezone?: string;
    instanceClassName?: string;
    moduleClassNames?: string;
    allowJmsType?: boolean;
    enableFeatures?: string;
    unmarshalType?: string;
    useList?: boolean;
    disableFeatures?: string;
    moduleRefs?: string;
    schemaResolver?: string;
    collectionType?: string;
    useDefaultObjectMapper?: boolean;
    library?: string;
    objectMapper?: string;
    autoDiscoverObjectMapper?: boolean;
    id?: string
    public constructor(init?: Partial<AvroDataFormat>) {
        super('AvroDataFormat')
        Object.assign(this, init)
    }
}

export class BarcodeDataFormat extends CamelElement {
    barcodeFormat?: string;
    dataFormatName?: string = 'barcode';
    width?: number;
    id?: string;
    imageType?: string;
    height?: number
    public constructor(init?: Partial<BarcodeDataFormat>) {
        super('BarcodeDataFormat')
        Object.assign(this, init)
    }
}

export class Base64DataFormat extends CamelElement {
    dataFormatName?: string = 'base64';
    urlSafe?: boolean;
    id?: string;
    lineSeparator?: string;
    lineLength?: number
    public constructor(init?: Partial<Base64DataFormat>) {
        super('Base64DataFormat')
        Object.assign(this, init)
    }
}

export class BeanioDataFormat extends CamelElement {
    mapping: string = '';
    ignoreUnexpectedRecords?: boolean;
    ignoreUnidentifiedRecords?: boolean;
    beanReaderErrorHandlerType?: string;
    dataFormatName?: string = 'beanio';
    unmarshalSingleObject?: boolean;
    id?: string;
    encoding?: string;
    streamName: string = '';
    ignoreInvalidRecords?: boolean
    public constructor(init?: Partial<BeanioDataFormat>) {
        super('BeanioDataFormat')
        Object.assign(this, init)
    }
}

export class BindyDataFormat extends CamelElement {
    unwrapSingleInstance?: boolean;
    dataFormatName?: string = 'bindy';
    id?: string;
    locale?: string;
    type: string = '';
    allowEmptyStream?: boolean;
    classType?: string
    public constructor(init?: Partial<BindyDataFormat>) {
        super('BindyDataFormat')
        Object.assign(this, init)
    }
}

export class CBORDataFormat extends CamelElement {
    allowUnmarshallType?: boolean;
    collectionType?: string;
    useDefaultObjectMapper?: boolean;
    objectMapper?: string;
    prettyPrint?: boolean;
    dataFormatName?: string = 'cbor';
    allowJmsType?: boolean;
    id?: string;
    enableFeatures?: string;
    unmarshalType?: string;
    useList?: boolean;
    disableFeatures?: string
    public constructor(init?: Partial<CBORDataFormat>) {
        super('CBORDataFormat')
        Object.assign(this, init)
    }
}

export class CryptoDataFormat extends CamelElement {
    shouldAppendHmac?: boolean;
    inline?: boolean;
    macAlgorithm?: string;
    algorithmParameterRef?: string;
    dataFormatName?: string = 'crypto';
    cryptoProvider?: string;
    initVectorRef?: string;
    keyRef?: string;
    id?: string;
    buffersize?: number;
    algorithm?: string
    public constructor(init?: Partial<CryptoDataFormat>) {
        super('CryptoDataFormat')
        Object.assign(this, init)
    }
}

export class CsvDataFormat extends CamelElement {
    escapeDisabled?: boolean;
    ignoreEmptyLines?: boolean;
    recordConverterRef?: string;
    trailingDelimiter?: boolean;
    headerDisabled?: boolean;
    lazyLoad?: boolean;
    commentMarkerDisabled?: boolean;
    skipHeaderRecord?: boolean;
    quote?: string;
    trim?: boolean;
    useMaps?: boolean;
    delimiter?: string;
    nullString?: string;
    allowMissingColumnNames?: boolean;
    id?: string;
    escape?: string;
    nullStringDisabled?: boolean;
    commentMarker?: string;
    dataFormatName?: string = 'csv';
    formatRef?: string;
    quoteMode?: string;
    formatName?: string;
    ignoreSurroundingSpaces?: boolean;
    quoteDisabled?: boolean;
    useOrderedMaps?: boolean;
    header?: string[] = [];
    ignoreHeaderCase?: boolean;
    recordSeparatorDisabled?: string;
    captureHeaderRecord?: boolean;
    marshallerFactoryRef?: string;
    recordSeparator?: string
    public constructor(init?: Partial<CsvDataFormat>) {
        super('CsvDataFormat')
        Object.assign(this, init)
    }
}

export class CustomDataFormat extends CamelElement {
    ref: string = '';
    dataFormatName?: string = 'custom';
    id?: string
    public constructor(init?: Partial<CustomDataFormat>) {
        super('CustomDataFormat')
        Object.assign(this, init)
    }
}

export class DataFormatsDefinition extends CamelElement {
    univocityCsv?: UniVocityCsvDataFormat;
    protobuf?: ProtobufDataFormat | string;
    tarFile?: TarFileDataFormat;
    tidyMarkup?: TidyMarkupDataFormat;
    csv?: CsvDataFormat | string;
    base64?: Base64DataFormat;
    zipDeflater?: ZipDeflaterDataFormat;
    bindy?: BindyDataFormat;
    syslog?: SyslogDataFormat;
    zipFile?: ZipFileDataFormat;
    jaxb?: JaxbDataFormat;
    rss?: RssDataFormat;
    mimeMultipart?: MimeMultipartDataFormat;
    asn1?: ASN1DataFormat | string;
    pgp?: PGPDataFormat;
    thrift?: ThriftDataFormat | string;
    json?: JsonDataFormat;
    lzf?: LZFDataFormat;
    fhirXml?: FhirXmlDataFormat;
    barcode?: BarcodeDataFormat;
    avro?: AvroDataFormat | string;
    yaml?: YAMLDataFormat;
    beanio?: BeanioDataFormat;
    fhirJson?: FhirJsonDataFormat;
    any23?: Any23DataFormat | string;
    custom?: CustomDataFormat | string;
    flatpack?: FlatpackDataFormat;
    cbor?: CBORDataFormat;
    crypto?: CryptoDataFormat;
    univocityTsv?: UniVocityTsvDataFormat;
    hl7?: HL7DataFormat;
    jsonApi?: JsonApiDataFormat;
    xmlSecurity?: XMLSecurityDataFormat;
    ical?: IcalDataFormat;
    univocityFixed?: UniVocityFixedDataFormat;
    jacksonXml?: JacksonXMLDataFormat;
    grok?: GrokDataFormat;
    xstream?: XStreamDataFormat | string;
    gzipDeflater?: GzipDeflaterDataFormat;
    soap?: SoapDataFormat | string
    public constructor(init?: Partial<DataFormatsDefinition>) {
        super('DataFormatsDefinition')
        Object.assign(this, init)
    }
}

export class FhirJsonDataFormat extends CamelElement {
    contentTypeHeader?: boolean;
    dontStripVersionsFromReferencesAtPaths?: string[] = [];
    prettyPrint?: boolean;
    dataFormatName?: string = 'fhirJson';
    dontEncodeElements?: string[] = [];
    summaryMode?: boolean;
    encodeElementsAppliesToChildResourcesOnly?: boolean;
    serverBaseUrl?: string;
    fhirVersion?: string;
    suppressNarratives?: boolean;
    encodeElements?: string[] = [];
    stripVersionsFromReferences?: boolean;
    id?: string;
    omitResourceId?: boolean;
    overrideResourceIdWithBundleEntryFullUrl?: boolean
    public constructor(init?: Partial<FhirJsonDataFormat>) {
        super('FhirJsonDataFormat')
        Object.assign(this, init)
    }
}

export class FhirXmlDataFormat extends CamelElement {
    contentTypeHeader?: boolean;
    dontStripVersionsFromReferencesAtPaths?: string[] = [];
    prettyPrint?: boolean;
    dataFormatName?: string = 'fhirXml';
    dontEncodeElements?: string[] = [];
    summaryMode?: boolean;
    encodeElementsAppliesToChildResourcesOnly?: boolean;
    serverBaseUrl?: string;
    fhirVersion?: string;
    suppressNarratives?: boolean;
    encodeElements?: string[] = [];
    stripVersionsFromReferences?: boolean;
    id?: string;
    omitResourceId?: boolean;
    overrideResourceIdWithBundleEntryFullUrl?: boolean
    public constructor(init?: Partial<FhirXmlDataFormat>) {
        super('FhirXmlDataFormat')
        Object.assign(this, init)
    }
}

export class FlatpackDataFormat extends CamelElement {
    allowShortLines?: boolean;
    dataFormatName?: string = 'flatpack';
    delimiter?: string;
    definition?: string;
    fixed?: boolean;
    id?: string;
    ignoreFirstRecord?: boolean;
    parserFactoryRef?: string;
    textQualifier?: string;
    ignoreExtraColumns?: boolean
    public constructor(init?: Partial<FlatpackDataFormat>) {
        super('FlatpackDataFormat')
        Object.assign(this, init)
    }
}

export class GrokDataFormat extends CamelElement {
    flattened?: boolean;
    namedOnly?: boolean;
    dataFormatName?: string = 'grok';
    pattern: string = '';
    allowMultipleMatchesPerLine?: boolean;
    id?: string
    public constructor(init?: Partial<GrokDataFormat>) {
        super('GrokDataFormat')
        Object.assign(this, init)
    }
}

export class GzipDeflaterDataFormat extends CamelElement {
    dataFormatName?: string = 'gzipDeflater';
    id?: string
    public constructor(init?: Partial<GzipDeflaterDataFormat>) {
        super('GzipDeflaterDataFormat')
        Object.assign(this, init)
    }
}

export class HL7DataFormat extends CamelElement {
    dataFormatName?: string = 'hl7';
    id?: string;
    validate?: boolean
    public constructor(init?: Partial<HL7DataFormat>) {
        super('HL7DataFormat')
        Object.assign(this, init)
    }
}

export class IcalDataFormat extends CamelElement {
    validating?: boolean;
    dataFormatName?: string = 'ical';
    id?: string
    public constructor(init?: Partial<IcalDataFormat>) {
        super('IcalDataFormat')
        Object.assign(this, init)
    }
}

export class JacksonXMLDataFormat extends CamelElement {
    allowUnmarshallType?: boolean;
    include?: string;
    contentTypeHeader?: boolean;
    prettyPrint?: boolean;
    jsonView?: string;
    dataFormatName?: string = 'jacksonXml';
    moduleClassNames?: string;
    allowJmsType?: boolean;
    enableFeatures?: string;
    unmarshalType?: string;
    useList?: boolean;
    disableFeatures?: string;
    moduleRefs?: string;
    collectionType?: string;
    id?: string;
    enableJaxbAnnotationModule?: boolean;
    xmlMapper?: string
    public constructor(init?: Partial<JacksonXMLDataFormat>) {
        super('JacksonXMLDataFormat')
        Object.assign(this, init)
    }
}

export class JaxbDataFormat extends CamelElement {
    schema?: string;
    contentTypeHeader?: boolean;
    prettyPrint?: boolean;
    dataFormatName?: string = 'jaxb';
    contextPathIsClassName?: boolean;
    schemaLocation?: string;
    contextPath: string = '';
    schemaSeverityLevel?: number;
    xmlStreamWriterWrapper?: string;
    noNamespaceSchemaLocation?: string;
    encoding?: string;
    mustBeJaxbElement?: boolean;
    filterNonXmlChars?: boolean;
    fragment?: boolean;
    objectFactory?: boolean;
    namespacePrefixRef?: string;
    partClass?: string;
    ignoreJaxbElement?: boolean;
    id?: string;
    jaxbProviderProperties?: string;
    partNamespace?: string
    public constructor(init?: Partial<JaxbDataFormat>) {
        super('JaxbDataFormat')
        Object.assign(this, init)
    }
}

export class JsonApiDataFormat extends CamelElement {
    dataFormatName?: string = 'jsonApi';
    id?: string;
    mainFormatType?: string
    public constructor(init?: Partial<JsonApiDataFormat>) {
        super('JsonApiDataFormat')
        Object.assign(this, init)
    }
}

export class JsonDataFormat extends CamelElement {
    contentTypeHeader?: boolean;
    timezone?: string;
    moduleClassNames?: string;
    allowJmsType?: boolean;
    enableFeatures?: string;
    unmarshalType?: string;
    library?: string;
    permissions?: string;
    autoDiscoverObjectMapper?: boolean;
    id?: string;
    allowUnmarshallType?: boolean;
    include?: string;
    prettyPrint?: boolean;
    jsonView?: string;
    dataFormatName?: string = 'json';
    autoDiscoverSchemaResolver?: boolean;
    useList?: boolean;
    disableFeatures?: string;
    moduleRefs?: string;
    schemaResolver?: string;
    collectionType?: string;
    useDefaultObjectMapper?: boolean;
    objectMapper?: string;
    dropRootNode?: boolean;
    namingStrategy?: string
    public constructor(init?: Partial<JsonDataFormat>) {
        super('JsonDataFormat')
        Object.assign(this, init)
    }
}

export class LZFDataFormat extends CamelElement {
    dataFormatName?: string = 'lzf';
    id?: string;
    usingParallelCompression?: boolean
    public constructor(init?: Partial<LZFDataFormat>) {
        super('LZFDataFormat')
        Object.assign(this, init)
    }
}

export class MimeMultipartDataFormat extends CamelElement {
    headersInline?: boolean;
    multipartSubType?: string;
    multipartWithoutAttachment?: boolean;
    dataFormatName?: string = 'mimeMultipart';
    id?: string;
    includeHeaders?: string;
    binaryContent?: boolean
    public constructor(init?: Partial<MimeMultipartDataFormat>) {
        super('MimeMultipartDataFormat')
        Object.assign(this, init)
    }
}

export class PGPDataFormat extends CamelElement {
    dataFormatName?: string = 'pgp';
    armored?: boolean;
    signaturePassword?: string;
    signatureKeyRing?: string;
    keyFileName?: string;
    signatureVerificationOption?: string;
    signatureKeyUserid?: string;
    integrity?: boolean;
    password?: string;
    provider?: string;
    compressionAlgorithm?: number;
    keyUserid?: string;
    signatureKeyFileName?: string;
    id?: string;
    hashAlgorithm?: number;
    algorithm?: number
    public constructor(init?: Partial<PGPDataFormat>) {
        super('PGPDataFormat')
        Object.assign(this, init)
    }
}

export class ProtobufDataFormat extends CamelElement {
    allowUnmarshallType?: boolean;
    include?: string;
    contentTypeHeader?: boolean;
    contentTypeFormat?: string;
    jsonView?: string;
    dataFormatName?: string = 'protobuf';
    autoDiscoverSchemaResolver?: boolean;
    timezone?: string;
    moduleClassNames?: string;
    allowJmsType?: boolean;
    instanceClass?: string;
    enableFeatures?: string;
    unmarshalType?: string;
    useList?: boolean;
    disableFeatures?: string;
    moduleRefs?: string;
    schemaResolver?: string;
    collectionType?: string;
    useDefaultObjectMapper?: boolean;
    library?: string;
    objectMapper?: string;
    autoDiscoverObjectMapper?: boolean;
    id?: string
    public constructor(init?: Partial<ProtobufDataFormat>) {
        super('ProtobufDataFormat')
        Object.assign(this, init)
    }
}

export class RssDataFormat extends CamelElement {
    dataFormatName?: string = 'rss';
    id?: string
    public constructor(init?: Partial<RssDataFormat>) {
        super('RssDataFormat')
        Object.assign(this, init)
    }
}

export class SoapDataFormat extends CamelElement {
    schema?: string;
    namespacePrefixRef?: string;
    dataFormatName?: string = 'soap';
    elementNameStrategyRef?: string;
    contextPath: string = '';
    id?: string;
    encoding?: string;
    version?: string
    public constructor(init?: Partial<SoapDataFormat>) {
        super('SoapDataFormat')
        Object.assign(this, init)
    }
}

export class SyslogDataFormat extends CamelElement {
    dataFormatName?: string = 'syslog';
    id?: string
    public constructor(init?: Partial<SyslogDataFormat>) {
        super('SyslogDataFormat')
        Object.assign(this, init)
    }
}

export class TarFileDataFormat extends CamelElement {
    maxDecompressedSize?: number;
    dataFormatName?: string = 'tarFile';
    usingIterator?: boolean;
    id?: string;
    preservePathElements?: boolean;
    allowEmptyDirectory?: boolean
    public constructor(init?: Partial<TarFileDataFormat>) {
        super('TarFileDataFormat')
        Object.assign(this, init)
    }
}

export class ThriftDataFormat extends CamelElement {
    contentTypeHeader?: boolean;
    contentTypeFormat?: string;
    dataFormatName?: string = 'thrift';
    instanceClass?: string;
    id?: string
    public constructor(init?: Partial<ThriftDataFormat>) {
        super('ThriftDataFormat')
        Object.assign(this, init)
    }
}

export class TidyMarkupDataFormat extends CamelElement {
    omitXmlDeclaration?: boolean;
    dataObjectType?: string;
    dataFormatName?: string = 'tidyMarkup';
    id?: string
    public constructor(init?: Partial<TidyMarkupDataFormat>) {
        super('TidyMarkupDataFormat')
        Object.assign(this, init)
    }
}

export class UniVocityCsvDataFormat extends CamelElement {
    headerExtractionEnabled?: boolean;
    skipEmptyLines?: boolean;
    dataFormatName?: string = 'univocityCsv';
    asMap?: boolean;
    ignoreLeadingWhitespaces?: boolean;
    univocityHeader?: UniVocityHeader[] = [];
    ignoreTrailingWhitespaces?: boolean;
    lineSeparator?: string;
    lazyLoad?: boolean;
    nullValue?: string;
    quoteAllFields?: boolean;
    normalizedLineSeparator?: string;
    emptyValue?: string;
    quote?: string;
    quoteEscape?: string;
    delimiter?: string;
    headersDisabled?: boolean;
    comment?: string;
    id?: string;
    numberOfRecordsToRead?: number
    public constructor(init?: Partial<UniVocityCsvDataFormat>) {
        super('UniVocityCsvDataFormat')
        Object.assign(this, init)
    }
}

export class UniVocityFixedDataFormat extends CamelElement {
    headerExtractionEnabled?: boolean;
    padding?: string;
    recordEndsOnNewline?: boolean;
    skipEmptyLines?: boolean;
    dataFormatName?: string = 'univocityFixed';
    asMap?: boolean;
    ignoreLeadingWhitespaces?: boolean;
    univocityHeader?: UniVocityHeader[] = [];
    ignoreTrailingWhitespaces?: boolean;
    lineSeparator?: string;
    lazyLoad?: boolean;
    nullValue?: string;
    normalizedLineSeparator?: string;
    emptyValue?: string;
    headersDisabled?: boolean;
    comment?: string;
    id?: string;
    numberOfRecordsToRead?: number;
    skipTrailingCharsUntilNewline?: boolean
    public constructor(init?: Partial<UniVocityFixedDataFormat>) {
        super('UniVocityFixedDataFormat')
        Object.assign(this, init)
    }
}

export class UniVocityHeader extends CamelElement {
    length?: string;
    name?: string
    public constructor(init?: Partial<UniVocityHeader>) {
        super('UniVocityHeader')
        Object.assign(this, init)
    }
}

export class UniVocityTsvDataFormat extends CamelElement {
    escapeChar?: string;
    headerExtractionEnabled?: boolean;
    skipEmptyLines?: boolean;
    dataFormatName?: string = 'univocityTsv';
    asMap?: boolean;
    ignoreLeadingWhitespaces?: boolean;
    univocityHeader?: UniVocityHeader[] = [];
    ignoreTrailingWhitespaces?: boolean;
    lineSeparator?: string;
    lazyLoad?: boolean;
    nullValue?: string;
    normalizedLineSeparator?: string;
    emptyValue?: string;
    headersDisabled?: boolean;
    comment?: string;
    id?: string;
    numberOfRecordsToRead?: number
    public constructor(init?: Partial<UniVocityTsvDataFormat>) {
        super('UniVocityTsvDataFormat')
        Object.assign(this, init)
    }
}

export class XMLSecurityDataFormat extends CamelElement {
    addKeyValueForEncryptedKey?: boolean;
    keyCipherAlgorithm?: string;
    dataFormatName?: string = 'xmlSecurity';
    recipientKeyAlias?: string;
    keyOrTrustStoreParametersRef?: string;
    digestAlgorithm?: string;
    mgfAlgorithm?: string;
    secureTagContents?: boolean;
    passPhraseByte?: string;
    keyPassword?: string;
    secureTag?: string;
    id?: string;
    xmlCipherAlgorithm?: string;
    passPhrase?: string
    public constructor(init?: Partial<XMLSecurityDataFormat>) {
        super('XMLSecurityDataFormat')
        Object.assign(this, init)
    }
}

export class XStreamDataFormat extends CamelElement {
    mode?: string;
    omitFields?: PropertyDefinition[] = [];
    aliases?: PropertyDefinition[] = [];
    contentTypeHeader?: boolean;
    driver?: string;
    driverRef?: string;
    implicitCollections?: PropertyDefinition[] = [];
    dataFormatName?: string = 'xstream';
    permissions?: string;
    converters?: PropertyDefinition[] = [];
    id?: string;
    encoding?: string
    public constructor(init?: Partial<XStreamDataFormat>) {
        super('XStreamDataFormat')
        Object.assign(this, init)
    }
}

export class YAMLDataFormat extends CamelElement {
    resolver?: string;
    _constructor?: string;
    prettyFlow?: boolean;
    dataFormatName?: string = 'yaml';
    allowAnyType?: boolean;
    representer?: string;
    unmarshalType?: string;
    library?: string;
    typeFilter?: YAMLTypeFilterDefinition[] = [];
    maxAliasesForCollections?: number;
    dumperOptions?: string;
    id?: string;
    useApplicationContextClassLoader?: boolean;
    allowRecursiveKeys?: boolean
    public constructor(init?: Partial<YAMLDataFormat>) {
        super('YAMLDataFormat')
        Object.assign(this, init)
    }
}

export class YAMLTypeFilterDefinition extends CamelElement {
    type?: string;
    value?: string
    public constructor(init?: Partial<YAMLTypeFilterDefinition>) {
        super('YAMLTypeFilterDefinition')
        Object.assign(this, init)
    }
}

export class ZipDeflaterDataFormat extends CamelElement {
    dataFormatName?: string = 'zipDeflater';
    id?: string;
    compressionLevel?: number
    public constructor(init?: Partial<ZipDeflaterDataFormat>) {
        super('ZipDeflaterDataFormat')
        Object.assign(this, init)
    }
}

export class ZipFileDataFormat extends CamelElement {
    maxDecompressedSize?: number;
    dataFormatName?: string = 'zipFile';
    usingIterator?: boolean;
    id?: string;
    preservePathElements?: boolean;
    allowEmptyDirectory?: boolean
    public constructor(init?: Partial<ZipFileDataFormat>) {
        super('ZipFileDataFormat')
        Object.assign(this, init)
    }
}

export class CSimpleExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'csimple';
    id?: string;
    resultType?: string
    public constructor(init?: Partial<CSimpleExpression>) {
        super('CSimpleExpression')
        Object.assign(this, init)
    }
}

export class ConstantExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'constant';
    id?: string;
    resultType?: string
    public constructor(init?: Partial<ConstantExpression>) {
        super('ConstantExpression')
        Object.assign(this, init)
    }
}

export class DatasonnetExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'datasonnet';
    outputMediaType?: string;
    id?: string;
    resultType?: string;
    bodyMediaType?: string
    public constructor(init?: Partial<DatasonnetExpression>) {
        super('DatasonnetExpression')
        Object.assign(this, init)
    }
}

export class ExchangePropertyExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'exchangeProperty';
    id?: string
    public constructor(init?: Partial<ExchangePropertyExpression>) {
        super('ExchangePropertyExpression')
        Object.assign(this, init)
    }
}

export class ExpressionDefinition extends CamelElement {
    ognl?: OgnlExpression | string;
    constant?: ConstantExpression | string;
    mvel?: MvelExpression | string;
    method?: MethodCallExpression | string;
    xquery?: XQueryExpression | string;
    datasonnet?: DatasonnetExpression | string;
    language?: LanguageExpression;
    simple?: SimpleExpression | string;
    hl7terser?: Hl7TerserExpression | string;
    tokenize?: TokenizerExpression | string;
    spel?: SpELExpression | string;
    ref?: RefExpression | string;
    xpath?: XPathExpression | string;
    groovy?: GroovyExpression | string;
    csimple?: CSimpleExpression | string;
    exchangeProperty?: ExchangePropertyExpression | string;
    jsonpath?: JsonPathExpression | string;
    header?: HeaderExpression | string;
    joor?: JoorExpression | string;
    xtokenize?: XMLTokenizerExpression | string
    public constructor(init?: Partial<ExpressionDefinition>) {
        super('ExpressionDefinition')
        Object.assign(this, init)
    }
}

export class GroovyExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'groovy';
    id?: string
    public constructor(init?: Partial<GroovyExpression>) {
        super('GroovyExpression')
        Object.assign(this, init)
    }
}

export class HeaderExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'header';
    id?: string
    public constructor(init?: Partial<HeaderExpression>) {
        super('HeaderExpression')
        Object.assign(this, init)
    }
}

export class Hl7TerserExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'hl7terser';
    id?: string
    public constructor(init?: Partial<Hl7TerserExpression>) {
        super('Hl7TerserExpression')
        Object.assign(this, init)
    }
}

export class JoorExpression extends CamelElement {
    preCompile?: boolean;
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'joor';
    id?: string;
    singleQuotes?: boolean;
    resultType?: string
    public constructor(init?: Partial<JoorExpression>) {
        super('JoorExpression')
        Object.assign(this, init)
    }
}

export class JsonPathExpression extends CamelElement {
    expression: string = '';
    headerName?: string;
    trim?: boolean;
    expressionName?: string = 'jsonpath';
    writeAsString?: boolean;
    id?: string;
    allowSimple?: boolean;
    suppressExceptions?: boolean;
    allowEasyPredicate?: boolean;
    resultType?: string;
    option?: string
    public constructor(init?: Partial<JsonPathExpression>) {
        super('JsonPathExpression')
        Object.assign(this, init)
    }
}

export class LanguageExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'language';
    language: string = '';
    id?: string
    public constructor(init?: Partial<LanguageExpression>) {
        super('LanguageExpression')
        Object.assign(this, init)
    }
}

export class MethodCallExpression extends CamelElement {
    ref?: string;
    expression: string = '';
    method?: string;
    trim?: boolean;
    expressionName?: string = 'method';
    scope?: string;
    id?: string;
    beanType?: string
    public constructor(init?: Partial<MethodCallExpression>) {
        super('MethodCallExpression')
        Object.assign(this, init)
    }
}

export class MvelExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'mvel';
    id?: string
    public constructor(init?: Partial<MvelExpression>) {
        super('MvelExpression')
        Object.assign(this, init)
    }
}

export class OgnlExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'ognl';
    id?: string
    public constructor(init?: Partial<OgnlExpression>) {
        super('OgnlExpression')
        Object.assign(this, init)
    }
}

export class RefExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'ref';
    id?: string
    public constructor(init?: Partial<RefExpression>) {
        super('RefExpression')
        Object.assign(this, init)
    }
}

export class SimpleExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'simple';
    id?: string;
    resultType?: string
    public constructor(init?: Partial<SimpleExpression>) {
        super('SimpleExpression')
        Object.assign(this, init)
    }
}

export class SpELExpression extends CamelElement {
    expression: string = '';
    trim?: boolean;
    expressionName?: string = 'spel';
    id?: string
    public constructor(init?: Partial<SpELExpression>) {
        super('SpELExpression')
        Object.assign(this, init)
    }
}

export class TokenizerExpression extends CamelElement {
    endToken?: string;
    expression: string = '';
    headerName?: string;
    skipFirst?: boolean;
    expressionName?: string = 'tokenize';
    inheritNamespaceTagName?: string;
    groupDelimiter?: string;
    token: string = '';
    regex?: boolean;
    includeTokens?: boolean;
    trim?: boolean;
    xml?: boolean;
    id?: string;
    group?: string
    public constructor(init?: Partial<TokenizerExpression>) {
        super('TokenizerExpression')
        Object.assign(this, init)
    }
}

export class XMLTokenizerExpression extends CamelElement {
    mode?: string;
    expression: string = '';
    headerName?: string;
    trim?: boolean;
    expressionName?: string = 'xtokenize';
    id?: string;
    group?: number
    public constructor(init?: Partial<XMLTokenizerExpression>) {
        super('XMLTokenizerExpression')
        Object.assign(this, init)
    }
}

export class XPathExpression extends CamelElement {
    preCompile?: boolean;
    expression: string = '';
    headerName?: string;
    documentType?: string;
    expressionName?: string = 'xpath';
    factoryRef?: string;
    saxon?: boolean;
    trim?: boolean;
    objectModel?: string;
    logNamespaces?: boolean;
    threadSafety?: boolean;
    id?: string;
    resultType?: string
    public constructor(init?: Partial<XPathExpression>) {
        super('XPathExpression')
        Object.assign(this, init)
    }
}

export class XQueryExpression extends CamelElement {
    expression: string = '';
    headerName?: string;
    configurationRef?: string;
    trim?: boolean;
    expressionName?: string = 'xquery';
    id?: string;
    type?: string
    public constructor(init?: Partial<XQueryExpression>) {
        super('XQueryExpression')
        Object.assign(this, init)
    }
}

export class CustomLoadBalancerDefinition extends CamelElement {
    ref: string = '';
    id?: string
    public constructor(init?: Partial<CustomLoadBalancerDefinition>) {
        super('CustomLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class FailoverLoadBalancerDefinition extends CamelElement {
    exception?: string[] = [];
    sticky?: string;
    id?: string;
    maximumFailoverAttempts?: string;
    roundRobin?: string
    public constructor(init?: Partial<FailoverLoadBalancerDefinition>) {
        super('FailoverLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class RandomLoadBalancerDefinition extends CamelElement {
    id?: string
    public constructor(init?: Partial<RandomLoadBalancerDefinition>) {
        super('RandomLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class RoundRobinLoadBalancerDefinition extends CamelElement {
    id?: string
    public constructor(init?: Partial<RoundRobinLoadBalancerDefinition>) {
        super('RoundRobinLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class StickyLoadBalancerDefinition extends CamelElement {
    correlationExpression?: ExpressionSubElementDefinition;
    id?: string
    public constructor(init?: Partial<StickyLoadBalancerDefinition>) {
        super('StickyLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class TopicLoadBalancerDefinition extends CamelElement {
    id?: string
    public constructor(init?: Partial<TopicLoadBalancerDefinition>) {
        super('TopicLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class WeightedLoadBalancerDefinition extends CamelElement {
    distributionRatioDelimiter?: string;
    id?: string;
    distributionRatio: string = '';
    roundRobin?: string
    public constructor(init?: Partial<WeightedLoadBalancerDefinition>) {
        super('WeightedLoadBalancerDefinition')
        Object.assign(this, init)
    }
}

export class DeleteVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<DeleteVerbDefinition>) {
        super('DeleteVerbDefinition')
        Object.assign(this, init)
    }
}

export class GetVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<GetVerbDefinition>) {
        super('GetVerbDefinition')
        Object.assign(this, init)
    }
}

export class HeadVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<HeadVerbDefinition>) {
        super('HeadVerbDefinition')
        Object.assign(this, init)
    }
}

export class PatchVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<PatchVerbDefinition>) {
        super('PatchVerbDefinition')
        Object.assign(this, init)
    }
}

export class PostVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<PostVerbDefinition>) {
        super('PostVerbDefinition')
        Object.assign(this, init)
    }
}

export class PutVerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<PutVerbDefinition>) {
        super('PutVerbDefinition')
        Object.assign(this, init)
    }
}

export class RestBindingDefinition extends CamelElement {
    enableCors?: string;
    component?: string;
    bindingMode?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    description?: string;
    id?: string;
    type?: string;
    outType?: string;
    consumes?: string
    public constructor(init?: Partial<RestBindingDefinition>) {
        super('RestBindingDefinition')
        Object.assign(this, init)
    }
}

export class RestConfigurationDefinition extends CamelElement {
    enableCors?: boolean;
    scheme?: string;
    apiContextPath?: string;
    consumerProperty?: RestPropertyDefinition[] = [];
    apiProperty?: RestPropertyDefinition[] = [];
    hostNameResolver?: string;
    componentProperty?: RestPropertyDefinition[] = [];
    corsHeaders?: RestPropertyDefinition[] = [];
    skipBindingOnErrorCode?: boolean;
    clientRequestValidation?: boolean;
    host?: string;
    producerApiDoc?: string;
    producerComponent?: string;
    endpointProperty?: RestPropertyDefinition[] = [];
    useXForwardHeaders?: boolean;
    apiContextIdPattern?: string;
    apiHost?: string;
    contextPath?: string;
    apiContextListing?: boolean;
    apiContextRouteId?: string;
    component?: string;
    dataFormatProperty?: RestPropertyDefinition[] = [];
    bindingMode?: string;
    port?: string;
    xmlDataFormat?: string;
    apiComponent?: string;
    apiVendorExtension?: boolean;
    jsonDataFormat?: string
    public constructor(init?: Partial<RestConfigurationDefinition>) {
        super('RestConfigurationDefinition')
        Object.assign(this, init)
    }
}

export class RestDefinition extends CamelElement {
    enableCors?: string;
    securityRequirements?: RestSecuritiesRequirement;
    verb?: VerbDefinition[] = [];
    description?: string;
    delete?: DeleteVerbDefinition[] = [];
    put?: PutVerbDefinition[] = [];
    head?: HeadVerbDefinition[] = [];
    patch?: PatchVerbDefinition[] = [];
    path?: string;
    bindingMode?: string;
    post?: PostVerbDefinition[] = [];
    stepName?: string = 'rest';
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    get?: GetVerbDefinition[] = [];
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    tag?: string;
    securityDefinitions?: RestSecuritiesDefinition;
    consumes?: string
    public constructor(init?: Partial<RestDefinition>) {
        super('RestDefinition')
        Object.assign(this, init)
    }
}

export class RestOperationParamDefinition extends CamelElement {
    arrayType?: string;
    examples?: RestPropertyDefinition[] = [];
    dataFormat?: string;
    defaultValue?: string;
    dataType?: string;
    name: string = '';
    description?: string;
    type: string = '';
    collectionFormat?: string;
    value?: string[] = [];
    required?: boolean
    public constructor(init?: Partial<RestOperationParamDefinition>) {
        super('RestOperationParamDefinition')
        Object.assign(this, init)
    }
}

export class RestOperationResponseHeaderDefinition extends CamelElement {
    arrayType?: string;
    dataFormat?: string;
    dataType?: string;
    name: string = '';
    description?: string;
    collectionFormat?: string;
    value?: string[] = [];
    example?: string
    public constructor(init?: Partial<RestOperationResponseHeaderDefinition>) {
        super('RestOperationResponseHeaderDefinition')
        Object.assign(this, init)
    }
}

export class RestOperationResponseMsgDefinition extends CamelElement {
    code?: string;
    examples?: RestPropertyDefinition[] = [];
    header?: RestOperationResponseHeaderDefinition[] = [];
    responseModel?: string;
    message: string = ''
    public constructor(init?: Partial<RestOperationResponseMsgDefinition>) {
        super('RestOperationResponseMsgDefinition')
        Object.assign(this, init)
    }
}

export class RestPropertyDefinition extends CamelElement {
    value: string = '';
    key: string = ''
    public constructor(init?: Partial<RestPropertyDefinition>) {
        super('RestPropertyDefinition')
        Object.assign(this, init)
    }
}

export class RestSecuritiesDefinition extends CamelElement {
    openIdConnect?: RestSecurityOpenIdConnect;
    apiKey?: RestSecurityApiKey;
    basicAuth?: RestSecurityBasicAuth;
    mutualTls?: RestSecurityMutualTLS;
    bearer?: RestSecurityBearerToken;
    oauth2?: RestSecurityOAuth2
    public constructor(init?: Partial<RestSecuritiesDefinition>) {
        super('RestSecuritiesDefinition')
        Object.assign(this, init)
    }
}

export class RestSecuritiesRequirement extends CamelElement {
    securityRequirement?: SecurityDefinition
    public constructor(init?: Partial<RestSecuritiesRequirement>) {
        super('RestSecuritiesRequirement')
        Object.assign(this, init)
    }
}

export class RestSecurityApiKey extends CamelElement {
    inHeader?: boolean;
    inCookie?: boolean;
    name: string = '';
    description?: string;
    inQuery?: boolean;
    key: string = ''
    public constructor(init?: Partial<RestSecurityApiKey>) {
        super('RestSecurityApiKey')
        Object.assign(this, init)
    }
}

export class RestSecurityBasicAuth extends CamelElement {
    description?: string;
    key: string = ''
    public constructor(init?: Partial<RestSecurityBasicAuth>) {
        super('RestSecurityBasicAuth')
        Object.assign(this, init)
    }
}

export class RestSecurityBearerToken extends CamelElement {
    format?: string;
    description?: string;
    key: string = ''
    public constructor(init?: Partial<RestSecurityBearerToken>) {
        super('RestSecurityBearerToken')
        Object.assign(this, init)
    }
}

export class RestSecurityMutualTLS extends CamelElement {
    description?: string;
    key: string = ''
    public constructor(init?: Partial<RestSecurityMutualTLS>) {
        super('RestSecurityMutualTLS')
        Object.assign(this, init)
    }
}

export class RestSecurityOAuth2 extends CamelElement {
    tokenUrl?: string;
    authorizationUrl?: string;
    refreshUrl?: string;
    description?: string;
    scopes?: RestPropertyDefinition[] = [];
    flow?: string;
    key: string = ''
    public constructor(init?: Partial<RestSecurityOAuth2>) {
        super('RestSecurityOAuth2')
        Object.assign(this, init)
    }
}

export class RestSecurityOpenIdConnect extends CamelElement {
    description?: string;
    key: string = '';
    url: string = ''
    public constructor(init?: Partial<RestSecurityOpenIdConnect>) {
        super('RestSecurityOpenIdConnect')
        Object.assign(this, init)
    }
}

export class RestsDefinition extends CamelElement {
    rest?: RestDefinition[] = [];
    description?: string;
    id?: string
    public constructor(init?: Partial<RestsDefinition>) {
        super('RestsDefinition')
        Object.assign(this, init)
    }
}

export class SecurityDefinition extends CamelElement {
    scopes?: string;
    key: string = ''
    public constructor(init?: Partial<SecurityDefinition>) {
        super('SecurityDefinition')
        Object.assign(this, init)
    }
}

export class VerbDefinition extends CamelElement {
    enableCors?: string;
    method?: string;
    deprecated?: boolean;
    toD?: ToDynamicDefinition | string;
    description?: string;
    type?: string;
    outType?: string;
    steps?: CamelElement[] = [];
    uri?: string;
    security?: SecurityDefinition[] = [];
    route?: RouteDefinition;
    routeId?: string;
    bindingMode?: string;
    param?: RestOperationParamDefinition[] = [];
    apiDocs?: string;
    skipBindingOnErrorCode?: string;
    clientRequestValidation?: string;
    produces?: string;
    id?: string;
    to?: ToDefinition | string;
    responseMessage?: RestOperationResponseMsgDefinition[] = [];
    consumes?: string
    public constructor(init?: Partial<VerbDefinition>) {
        super('VerbDefinition')
        Object.assign(this, init)
    }
}

export class CustomTransformerDefinition extends CamelElement {
    ref?: string;
    toType?: string;
    fromType?: string;
    scheme?: string;
    className?: string
    public constructor(init?: Partial<CustomTransformerDefinition>) {
        super('CustomTransformerDefinition')
        Object.assign(this, init)
    }
}

export class DataFormatTransformerDefinition extends CamelElement {
    univocityCsv?: UniVocityCsvDataFormat;
    protobuf?: ProtobufDataFormat | string;
    tarFile?: TarFileDataFormat;
    tidyMarkup?: TidyMarkupDataFormat;
    scheme?: string;
    csv?: CsvDataFormat | string;
    base64?: Base64DataFormat;
    zipDeflater?: ZipDeflaterDataFormat;
    bindy?: BindyDataFormat;
    syslog?: SyslogDataFormat;
    zipFile?: ZipFileDataFormat;
    jaxb?: JaxbDataFormat;
    ref?: string;
    rss?: RssDataFormat;
    fromType?: string;
    mimeMultipart?: MimeMultipartDataFormat;
    asn1?: ASN1DataFormat | string;
    pgp?: PGPDataFormat;
    thrift?: ThriftDataFormat | string;
    json?: JsonDataFormat;
    lzf?: LZFDataFormat;
    fhirXml?: FhirXmlDataFormat;
    barcode?: BarcodeDataFormat;
    avro?: AvroDataFormat | string;
    yaml?: YAMLDataFormat;
    beanio?: BeanioDataFormat;
    toType?: string;
    fhirJson?: FhirJsonDataFormat;
    any23?: Any23DataFormat | string;
    custom?: CustomDataFormat | string;
    flatpack?: FlatpackDataFormat;
    cbor?: CBORDataFormat;
    crypto?: CryptoDataFormat;
    univocityTsv?: UniVocityTsvDataFormat;
    hl7?: HL7DataFormat;
    jsonApi?: JsonApiDataFormat;
    xmlSecurity?: XMLSecurityDataFormat;
    ical?: IcalDataFormat;
    univocityFixed?: UniVocityFixedDataFormat;
    jacksonXml?: JacksonXMLDataFormat;
    grok?: GrokDataFormat;
    xstream?: XStreamDataFormat | string;
    gzipDeflater?: GzipDeflaterDataFormat;
    soap?: SoapDataFormat | string
    public constructor(init?: Partial<DataFormatTransformerDefinition>) {
        super('DataFormatTransformerDefinition')
        Object.assign(this, init)
    }
}

export class EndpointTransformerDefinition extends CamelElement {
    ref?: string;
    toType?: string;
    fromType?: string;
    scheme?: string;
    uri?: string
    public constructor(init?: Partial<EndpointTransformerDefinition>) {
        super('EndpointTransformerDefinition')
        Object.assign(this, init)
    }
}

export class TransformersDefinition extends CamelElement {
    endpointTransformer?: EndpointTransformerDefinition;
    customTransformer?: CustomTransformerDefinition;
    dataFormatTransformer?: DataFormatTransformerDefinition
    public constructor(init?: Partial<TransformersDefinition>) {
        super('TransformersDefinition')
        Object.assign(this, init)
    }
}

export class CustomValidatorDefinition extends CamelElement {
    ref?: string;
    className?: string;
    type?: string
    public constructor(init?: Partial<CustomValidatorDefinition>) {
        super('CustomValidatorDefinition')
        Object.assign(this, init)
    }
}

export class EndpointValidatorDefinition extends CamelElement {
    ref?: string;
    type?: string;
    uri?: string
    public constructor(init?: Partial<EndpointValidatorDefinition>) {
        super('EndpointValidatorDefinition')
        Object.assign(this, init)
    }
}

export class PredicateValidatorDefinition extends CamelElement {
    expression?: ExpressionDefinition;
    type?: string
    public constructor(init?: Partial<PredicateValidatorDefinition>) {
        super('PredicateValidatorDefinition')
        Object.assign(this, init)
    }
}

export class ValidatorsDefinition extends CamelElement {
    predicateValidator?: PredicateValidatorDefinition;
    endpointValidator?: EndpointValidatorDefinition;
    customValidator?: CustomValidatorDefinition
    public constructor(init?: Partial<ValidatorsDefinition>) {
        super('ValidatorsDefinition')
        Object.assign(this, init)
    }
}

