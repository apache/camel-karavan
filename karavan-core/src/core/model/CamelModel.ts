/**
 * Generated by karavan build tools - do NOT edit this file!
 */
import {v4 as uuidv4} from 'uuid';
import {CamelApi} from "../api/CamelApi";
import * as dataFormat from './CamelDataFormat';

export class Metadata {
    name: string = '';

    public constructor(init?: Partial<Metadata>) {
        Object.assign(this, init);
    }
}

export class Spec {
    flows: From[] = [];

    public constructor(init?: Partial<Spec>) {
        Object.assign(this, init);
    }
}

export class Integration {
    apiVersion: string = 'camel.apache.org/v1';
    kind: string = 'Integration';
    metadata: Metadata = new Metadata();
    spec: Spec = new Spec();
    crd: boolean = true;

    public constructor(init?: Partial<Integration>) {
        Object.assign(this, init);
    }

    static createNew(name?: string): Integration {
        return new Integration({metadata: new Metadata({name: name}), spec: new Spec({flows: []})})
    }
}

export class CamelElement {
   uuid: string = ''
   dslName: string = ''

   constructor(dslName: string) {
       this.uuid = uuidv4()
       this.dslName = dslName
   }

   hasSteps(): boolean {
      return this.hasOwnProperty('steps');
   }
}

export class CamelElementMeta {
    step?: CamelElement
    parentUuid?: string
    position: number = 0;
    pathUuids: string [] = [];


    constructor(step?: CamelElement, parentUuid?: string, position?: number, pathUuids?: string []) {
        this.step = step;
        this.parentUuid = parentUuid;
        this.position = position || 0;
        this.pathUuids = pathUuids || this.pathUuids;
    }
}

export class Policy extends CamelElement { 
    ref?: string
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Policy>) { 
        super('policy')
        Object.assign(this, init)
    }
}
export class ThrowException extends CamelElement { 
    exceptionType?: string
    message?: string
    ref?: string

    public constructor(init?: Partial<ThrowException>) { 
        super('throwException')
        Object.assign(this, init)
    }
}
export class Choice extends CamelElement { 
    otherwise?: Otherwise
    when?: When [] = []

    public constructor(init?: Partial<Choice>) { 
        super('choice')
        Object.assign(this, init)
    }
}
export class PollEnrich extends CamelElement { 
    aggregateOnException?: boolean
    cacheSize?: number
    expression?: Expression
    ignoreInvalidEndpoint?: number
    strategyMethodAllowNull?: boolean
    strategyMethodName?: string
    strategyRef?: string
    timeout?: string

    public constructor(init?: Partial<PollEnrich>) { 
        super('pollEnrich')
        Object.assign(this, init)
    }
}
export class SetBody extends CamelElement { 
    expression?: Expression

    public constructor(init?: Partial<SetBody>) { 
        super('setBody')
        Object.assign(this, init)
    }
}
export class Stop extends CamelElement { 

    public constructor(init?: Partial<Stop>) { 
        super('stop')
        Object.assign(this, init)
    }
}
export class ToD extends CamelElement { 
    allowOptimisedComponents?: boolean
    autoStartComponents?: boolean
    cacheSize?: number
    ignoreInvalidEndpoint?: boolean
    parameters?: any
    pattern?: string
    uri?: string

    public constructor(init?: Partial<ToD>) { 
        super('toD')
        Object.assign(this, init)
    }
}
export class Process extends CamelElement { 
    ref?: string

    public constructor(init?: Partial<Process>) { 
        super('process')
        Object.assign(this, init)
    }
}
export class RemoveHeaders extends CamelElement { 
    excludePattern?: string
    pattern?: string

    public constructor(init?: Partial<RemoveHeaders>) { 
        super('removeHeaders')
        Object.assign(this, init)
    }
}
export class Delay extends CamelElement { 
    asyncDelayed?: boolean
    callerRunsWhenRejected?: boolean
    executorServiceRef?: string
    expression?: Expression

    public constructor(init?: Partial<Delay>) { 
        super('delay')
        Object.assign(this, init)
    }
}
export class Throttle extends CamelElement { 
    asyncDelayed?: boolean
    callerRunsWhenRejected?: boolean
    correlationExpression?: Expression
    executorServiceRef?: string
    expression?: Expression
    rejectExecution?: boolean
    timePeriodMillis?: string

    public constructor(init?: Partial<Throttle>) { 
        super('throttle')
        Object.assign(this, init)
    }
}
export class Otherwise extends CamelElement { 
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Otherwise>) { 
        super('otherwise')
        Object.assign(this, init)
    }
}
export class RemoveProperty extends CamelElement { 
    propertyName?: string

    public constructor(init?: Partial<RemoveProperty>) { 
        super('removeProperty')
        Object.assign(this, init)
    }
}
export class Validate extends CamelElement { 
    expression?: Expression

    public constructor(init?: Partial<Validate>) { 
        super('validate')
        Object.assign(this, init)
    }
}
export class Sort extends CamelElement { 
    comparatorRef?: string
    expression?: Expression

    public constructor(init?: Partial<Sort>) { 
        super('sort')
        Object.assign(this, init)
    }
}
export class From extends CamelElement { 
    parameters?: any
    steps?: CamelElement [] = []
    uri?: string

    public constructor(init?: Partial<From>) { 
        super('from')
        Object.assign(this, init)
    }
}
export class To extends CamelElement { 
    parameters?: any
    pattern?: string
    uri?: string

    public constructor(init?: Partial<To>) { 
        super('to')
        Object.assign(this, init)
    }
}
export class SetHeader extends CamelElement { 
    expression?: Expression
    name?: string

    public constructor(init?: Partial<SetHeader>) { 
        super('setHeader')
        Object.assign(this, init)
    }
}
export class OnCompletion extends CamelElement { 
    executorServiceRef?: string
    mode?: string
    onCompleteOnly?: boolean
    onFailureOnly?: boolean
    onWhen?: When
    parallelProcessing?: boolean
    steps?: CamelElement [] = []
    useOriginalMessage?: boolean

    public constructor(init?: Partial<OnCompletion>) { 
        super('onCompletion')
        Object.assign(this, init)
    }
}
export class RemoveHeader extends CamelElement { 
    headerName?: string
    name?: string

    public constructor(init?: Partial<RemoveHeader>) { 
        super('removeHeader')
        Object.assign(this, init)
    }
}
export class Script extends CamelElement { 
    expression?: Expression

    public constructor(init?: Partial<Script>) { 
        super('script')
        Object.assign(this, init)
    }
}
export class Enrich extends CamelElement { 
    aggregateOnException?: boolean
    allowOptimisedComponents?: boolean
    cacheSize?: number
    expression?: Expression
    ignoreInvalidEndpoint?: boolean
    shareUnitOfWork?: boolean
    strategyMethodAllowNull?: string
    strategyMethodName?: string
    strategyRef?: string

    public constructor(init?: Partial<Enrich>) { 
        super('enrich')
        Object.assign(this, init)
    }
}
export class Log extends CamelElement { 
    logName?: string
    loggerRef?: string
    loggingLevel?: string
    marker?: string
    message?: string

    public constructor(init?: Partial<Log>) { 
        super('log')
        Object.assign(this, init)
    }
}
export class Tod extends CamelElement { 
    allowOptimisedComponents?: boolean
    autoStartComponents?: boolean
    cacheSize?: number
    ignoreInvalidEndpoint?: boolean
    parameters?: any
    pattern?: string
    uri?: string

    public constructor(init?: Partial<Tod>) { 
        super('tod')
        Object.assign(this, init)
    }
}
export class RemoveProperties extends CamelElement { 
    excludePattern?: string
    pattern?: string

    public constructor(init?: Partial<RemoveProperties>) { 
        super('removeProperties')
        Object.assign(this, init)
    }
}
export class Marshal extends CamelElement { 
    any23?: dataFormat.Any23DataFormat
    asn1?: dataFormat.ASN1DataFormat
    avro?: dataFormat.AvroDataFormat
    barcode?: dataFormat.BarcodeDataFormat
    base64?: dataFormat.Base64DataFormat
    beanio?: dataFormat.BeanioDataFormat
    bindy?: dataFormat.BindyDataFormat
    cbor?: dataFormat.CBORDataFormat
    crypto?: dataFormat.CryptoDataFormat
    csv?: dataFormat.CsvDataFormat
    custom?: dataFormat.CustomDataFormat
    fhirJson?: dataFormat.FhirJsonDataFormat
    fhirXml?: dataFormat.FhirXmlDataFormat
    flatpack?: dataFormat.FlatpackDataFormat
    grok?: dataFormat.GrokDataFormat
    gzip?: dataFormat.GzipDataFormat
    hl7?: dataFormat.HL7DataFormat
    ical?: dataFormat.IcalDataFormat
    jacksonxml?: dataFormat.JacksonXMLDataFormat
    jaxb?: dataFormat.JaxbDataFormat
    json?: dataFormat.JsonDataFormat
    jsonApi?: dataFormat.JsonApiDataFormat
    lzf?: dataFormat.LZFDataFormat
    mimeMultipart?: dataFormat.MimeMultipartDataFormat
    pgp?: dataFormat.PGPDataFormat
    protobuf?: dataFormat.ProtobufDataFormat
    rss?: dataFormat.RssDataFormat
    secureXml?: dataFormat.XMLSecurityDataFormat
    soapjaxb?: dataFormat.SoapJaxbDataFormat
    syslog?: dataFormat.SyslogDataFormat
    tarfile?: dataFormat.TarFileDataFormat
    thrift?: dataFormat.ThriftDataFormat
    tidyMarkup?: dataFormat.TidyMarkupDataFormat
    univocityCsv?: dataFormat.UniVocityCsvDataFormat
    univocityFixed?: dataFormat.UniVocityFixedWidthDataFormat
    univocityTsv?: dataFormat.UniVocityTsvDataFormat
    xmlrpc?: dataFormat.XmlRpcDataFormat
    xstream?: dataFormat.XStreamDataFormat
    yaml?: dataFormat.YAMLDataFormat
    zip?: dataFormat.ZipDeflaterDataFormat
    zipfile?: dataFormat.ZipFileDataFormat

    public constructor(init?: Partial<Marshal>) { 
        super('marshal')
        Object.assign(this, init)
    }
}
export class Split extends CamelElement { 
    delimiter?: string
    executorServiceRef?: string
    expression?: Expression
    onPrepareRef?: string
    parallelAggregate?: boolean
    parallelProcessing?: boolean
    shareUnitOfWork?: boolean
    steps?: CamelElement [] = []
    stopOnAggregateException?: boolean
    stopOnException?: boolean
    strategyMethodAllowNull?: boolean
    strategyMethodName?: string
    strategyRef?: string
    streaming?: boolean
    timeout?: string

    public constructor(init?: Partial<Split>) { 
        super('split')
        Object.assign(this, init)
    }
}
export class Transacted extends CamelElement { 
    ref?: string
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Transacted>) { 
        super('transacted')
        Object.assign(this, init)
    }
}
export class InterceptFrom extends CamelElement { 
    steps?: CamelElement [] = []
    uri?: string

    public constructor(init?: Partial<InterceptFrom>) { 
        super('interceptFrom')
        Object.assign(this, init)
    }
}
export class DoCatch extends CamelElement { 
    exception?: string [] = []
    onWhen?: When
    steps?: CamelElement [] = []

    public constructor(init?: Partial<DoCatch>) { 
        super('doCatch')
        Object.assign(this, init)
    }
}
export class CircuitBreaker extends CamelElement { 
    configurationRef?: string
    onFallback?: OnFallback
    steps?: CamelElement [] = []

    public constructor(init?: Partial<CircuitBreaker>) { 
        super('circuitBreaker')
        Object.assign(this, init)
    }
}
export class ConvertBodyTo extends CamelElement { 
    charset?: string
    mandatory?: boolean
    type?: string

    public constructor(init?: Partial<ConvertBodyTo>) { 
        super('convertBodyTo')
        Object.assign(this, init)
    }
}
export class Intercept extends CamelElement { 
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Intercept>) { 
        super('intercept')
        Object.assign(this, init)
    }
}
export class Unmarshal extends CamelElement { 
    any23?: dataFormat.Any23DataFormat
    asn1?: dataFormat.ASN1DataFormat
    avro?: dataFormat.AvroDataFormat
    barcode?: dataFormat.BarcodeDataFormat
    base64?: dataFormat.Base64DataFormat
    beanio?: dataFormat.BeanioDataFormat
    bindy?: dataFormat.BindyDataFormat
    cbor?: dataFormat.CBORDataFormat
    crypto?: dataFormat.CryptoDataFormat
    csv?: dataFormat.CsvDataFormat
    custom?: dataFormat.CustomDataFormat
    fhirJson?: dataFormat.FhirJsonDataFormat
    fhirXml?: dataFormat.FhirXmlDataFormat
    flatpack?: dataFormat.FlatpackDataFormat
    grok?: dataFormat.GrokDataFormat
    gzip?: dataFormat.GzipDataFormat
    hl7?: dataFormat.HL7DataFormat
    ical?: dataFormat.IcalDataFormat
    jacksonxml?: dataFormat.JacksonXMLDataFormat
    jaxb?: dataFormat.JaxbDataFormat
    json?: dataFormat.JsonDataFormat
    jsonApi?: dataFormat.JsonApiDataFormat
    lzf?: dataFormat.LZFDataFormat
    mimeMultipart?: dataFormat.MimeMultipartDataFormat
    pgp?: dataFormat.PGPDataFormat
    protobuf?: dataFormat.ProtobufDataFormat
    rss?: dataFormat.RssDataFormat
    secureXml?: dataFormat.XMLSecurityDataFormat
    soapjaxb?: dataFormat.SoapJaxbDataFormat
    syslog?: dataFormat.SyslogDataFormat
    tarfile?: dataFormat.TarFileDataFormat
    thrift?: dataFormat.ThriftDataFormat
    tidyMarkup?: dataFormat.TidyMarkupDataFormat
    univocityCsv?: dataFormat.UniVocityCsvDataFormat
    univocityFixed?: dataFormat.UniVocityFixedWidthDataFormat
    univocityTsv?: dataFormat.UniVocityTsvDataFormat
    xmlrpc?: dataFormat.XmlRpcDataFormat
    xstream?: dataFormat.XStreamDataFormat
    yaml?: dataFormat.YAMLDataFormat
    zip?: dataFormat.ZipDeflaterDataFormat
    zipfile?: dataFormat.ZipFileDataFormat

    public constructor(init?: Partial<Unmarshal>) { 
        super('unmarshal')
        Object.assign(this, init)
    }
}
export class OnFallback extends CamelElement { 
    fallbackViaNetwork?: boolean
    steps?: CamelElement [] = []

    public constructor(init?: Partial<OnFallback>) { 
        super('onFallback')
        Object.assign(this, init)
    }
}
export class SetExchangePattern extends CamelElement { 
    pattern?: string

    public constructor(init?: Partial<SetExchangePattern>) { 
        super('setExchangePattern')
        Object.assign(this, init)
    }
}
export class RecipientList extends CamelElement { 
    cacheSize?: number
    delimiter?: string
    executorServiceRef?: string
    expression?: Expression
    ignoreInvalidEndpoints?: boolean
    onPrepareRef?: string
    parallelAggregate?: boolean
    parallelProcessing?: boolean
    shareUnitOfWork?: boolean
    stopOnAggregateException?: boolean
    stopOnException?: boolean
    strategyMethodAllowNull?: boolean
    strategyMethodName?: string
    strategyRef?: string
    streaming?: boolean
    timeout?: string

    public constructor(init?: Partial<RecipientList>) { 
        super('recipientList')
        Object.assign(this, init)
    }
}
export class Bean extends CamelElement { 
    beanType?: string
    cache?: boolean
    method?: string
    ref?: string
    scope?: string

    public constructor(init?: Partial<Bean>) { 
        super('bean')
        Object.assign(this, init)
    }
}
export class Multicast extends CamelElement { 
    executorServiceRef?: string
    onPrepareRef?: string
    parallelAggregate?: boolean
    parallelProcessing?: boolean
    shareUnitOfWork?: boolean
    steps?: CamelElement [] = []
    stopOnAggregateException?: boolean
    stopOnException?: boolean
    strategyMethodAllowNull?: boolean
    strategyMethodName?: string
    strategyRef?: string
    streaming?: boolean
    timeout?: string

    public constructor(init?: Partial<Multicast>) { 
        super('multicast')
        Object.assign(this, init)
    }
}
export class InOnly extends CamelElement { 
    parameters?: any
    uri?: string

    public constructor(init?: Partial<InOnly>) { 
        super('inOnly')
        Object.assign(this, init)
    }
}
export class LoadBalance extends CamelElement { 
    customLoadBalancer?: string
    inheritErrorHandler?: boolean
    steps?: CamelElement [] = []

    public constructor(init?: Partial<LoadBalance>) { 
        super('loadBalance')
        Object.assign(this, init)
    }
}
export class RoutingSlip extends CamelElement { 
    cacheSize?: number
    expression?: Expression
    ignoreInvalidEndpoints?: boolean
    uriDelimiter?: string

    public constructor(init?: Partial<RoutingSlip>) { 
        super('routingSlip')
        Object.assign(this, init)
    }
}
export class Rollback extends CamelElement { 
    markRollbackOnly?: boolean
    markRollbackOnlyLast?: boolean
    message?: string

    public constructor(init?: Partial<Rollback>) { 
        super('rollback')
        Object.assign(this, init)
    }
}
export class WhenSkipSendToEndpoint extends CamelElement { 
    expression?: Expression
    steps?: CamelElement [] = []

    public constructor(init?: Partial<WhenSkipSendToEndpoint>) { 
        super('whenSkipSendToEndpoint')
        Object.assign(this, init)
    }
}
export class WireTap extends CamelElement { 
    allowOptimisedComponents?: boolean
    autoStartComponents?: boolean
    body?: Expression
    cacheSize?: number
    copy?: boolean
    dynamicUri?: boolean
    executorServiceRef?: string
    ignoreInvalidEndpoint?: boolean
    onPrepareRef?: string
    parameters?: any
    pattern?: string
    processorRef?: string
    setHeader?: SetHeader [] = []
    uri?: string

    public constructor(init?: Partial<WireTap>) { 
        super('wireTap')
        Object.assign(this, init)
    }
}
export class Loop extends CamelElement { 
    breakOnShutdown?: boolean
    copy?: boolean
    doWhile?: boolean
    expression?: Expression
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Loop>) { 
        super('loop')
        Object.assign(this, init)
    }
}
export class InterceptSendToEndpoint extends CamelElement { 
    afterUri?: string
    skipSendToOriginalEndpoint?: string
    steps?: CamelElement [] = []
    uri?: string

    public constructor(init?: Partial<InterceptSendToEndpoint>) { 
        super('interceptSendToEndpoint')
        Object.assign(this, init)
    }
}
export class DoTry extends CamelElement { 
    doCatch?: DoCatch [] = []
    doFinally?: DoFinally
    steps?: CamelElement [] = []

    public constructor(init?: Partial<DoTry>) { 
        super('doTry')
        Object.assign(this, init)
    }
}
export class Resequence extends CamelElement { 
    expression?: Expression
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Resequence>) { 
        super('resequence')
        Object.assign(this, init)
    }
}
export class Expression extends CamelElement { 
    constant?: string
    csimple?: string
    datasonnet?: string
    exchangeProperty?: string
    groovy?: string
    header?: string
    hl7terser?: string
    joor?: string
    jsonpath?: string
    language?: string
    method?: string
    mvel?: string
    ognl?: string
    ref?: string
    simple?: string
    spel?: string
    tokenize?: string
    xpath?: string
    xquery?: string
    xtokenize?: string

    public constructor(init?: Partial<Expression>) { 
        super('expression')
        if (init && init.language === undefined) init.language = CamelApi.getExpressionLanguage(init);
        Object.assign(this, init)
    }
}
export class ServiceCall extends CamelElement { 
    component?: string
    configurationRef?: string
    expressionRef?: string
    loadBalancerRef?: string
    name?: string
    pattern?: string
    serviceChooserRef?: string
    serviceDiscoveryRef?: string
    serviceFilterRef?: string
    uri?: string

    public constructor(init?: Partial<ServiceCall>) { 
        super('serviceCall')
        Object.assign(this, init)
    }
}
export class Kamelet extends CamelElement { 
    name?: string
    parameters?: any

    public constructor(init?: Partial<Kamelet>) { 
        super('kamelet')
        Object.assign(this, init)
    }
}
export class Sample extends CamelElement { 
    messageFrequency?: number
    samplePeriod?: string
    units?: string

    public constructor(init?: Partial<Sample>) { 
        super('sample')
        Object.assign(this, init)
    }
}
export class DynamicRouter extends CamelElement { 
    cacheSize?: number
    expression?: Expression
    ignoreInvalidEndpoints?: boolean
    uriDelimiter?: string

    public constructor(init?: Partial<DynamicRouter>) { 
        super('dynamicRouter')
        Object.assign(this, init)
    }
}
export class Pipeline extends CamelElement { 
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Pipeline>) { 
        super('pipeline')
        Object.assign(this, init)
    }
}
export class Saga extends CamelElement { 
    compensation?: string
    completion?: string
    completionMode?: string
    propagation?: string
    sagaServiceRef?: string
    steps?: CamelElement [] = []
    timeout?: string
    timeoutInMilliseconds?: number

    public constructor(init?: Partial<Saga>) { 
        super('saga')
        Object.assign(this, init)
    }
}
export class Threads extends CamelElement { 
    allowCoreThreadTimeOut?: boolean
    callerRunsWhenRejected?: string
    executorServiceRef?: string
    keepAliveTime?: number
    maxPoolSize?: number
    maxQueueSize?: number
    poolSize?: number
    rejectedPolicy?: string
    threadName?: string
    timeUnit?: string

    public constructor(init?: Partial<Threads>) { 
        super('threads')
        Object.assign(this, init)
    }
}
export class When extends CamelElement { 
    expression?: Expression
    steps?: CamelElement [] = []

    public constructor(init?: Partial<When>) { 
        super('when')
        Object.assign(this, init)
    }
}
export class ClaimCheck extends CamelElement { 
    filter?: string
    key?: string
    operation?: string
    strategyMethodName?: string
    strategyRef?: string

    public constructor(init?: Partial<ClaimCheck>) { 
        super('claimCheck')
        Object.assign(this, init)
    }
}
export class DoFinally extends CamelElement { 
    steps?: CamelElement [] = []

    public constructor(init?: Partial<DoFinally>) { 
        super('doFinally')
        Object.assign(this, init)
    }
}
export class Filter extends CamelElement { 
    expression?: Expression
    steps?: CamelElement [] = []

    public constructor(init?: Partial<Filter>) { 
        super('filter')
        Object.assign(this, init)
    }
}
export class Aggregate extends CamelElement { 
    aggregateControllerRef?: string
    aggregationRepositoryRef?: string
    closeCorrelationKeyOnCompletion?: number
    completeAllOnStop?: boolean
    completionFromBatchConsumer?: boolean
    completionInterval?: string
    completionOnNewCorrelationGroup?: boolean
    completionPredicate?: Expression
    completionSize?: number
    completionSizeExpression?: Expression
    completionTimeout?: string
    completionTimeoutCheckerInterval?: string
    completionTimeoutExpression?: Expression
    correlationExpression?: Expression
    discardOnAggregationFailure?: boolean
    discardOnCompletionTimeout?: boolean
    eagerCheckCompletion?: boolean
    executorServiceRef?: string
    forceCompletionOnStop?: boolean
    ignoreInvalidCorrelationKeys?: boolean
    optimisticLocking?: boolean
    parallelProcessing?: boolean
    steps?: CamelElement [] = []
    strategyMethodAllowNull?: boolean
    strategyMethodName?: string
    strategyRef?: string
    timeoutCheckerExecutorServiceRef?: string

    public constructor(init?: Partial<Aggregate>) { 
        super('aggregate')
        Object.assign(this, init)
    }
}
export class Transform extends CamelElement { 
    expression?: Expression

    public constructor(init?: Partial<Transform>) { 
        super('transform')
        Object.assign(this, init)
    }
}
export class IdempotentConsumer extends CamelElement { 
    completionEager?: string
    eager?: boolean
    expression?: Expression
    messageIdRepositoryRef?: string
    removeOnFailure?: boolean
    skipDuplicate?: boolean
    steps?: CamelElement [] = []

    public constructor(init?: Partial<IdempotentConsumer>) { 
        super('idempotentConsumer')
        Object.assign(this, init)
    }
}
export class SetProperty extends CamelElement { 
    expression?: Expression
    name?: string

    public constructor(init?: Partial<SetProperty>) { 
        super('setProperty')
        Object.assign(this, init)
    }
}
export class InOut extends CamelElement { 
    parameters?: any
    uri?: string

    public constructor(init?: Partial<InOut>) { 
        super('inOut')
        Object.assign(this, init)
    }
}
