/**
 * Generated by karavan build tools - do NOT edit this file!
 */
import {CamelElement} from "../model/IntegrationDefinition";
import {
    ProcessorDefinition,
    BeansDeserializer,
    ErrorHandlerBuilderDeserializer,
    NamedBeanDefinition,
    OutputAwareFromDefinition,
    AggregateDefinition,
    BeanDefinition,
    CatchDefinition,
    ChoiceDefinition,
    CircuitBreakerDefinition,
    ClaimCheckDefinition,
    ContextScanDefinition,
    ConvertBodyDefinition,
    DataFormatDefinition,
    DelayDefinition,
    DescriptionDefinition,
    DynamicRouterDefinition,
    EnrichDefinition,
    ErrorHandlerDefinition,
    ExpressionSubElementDefinition,
    FaultToleranceConfigurationDefinition,
    FilterDefinition,
    FinallyDefinition,
    FromDefinition,
    GlobalOptionDefinition,
    GlobalOptionsDefinition,
    IdempotentConsumerDefinition,
    InOnlyDefinition,
    InOutDefinition,
    InputTypeDefinition,
    InterceptDefinition,
    InterceptFromDefinition,
    InterceptSendToEndpointDefinition,
    KameletDefinition,
    LoadBalanceDefinition,
    LogDefinition,
    LoopDefinition,
    MarshalDefinition,
    MulticastDefinition,
    OnCompletionDefinition,
    OnExceptionDefinition,
    OnFallbackDefinition,
    OptimisticLockRetryPolicyDefinition,
    OtherwiseDefinition,
    OutputDefinition,
    OutputTypeDefinition,
    PackageScanDefinition,
    PausableDefinition,
    PipelineDefinition,
    PolicyDefinition,
    PollEnrichDefinition,
    ProcessDefinition,
    PropertyDefinition,
    PropertyExpressionDefinition,
    RecipientListDefinition,
    RedeliveryPolicyDefinition,
    RemoveHeaderDefinition,
    RemoveHeadersDefinition,
    RemovePropertiesDefinition,
    RemovePropertyDefinition,
    ResequenceDefinition,
    Resilience4jConfigurationDefinition,
    RestContextRefDefinition,
    ResumableDefinition,
    RollbackDefinition,
    RouteBuilderDefinition,
    RouteConfigurationContextRefDefinition,
    RouteConfigurationDefinition,
    RouteContextRefDefinition,
    RouteDefinition,
    RouteTemplateBeanDefinition,
    RouteTemplateDefinition,
    RouteTemplateParameterDefinition,
    RoutingSlipDefinition,
    SagaActionUriDefinition,
    SagaDefinition,
    SamplingDefinition,
    ScriptDefinition,
    SetBodyDefinition,
    SetExchangePatternDefinition,
    SetHeaderDefinition,
    SetPropertyDefinition,
    SortDefinition,
    SplitDefinition,
    StepDefinition,
    StopDefinition,
    TemplatedRouteBeanDefinition,
    TemplatedRouteDefinition,
    TemplatedRouteParameterDefinition,
    ThreadPoolProfileDefinition,
    ThreadsDefinition,
    ThrottleDefinition,
    ThrowExceptionDefinition,
    ToDefinition,
    ToDynamicDefinition,
    TransactedDefinition,
    TransformDefinition,
    TryDefinition,
    UnmarshalDefinition,
    ValidateDefinition,
    WhenDefinition,
    WhenSkipSendToEndpointDefinition,
    WireTapDefinition,
    BlacklistServiceCallServiceFilterConfiguration,
    CachingServiceCallServiceDiscoveryConfiguration,
    CombinedServiceCallServiceDiscoveryConfiguration,
    CombinedServiceCallServiceFilterConfiguration,
    ConsulServiceCallServiceDiscoveryConfiguration,
    CustomServiceCallServiceFilterConfiguration,
    DefaultServiceCallServiceLoadBalancerConfiguration,
    DnsServiceCallServiceDiscoveryConfiguration,
    HealthyServiceCallServiceFilterConfiguration,
    KubernetesServiceCallServiceDiscoveryConfiguration,
    PassThroughServiceCallServiceFilterConfiguration,
    ServiceCallConfigurationDefinition,
    ServiceCallDefinition,
    ServiceCallExpressionConfiguration,
    ServiceCallServiceChooserConfiguration,
    ServiceCallServiceDiscoveryConfiguration,
    ServiceCallServiceFilterConfiguration,
    ServiceCallServiceLoadBalancerConfiguration,
    StaticServiceCallServiceDiscoveryConfiguration,
    ZooKeeperServiceCallServiceDiscoveryConfiguration,
    BatchResequencerConfig,
    StreamResequencerConfig,
    ASN1DataFormat,
    Any23DataFormat,
    AvroDataFormat,
    BarcodeDataFormat,
    Base64DataFormat,
    BindyDataFormat,
    CBORDataFormat,
    CryptoDataFormat,
    CsvDataFormat,
    CustomDataFormat,
    DataFormatsDefinition,
    FhirJsonDataFormat,
    FhirXmlDataFormat,
    FlatpackDataFormat,
    GrokDataFormat,
    GzipDeflaterDataFormat,
    HL7DataFormat,
    IcalDataFormat,
    JacksonXMLDataFormat,
    JaxbDataFormat,
    JsonApiDataFormat,
    JsonDataFormat,
    LZFDataFormat,
    MimeMultipartDataFormat,
    PGPDataFormat,
    ProtobufDataFormat,
    RssDataFormat,
    SoapDataFormat,
    SyslogDataFormat,
    TarFileDataFormat,
    ThriftDataFormat,
    TidyMarkupDataFormat,
    UniVocityCsvDataFormat,
    UniVocityFixedDataFormat,
    UniVocityHeader,
    UniVocityTsvDataFormat,
    XMLSecurityDataFormat,
    XStreamDataFormat,
    YAMLDataFormat,
    YAMLTypeFilterDefinition,
    ZipDeflaterDataFormat,
    ZipFileDataFormat,
    DeadLetterChannelDefinition,
    DefaultErrorHandlerDefinition,
    ErrorHandlerRefDefinition,
    JtaTransactionErrorHandlerDefinition,
    NoErrorHandlerDefinition,
    SpringTransactionErrorHandlerDefinition,
    CSimpleExpression,
    ConstantExpression,
    DatasonnetExpression,
    ExchangePropertyExpression,
    ExpressionDefinition,
    GroovyExpression,
    HeaderExpression,
    Hl7TerserExpression,
    JoorExpression,
    JsonPathExpression,
    LanguageExpression,
    MethodCallExpression,
    MvelExpression,
    OgnlExpression,
    RefExpression,
    SimpleExpression,
    SpELExpression,
    TokenizerExpression,
    XMLTokenizerExpression,
    XPathExpression,
    XQueryExpression,
    CustomLoadBalancerDefinition,
    FailoverLoadBalancerDefinition,
    RandomLoadBalancerDefinition,
    RoundRobinLoadBalancerDefinition,
    StickyLoadBalancerDefinition,
    TopicLoadBalancerDefinition,
    WeightedLoadBalancerDefinition,
    ApiKeyDefinition,
    BasicAuthDefinition,
    BearerTokenDefinition,
    DeleteDefinition,
    GetDefinition,
    HeadDefinition,
    MutualTLSDefinition,
    OAuth2Definition,
    OpenIdConnectDefinition,
    ParamDefinition,
    PatchDefinition,
    PostDefinition,
    PutDefinition,
    ResponseHeaderDefinition,
    ResponseMessageDefinition,
    RestBindingDefinition,
    RestConfigurationDefinition,
    RestDefinition,
    RestPropertyDefinition,
    RestSecuritiesDefinition,
    RestsDefinition,
    SecurityDefinition,
    CustomTransformerDefinition,
    DataFormatTransformerDefinition,
    EndpointTransformerDefinition,
    TransformersDefinition,
    CustomValidatorDefinition,
    EndpointValidatorDefinition,
    PredicateValidatorDefinition,
    ValidatorsDefinition,
} from '../model/CamelDefinition';
import {CamelUtil} from './CamelUtil';

export class CamelDefinitionApi { 

    static createProcessorDefinition = (element: any): ProcessorDefinition => {
        
        const def = element ? new ProcessorDefinition({...element}) : new ProcessorDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.idempotentConsumer !== undefined) { 
            def.idempotentConsumer = CamelDefinitionApi.createIdempotentConsumerDefinition(element.idempotentConsumer); 
        } 
        if (element?.resumable !== undefined) { 
            def.resumable = CamelDefinitionApi.createResumableDefinition(element.resumable); 
        } 
        if (element?.doTry !== undefined) { 
            def.doTry = CamelDefinitionApi.createTryDefinition(element.doTry); 
        } 
        if (element?.convertBodyTo !== undefined) { 
            def.convertBodyTo = CamelDefinitionApi.createConvertBodyDefinition(element.convertBodyTo); 
        } 
        if (element?.recipientList !== undefined) { 
            def.recipientList = CamelDefinitionApi.createRecipientListDefinition(element.recipientList); 
        } 
        if (element?.when !== undefined) { 
            def.when = CamelDefinitionApi.createWhenDefinition(element.when); 
        } 
        if (element?.setHeader !== undefined) { 
            def.setHeader = CamelDefinitionApi.createSetHeaderDefinition(element.setHeader); 
        } 
        if (element?.inOnly !== undefined) { 
            def.inOnly = CamelDefinitionApi.createInOnlyDefinition(element.inOnly); 
        } 
        if (element?.inOut !== undefined) { 
            def.inOut = CamelDefinitionApi.createInOutDefinition(element.inOut); 
        } 
        if (element?.split !== undefined) { 
            def.split = CamelDefinitionApi.createSplitDefinition(element.split); 
        } 
        if (element?.interceptSendToEndpoint !== undefined) { 
            def.interceptSendToEndpoint = CamelDefinitionApi.createInterceptSendToEndpointDefinition(element.interceptSendToEndpoint); 
        } 
        if (element?.loop !== undefined) { 
            def.loop = CamelDefinitionApi.createLoopDefinition(element.loop); 
        } 
        if (element?.setExchangePattern !== undefined) { 
            def.setExchangePattern = CamelDefinitionApi.createSetExchangePatternDefinition(element.setExchangePattern); 
        } 
        if (element?.marshal !== undefined) { 
            def.marshal = CamelDefinitionApi.createMarshalDefinition(element.marshal); 
        } 
        if (element?.onFallback !== undefined) { 
            def.onFallback = CamelDefinitionApi.createOnFallbackDefinition(element.onFallback); 
        } 
        if (element?.circuitBreaker !== undefined) { 
            def.circuitBreaker = CamelDefinitionApi.createCircuitBreakerDefinition(element.circuitBreaker); 
        } 
        if (element?.enrich !== undefined) { 
            def.enrich = CamelDefinitionApi.createEnrichDefinition(element.enrich); 
        } 
        if (element?.kamelet !== undefined) { 
            def.kamelet = CamelDefinitionApi.createKameletDefinition(element.kamelet); 
        } 
        if (element?.saga !== undefined) { 
            def.saga = CamelDefinitionApi.createSagaDefinition(element.saga); 
        } 
        if (element?.bean !== undefined) { 
            def.bean = CamelDefinitionApi.createBeanDefinition(element.bean); 
        } 
        if (element?.otherwise !== undefined) { 
            def.otherwise = CamelDefinitionApi.createOtherwiseDefinition(element.otherwise); 
        } 
        if (element?.sort !== undefined) { 
            def.sort = CamelDefinitionApi.createSortDefinition(element.sort); 
        } 
        if (element?.loadBalance !== undefined) { 
            def.loadBalance = CamelDefinitionApi.createLoadBalanceDefinition(element.loadBalance); 
        } 
        if (element?.script !== undefined) { 
            def.script = CamelDefinitionApi.createScriptDefinition(element.script); 
        } 
        if (element?.removeHeader !== undefined) { 
            def.removeHeader = CamelDefinitionApi.createRemoveHeaderDefinition(element.removeHeader); 
        } 
        if (element?.delay !== undefined) { 
            def.delay = CamelDefinitionApi.createDelayDefinition(element.delay); 
        } 
        if (element?.stop !== undefined) { 
            def.stop = CamelDefinitionApi.createStopDefinition(element.stop); 
        } 
        if (element?.serviceCall !== undefined) { 
            def.serviceCall = CamelDefinitionApi.createServiceCallDefinition(element.serviceCall); 
        } 
        if (element?.intercept !== undefined) { 
            def.intercept = CamelDefinitionApi.createInterceptDefinition(element.intercept); 
        } 
        if (element?.whenSkipSendToEndpoint !== undefined) { 
            def.whenSkipSendToEndpoint = CamelDefinitionApi.createWhenSkipSendToEndpointDefinition(element.whenSkipSendToEndpoint); 
        } 
        if (element?.setProperty !== undefined) { 
            def.setProperty = CamelDefinitionApi.createSetPropertyDefinition(element.setProperty); 
        } 
        if (element?.removeProperty !== undefined) { 
            def.removeProperty = CamelDefinitionApi.createRemovePropertyDefinition(element.removeProperty); 
        } 
        if (element?.interceptFrom !== undefined) { 
            def.interceptFrom = CamelDefinitionApi.createInterceptFromDefinition(element.interceptFrom); 
        } 
        if (element?.onCompletion !== undefined) { 
            def.onCompletion = CamelDefinitionApi.createOnCompletionDefinition(element.onCompletion); 
        } 
        if (element?.pausable !== undefined) { 
            def.pausable = CamelDefinitionApi.createPausableDefinition(element.pausable); 
        } 
        if (element?.throttle !== undefined) { 
            def.throttle = CamelDefinitionApi.createThrottleDefinition(element.throttle); 
        } 
        if (element?.doFinally !== undefined) { 
            def.doFinally = CamelDefinitionApi.createFinallyDefinition(element.doFinally); 
        } 
        if (element?.log !== undefined) { 
            def.log = CamelDefinitionApi.createLogDefinition(element.log); 
        } 
        if (element?.doCatch !== undefined) { 
            def.doCatch = CamelDefinitionApi.createCatchDefinition(element.doCatch); 
        } 
        if (element?.transacted !== undefined) { 
            def.transacted = CamelDefinitionApi.createTransactedDefinition(element.transacted); 
        } 
        if (element?.claimCheck !== undefined) { 
            def.claimCheck = CamelDefinitionApi.createClaimCheckDefinition(element.claimCheck); 
        } 
        if (element?.pollEnrich !== undefined) { 
            def.pollEnrich = CamelDefinitionApi.createPollEnrichDefinition(element.pollEnrich); 
        } 
        if (element?.removeHeaders !== undefined) { 
            def.removeHeaders = CamelDefinitionApi.createRemoveHeadersDefinition(element.removeHeaders); 
        } 
        if (element?.aggregate !== undefined) { 
            def.aggregate = CamelDefinitionApi.createAggregateDefinition(element.aggregate); 
        } 
        if (element?.resequence !== undefined) { 
            def.resequence = CamelDefinitionApi.createResequenceDefinition(element.resequence); 
        } 
        if (element?.routingSlip !== undefined) { 
            def.routingSlip = CamelDefinitionApi.createRoutingSlipDefinition(element.routingSlip); 
        } 
        if (element?.transform !== undefined) { 
            def.transform = CamelDefinitionApi.createTransformDefinition(element.transform); 
        } 
        if (element?.removeProperties !== undefined) { 
            def.removeProperties = CamelDefinitionApi.createRemovePropertiesDefinition(element.removeProperties); 
        } 
        if (element?.policy !== undefined) { 
            def.policy = CamelDefinitionApi.createPolicyDefinition(element.policy); 
        } 
        if (element?.validate !== undefined) { 
            def.validate = CamelDefinitionApi.createValidateDefinition(element.validate); 
        } 
        if (element?.rollback !== undefined) { 
            def.rollback = CamelDefinitionApi.createRollbackDefinition(element.rollback); 
        } 
        if (element?.process !== undefined) { 
            def.process = CamelDefinitionApi.createProcessDefinition(element.process); 
        } 
        if (element?.threads !== undefined) { 
            def.threads = CamelDefinitionApi.createThreadsDefinition(element.threads); 
        } 
        if (element?.setBody !== undefined) { 
            def.setBody = CamelDefinitionApi.createSetBodyDefinition(element.setBody); 
        } 
        if (element?.sample !== undefined) { 
            def.sample = CamelDefinitionApi.createSamplingDefinition(element.sample); 
        } 
        if (element?.throwException !== undefined) { 
            def.throwException = CamelDefinitionApi.createThrowExceptionDefinition(element.throwException); 
        } 
        if (element?.dynamicRouter !== undefined) { 
            def.dynamicRouter = CamelDefinitionApi.createDynamicRouterDefinition(element.dynamicRouter); 
        } 
        if (element?.multicast !== undefined) { 
            def.multicast = CamelDefinitionApi.createMulticastDefinition(element.multicast); 
        } 
        if (element?.filter !== undefined) { 
            def.filter = CamelDefinitionApi.createFilterDefinition(element.filter); 
        } 
        if (element?.pipeline !== undefined) { 
            def.pipeline = CamelDefinitionApi.createPipelineDefinition(element.pipeline); 
        } 
        if (element?.unmarshal !== undefined) { 
            def.unmarshal = CamelDefinitionApi.createUnmarshalDefinition(element.unmarshal); 
        } 
        if (element?.wireTap !== undefined) { 
            def.wireTap = CamelDefinitionApi.createWireTapDefinition(element.wireTap); 
        } 
        if (element?.step !== undefined) { 
            def.step = CamelDefinitionApi.createStepDefinition(element.step); 
        } 
        if (element?.choice !== undefined) { 
            def.choice = CamelDefinitionApi.createChoiceDefinition(element.choice); 
        } 

        return def;
    }

    static createBeansDeserializer = (element: any): BeansDeserializer => {
        
        const def = element ? new BeansDeserializer({...element}) : new BeansDeserializer();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createErrorHandlerBuilderDeserializer = (element: any): ErrorHandlerBuilderDeserializer => {
        
        const def = element ? new ErrorHandlerBuilderDeserializer({...element}) : new ErrorHandlerBuilderDeserializer();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.deadLetterChannel !== undefined) { 
            def.deadLetterChannel = CamelDefinitionApi.createDeadLetterChannelDefinition(element.deadLetterChannel); 
        } 
        if (element?.log !== undefined) { 
            def.log = CamelDefinitionApi.createDefaultErrorHandlerDefinition(element.log); 
        } 
        if (element?.none !== undefined) { 
            def.none = CamelDefinitionApi.createNoErrorHandlerDefinition(element.none); 
        } 

        return def;
    }

    static createNamedBeanDefinition = (element: any): NamedBeanDefinition => {
        
        const def = element ? new NamedBeanDefinition({...element}) : new NamedBeanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createOutputAwareFromDefinition = (element: any): OutputAwareFromDefinition => {
        
        const def = element ? new OutputAwareFromDefinition({...element}) : new OutputAwareFromDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createAggregateDefinition = (element: any): AggregateDefinition => {
        
        const def = element ? new AggregateDefinition({...element}) : new AggregateDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.completionTimeoutExpression !== undefined) { 
            def.completionTimeoutExpression = CamelDefinitionApi.createExpressionSubElementDefinition(element.completionTimeoutExpression); 
        } 
        if (element?.correlationExpression !== undefined) { 
            def.correlationExpression = CamelDefinitionApi.createExpressionSubElementDefinition(element.correlationExpression); 
        } 
        if (element?.completionPredicate !== undefined) { 
            def.completionPredicate = CamelDefinitionApi.createExpressionSubElementDefinition(element.completionPredicate); 
        } 
        if (element?.optimisticLockRetryPolicy !== undefined) { 
            def.optimisticLockRetryPolicy = CamelDefinitionApi.createOptimisticLockRetryPolicyDefinition(element.optimisticLockRetryPolicy); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);
        if (element?.completionSizeExpression !== undefined) { 
            def.completionSizeExpression = CamelDefinitionApi.createExpressionSubElementDefinition(element.completionSizeExpression); 
        } 

        return def;
    }

    static createBeanDefinition = (element: any): BeanDefinition => {
        
        const def = element ? new BeanDefinition({...element}) : new BeanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCatchDefinition = (element: any): CatchDefinition => {
        
        const def = element ? new CatchDefinition({...element}) : new CatchDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.onWhen !== undefined) { 
            def.onWhen = CamelDefinitionApi.createWhenDefinition(element.onWhen); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createChoiceDefinition = (element: any): ChoiceDefinition => {
        
        const def = element ? new ChoiceDefinition({...element}) : new ChoiceDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.otherwise !== undefined) { 
            def.otherwise = CamelDefinitionApi.createOtherwiseDefinition(element.otherwise); 
        } 
        def.when = element && element?.when ? element?.when.map((x:any) => CamelDefinitionApi.createWhenDefinition(x)) :[]; 

        return def;
    }

    static createCircuitBreakerDefinition = (element: any): CircuitBreakerDefinition => {
        
        const def = element ? new CircuitBreakerDefinition({...element}) : new CircuitBreakerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.faultToleranceConfiguration !== undefined) { 
            def.faultToleranceConfiguration = CamelDefinitionApi.createFaultToleranceConfigurationDefinition(element.faultToleranceConfiguration); 
        } 
        if (element?.resilience4jConfiguration !== undefined) { 
            def.resilience4jConfiguration = CamelDefinitionApi.createResilience4jConfigurationDefinition(element.resilience4jConfiguration); 
        } 
        if (element?.onFallback !== undefined) { 
            def.onFallback = CamelDefinitionApi.createOnFallbackDefinition(element.onFallback); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createClaimCheckDefinition = (element: any): ClaimCheckDefinition => {
        
        const def = element ? new ClaimCheckDefinition({...element}) : new ClaimCheckDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createContextScanDefinition = (element: any): ContextScanDefinition => {
        
        const def = element ? new ContextScanDefinition({...element}) : new ContextScanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createConvertBodyDefinition = (element: any): ConvertBodyDefinition => {
        if (element && typeof element === 'string') element = {type: element};
        const def = element ? new ConvertBodyDefinition({...element}) : new ConvertBodyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDataFormatDefinition = (element: any): DataFormatDefinition => {
        
        const def = element ? new DataFormatDefinition({...element}) : new DataFormatDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDelayDefinition = (element: any): DelayDefinition => {
        
        const def = element ? new DelayDefinition({...element}) : new DelayDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createDescriptionDefinition = (element: any): DescriptionDefinition => {
        
        const def = element ? new DescriptionDefinition({...element}) : new DescriptionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDynamicRouterDefinition = (element: any): DynamicRouterDefinition => {
        
        const def = element ? new DynamicRouterDefinition({...element}) : new DynamicRouterDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createEnrichDefinition = (element: any): EnrichDefinition => {
        
        const def = element ? new EnrichDefinition({...element}) : new EnrichDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createErrorHandlerDefinition = (element: any): ErrorHandlerDefinition => {
        
        const def = element ? new ErrorHandlerDefinition({...element}) : new ErrorHandlerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.deadLetterChannel !== undefined) { 
            def.deadLetterChannel = CamelDefinitionApi.createDeadLetterChannelDefinition(element.deadLetterChannel); 
        } 
        if (element?.noErrorHandler !== undefined) { 
            def.noErrorHandler = CamelDefinitionApi.createNoErrorHandlerDefinition(element.noErrorHandler); 
        } 
        if (element?.jtaTransactionErrorHandler !== undefined) { 
            def.jtaTransactionErrorHandler = CamelDefinitionApi.createJtaTransactionErrorHandlerDefinition(element.jtaTransactionErrorHandler); 
        } 
        if (element?.defaultErrorHandler !== undefined) { 
            def.defaultErrorHandler = CamelDefinitionApi.createDefaultErrorHandlerDefinition(element.defaultErrorHandler); 
        } 
        if (element?.springTransactionErrorHandler !== undefined) { 
            def.springTransactionErrorHandler = CamelDefinitionApi.createSpringTransactionErrorHandlerDefinition(element.springTransactionErrorHandler); 
        } 

        return def;
    }

    static createExpressionSubElementDefinition = (element: any): ExpressionSubElementDefinition => {
        
        const def = element ? new ExpressionSubElementDefinition({...element}) : new ExpressionSubElementDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.ognl !== undefined) { 
            def.ognl = CamelDefinitionApi.createOgnlExpression(element.ognl); 
        } 
        if (element?.constant !== undefined) { 
            def.constant = CamelDefinitionApi.createConstantExpression(element.constant); 
        } 
        if (element?.mvel !== undefined) { 
            def.mvel = CamelDefinitionApi.createMvelExpression(element.mvel); 
        } 
        if (element?.method !== undefined) { 
            def.method = CamelDefinitionApi.createMethodCallExpression(element.method); 
        } 
        if (element?.xquery !== undefined) { 
            def.xquery = CamelDefinitionApi.createXQueryExpression(element.xquery); 
        } 
        if (element?.datasonnet !== undefined) { 
            def.datasonnet = CamelDefinitionApi.createDatasonnetExpression(element.datasonnet); 
        } 
        if (element?.language !== undefined) { 
            def.language = CamelDefinitionApi.createLanguageExpression(element.language); 
        } 
        if (element?.simple !== undefined) { 
            def.simple = CamelDefinitionApi.createSimpleExpression(element.simple); 
        } 
        if (element?.hl7terser !== undefined) { 
            def.hl7terser = CamelDefinitionApi.createHl7TerserExpression(element.hl7terser); 
        } 
        if (element?.tokenize !== undefined) { 
            def.tokenize = CamelDefinitionApi.createTokenizerExpression(element.tokenize); 
        } 
        if (element?.spel !== undefined) { 
            def.spel = CamelDefinitionApi.createSpELExpression(element.spel); 
        } 
        if (element?.ref !== undefined) { 
            def.ref = CamelDefinitionApi.createRefExpression(element.ref); 
        } 
        if (element?.xpath !== undefined) { 
            def.xpath = CamelDefinitionApi.createXPathExpression(element.xpath); 
        } 
        if (element?.groovy !== undefined) { 
            def.groovy = CamelDefinitionApi.createGroovyExpression(element.groovy); 
        } 
        if (element?.csimple !== undefined) { 
            def.csimple = CamelDefinitionApi.createCSimpleExpression(element.csimple); 
        } 
        if (element?.exchangeProperty !== undefined) { 
            def.exchangeProperty = CamelDefinitionApi.createExchangePropertyExpression(element.exchangeProperty); 
        } 
        if (element?.jsonpath !== undefined) { 
            def.jsonpath = CamelDefinitionApi.createJsonPathExpression(element.jsonpath); 
        } 
        if (element?.header !== undefined) { 
            def.header = CamelDefinitionApi.createHeaderExpression(element.header); 
        } 
        if (element?.joor !== undefined) { 
            def.joor = CamelDefinitionApi.createJoorExpression(element.joor); 
        } 
        if (element?.xtokenize !== undefined) { 
            def.xtokenize = CamelDefinitionApi.createXMLTokenizerExpression(element.xtokenize); 
        } 

        return def;
    }

    static createFaultToleranceConfigurationDefinition = (element: any): FaultToleranceConfigurationDefinition => {
        
        const def = element ? new FaultToleranceConfigurationDefinition({...element}) : new FaultToleranceConfigurationDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createFilterDefinition = (element: any): FilterDefinition => {
        
        const def = element ? new FilterDefinition({...element}) : new FilterDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createFinallyDefinition = (element: any): FinallyDefinition => {
        
        const def = element ? new FinallyDefinition({...element}) : new FinallyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createFromDefinition = (element: any): FromDefinition => {
        if (element && typeof element === 'string') element = { uri: element};
        const def = element ? new FromDefinition({...element}) : new FromDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createGlobalOptionDefinition = (element: any): GlobalOptionDefinition => {
        
        const def = element ? new GlobalOptionDefinition({...element}) : new GlobalOptionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createGlobalOptionsDefinition = (element: any): GlobalOptionsDefinition => {
        
        const def = element ? new GlobalOptionsDefinition({...element}) : new GlobalOptionsDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.globalOption = element && element?.globalOption ? element?.globalOption.map((x:any) => CamelDefinitionApi.createGlobalOptionDefinition(x)) :[]; 

        return def;
    }

    static createIdempotentConsumerDefinition = (element: any): IdempotentConsumerDefinition => {
        
        const def = element ? new IdempotentConsumerDefinition({...element}) : new IdempotentConsumerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createInOnlyDefinition = (element: any): InOnlyDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new InOnlyDefinition({...element}) : new InOnlyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createInOutDefinition = (element: any): InOutDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new InOutDefinition({...element}) : new InOutDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createInputTypeDefinition = (element: any): InputTypeDefinition => {
        
        const def = element ? new InputTypeDefinition({...element}) : new InputTypeDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createInterceptDefinition = (element: any): InterceptDefinition => {
        
        const def = element ? new InterceptDefinition({...element}) : new InterceptDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createInterceptFromDefinition = (element: any): InterceptFromDefinition => {
        
        const def = element ? new InterceptFromDefinition({...element}) : new InterceptFromDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createInterceptSendToEndpointDefinition = (element: any): InterceptSendToEndpointDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new InterceptSendToEndpointDefinition({...element}) : new InterceptSendToEndpointDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createKameletDefinition = (element: any): KameletDefinition => {
        if (element && typeof element === 'string') element = {name: element};
        const def = element ? new KameletDefinition({...element}) : new KameletDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createLoadBalanceDefinition = (element: any): LoadBalanceDefinition => {
        
        const def = element ? new LoadBalanceDefinition({...element}) : new LoadBalanceDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.random !== undefined) { 
            def.random = CamelDefinitionApi.createRandomLoadBalancerDefinition(element.random); 
        } 
        if (element?.customLoadBalancer !== undefined) { 
            def.customLoadBalancer = CamelDefinitionApi.createCustomLoadBalancerDefinition(element.customLoadBalancer); 
        } 
        if (element?.failover !== undefined) { 
            def.failover = CamelDefinitionApi.createFailoverLoadBalancerDefinition(element.failover); 
        } 
        if (element?.sticky !== undefined) { 
            def.sticky = CamelDefinitionApi.createStickyLoadBalancerDefinition(element.sticky); 
        } 
        if (element?.topic !== undefined) { 
            def.topic = CamelDefinitionApi.createTopicLoadBalancerDefinition(element.topic); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);
        if (element?.weighted !== undefined) { 
            def.weighted = CamelDefinitionApi.createWeightedLoadBalancerDefinition(element.weighted); 
        } 
        if (element?.roundRobin !== undefined) { 
            def.roundRobin = CamelDefinitionApi.createRoundRobinLoadBalancerDefinition(element.roundRobin); 
        } 

        return def;
    }

    static createLogDefinition = (element: any): LogDefinition => {
        if (element && typeof element === 'string') element = {message: element};
        const def = element ? new LogDefinition({...element}) : new LogDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createLoopDefinition = (element: any): LoopDefinition => {
        
        const def = element ? new LoopDefinition({...element}) : new LoopDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createMarshalDefinition = (element: any): MarshalDefinition => {
        
        const def = element ? new MarshalDefinition({...element}) : new MarshalDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.univocityCsv !== undefined) { 
            def.univocityCsv = CamelDefinitionApi.createUniVocityCsvDataFormat(element.univocityCsv); 
        } 
        if (element?.protobuf !== undefined) { 
            def.protobuf = CamelDefinitionApi.createProtobufDataFormat(element.protobuf); 
        } 
        if (element?.tarFile !== undefined) { 
            def.tarFile = CamelDefinitionApi.createTarFileDataFormat(element.tarFile); 
        } 
        if (element?.tidyMarkup !== undefined) { 
            def.tidyMarkup = CamelDefinitionApi.createTidyMarkupDataFormat(element.tidyMarkup); 
        } 
        if (element?.csv !== undefined) { 
            def.csv = CamelDefinitionApi.createCsvDataFormat(element.csv); 
        } 
        if (element?.base64 !== undefined) { 
            def.base64 = CamelDefinitionApi.createBase64DataFormat(element.base64); 
        } 
        if (element?.zipDeflater !== undefined) { 
            def.zipDeflater = CamelDefinitionApi.createZipDeflaterDataFormat(element.zipDeflater); 
        } 
        if (element?.bindy !== undefined) { 
            def.bindy = CamelDefinitionApi.createBindyDataFormat(element.bindy); 
        } 
        if (element?.syslog !== undefined) { 
            def.syslog = CamelDefinitionApi.createSyslogDataFormat(element.syslog); 
        } 
        if (element?.zipFile !== undefined) { 
            def.zipFile = CamelDefinitionApi.createZipFileDataFormat(element.zipFile); 
        } 
        if (element?.jaxb !== undefined) { 
            def.jaxb = CamelDefinitionApi.createJaxbDataFormat(element.jaxb); 
        } 
        if (element?.rss !== undefined) { 
            def.rss = CamelDefinitionApi.createRssDataFormat(element.rss); 
        } 
        if (element?.mimeMultipart !== undefined) { 
            def.mimeMultipart = CamelDefinitionApi.createMimeMultipartDataFormat(element.mimeMultipart); 
        } 
        if (element?.asn1 !== undefined) { 
            def.asn1 = CamelDefinitionApi.createASN1DataFormat(element.asn1); 
        } 
        if (element?.pgp !== undefined) { 
            def.pgp = CamelDefinitionApi.createPGPDataFormat(element.pgp); 
        } 
        if (element?.thrift !== undefined) { 
            def.thrift = CamelDefinitionApi.createThriftDataFormat(element.thrift); 
        } 
        if (element?.json !== undefined) { 
            def.json = CamelDefinitionApi.createJsonDataFormat(element.json); 
        } 
        if (element?.lzf !== undefined) { 
            def.lzf = CamelDefinitionApi.createLZFDataFormat(element.lzf); 
        } 
        if (element?.fhirXml !== undefined) { 
            def.fhirXml = CamelDefinitionApi.createFhirXmlDataFormat(element.fhirXml); 
        } 
        if (element?.barcode !== undefined) { 
            def.barcode = CamelDefinitionApi.createBarcodeDataFormat(element.barcode); 
        } 
        if (element?.avro !== undefined) { 
            def.avro = CamelDefinitionApi.createAvroDataFormat(element.avro); 
        } 
        if (element?.yaml !== undefined) { 
            def.yaml = CamelDefinitionApi.createYAMLDataFormat(element.yaml); 
        } 
        if (element?.fhirJson !== undefined) { 
            def.fhirJson = CamelDefinitionApi.createFhirJsonDataFormat(element.fhirJson); 
        } 
        if (element?.any23 !== undefined) { 
            def.any23 = CamelDefinitionApi.createAny23DataFormat(element.any23); 
        } 
        if (element?.custom !== undefined) { 
            def.custom = CamelDefinitionApi.createCustomDataFormat(element.custom); 
        } 
        if (element?.flatpack !== undefined) { 
            def.flatpack = CamelDefinitionApi.createFlatpackDataFormat(element.flatpack); 
        } 
        if (element?.cbor !== undefined) { 
            def.cbor = CamelDefinitionApi.createCBORDataFormat(element.cbor); 
        } 
        if (element?.crypto !== undefined) { 
            def.crypto = CamelDefinitionApi.createCryptoDataFormat(element.crypto); 
        } 
        if (element?.univocityTsv !== undefined) { 
            def.univocityTsv = CamelDefinitionApi.createUniVocityTsvDataFormat(element.univocityTsv); 
        } 
        if (element?.hl7 !== undefined) { 
            def.hl7 = CamelDefinitionApi.createHL7DataFormat(element.hl7); 
        } 
        if (element?.jsonApi !== undefined) { 
            def.jsonApi = CamelDefinitionApi.createJsonApiDataFormat(element.jsonApi); 
        } 
        if (element?.xmlSecurity !== undefined) { 
            def.xmlSecurity = CamelDefinitionApi.createXMLSecurityDataFormat(element.xmlSecurity); 
        } 
        if (element?.ical !== undefined) { 
            def.ical = CamelDefinitionApi.createIcalDataFormat(element.ical); 
        } 
        if (element?.univocityFixed !== undefined) { 
            def.univocityFixed = CamelDefinitionApi.createUniVocityFixedDataFormat(element.univocityFixed); 
        } 
        if (element?.jacksonXml !== undefined) { 
            def.jacksonXml = CamelDefinitionApi.createJacksonXMLDataFormat(element.jacksonXml); 
        } 
        if (element?.grok !== undefined) { 
            def.grok = CamelDefinitionApi.createGrokDataFormat(element.grok); 
        } 
        if (element?.xstream !== undefined) { 
            def.xstream = CamelDefinitionApi.createXStreamDataFormat(element.xstream); 
        } 
        if (element?.gzipDeflater !== undefined) { 
            def.gzipDeflater = CamelDefinitionApi.createGzipDeflaterDataFormat(element.gzipDeflater); 
        } 
        if (element?.soap !== undefined) { 
            def.soap = CamelDefinitionApi.createSoapDataFormat(element.soap); 
        } 

        return def;
    }

    static createMulticastDefinition = (element: any): MulticastDefinition => {
        
        const def = element ? new MulticastDefinition({...element}) : new MulticastDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOnCompletionDefinition = (element: any): OnCompletionDefinition => {
        
        const def = element ? new OnCompletionDefinition({...element}) : new OnCompletionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.onWhen !== undefined) { 
            def.onWhen = CamelDefinitionApi.createWhenDefinition(element.onWhen); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOnExceptionDefinition = (element: any): OnExceptionDefinition => {
        
        const def = element ? new OnExceptionDefinition({...element}) : new OnExceptionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.retryWhile !== undefined) { 
            def.retryWhile = CamelDefinitionApi.createExpressionSubElementDefinition(element.retryWhile); 
        } 
        if (element?.redeliveryPolicy !== undefined) { 
            def.redeliveryPolicy = CamelDefinitionApi.createRedeliveryPolicyDefinition(element.redeliveryPolicy); 
        } 
        if (element?.handled !== undefined) { 
            def.handled = CamelDefinitionApi.createExpressionSubElementDefinition(element.handled); 
        } 
        if (element?.onWhen !== undefined) { 
            def.onWhen = CamelDefinitionApi.createWhenDefinition(element.onWhen); 
        } 
        if (element?.continued !== undefined) { 
            def.continued = CamelDefinitionApi.createExpressionSubElementDefinition(element.continued); 
        } 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOnFallbackDefinition = (element: any): OnFallbackDefinition => {
        
        const def = element ? new OnFallbackDefinition({...element}) : new OnFallbackDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOptimisticLockRetryPolicyDefinition = (element: any): OptimisticLockRetryPolicyDefinition => {
        
        const def = element ? new OptimisticLockRetryPolicyDefinition({...element}) : new OptimisticLockRetryPolicyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createOtherwiseDefinition = (element: any): OtherwiseDefinition => {
        
        const def = element ? new OtherwiseDefinition({...element}) : new OtherwiseDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOutputDefinition = (element: any): OutputDefinition => {
        
        const def = element ? new OutputDefinition({...element}) : new OutputDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createOutputTypeDefinition = (element: any): OutputTypeDefinition => {
        
        const def = element ? new OutputTypeDefinition({...element}) : new OutputTypeDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPackageScanDefinition = (element: any): PackageScanDefinition => {
        
        const def = element ? new PackageScanDefinition({...element}) : new PackageScanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPausableDefinition = (element: any): PausableDefinition => {
        
        const def = element ? new PausableDefinition({...element}) : new PausableDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPipelineDefinition = (element: any): PipelineDefinition => {
        
        const def = element ? new PipelineDefinition({...element}) : new PipelineDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createPolicyDefinition = (element: any): PolicyDefinition => {
        
        const def = element ? new PolicyDefinition({...element}) : new PolicyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createPollEnrichDefinition = (element: any): PollEnrichDefinition => {
        
        const def = element ? new PollEnrichDefinition({...element}) : new PollEnrichDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createProcessDefinition = (element: any): ProcessDefinition => {
        
        const def = element ? new ProcessDefinition({...element}) : new ProcessDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPropertyDefinition = (element: any): PropertyDefinition => {
        
        const def = element ? new PropertyDefinition({...element}) : new PropertyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPropertyExpressionDefinition = (element: any): PropertyExpressionDefinition => {
        
        const def = element ? new PropertyExpressionDefinition({...element}) : new PropertyExpressionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createRecipientListDefinition = (element: any): RecipientListDefinition => {
        
        const def = element ? new RecipientListDefinition({...element}) : new RecipientListDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createRedeliveryPolicyDefinition = (element: any): RedeliveryPolicyDefinition => {
        
        const def = element ? new RedeliveryPolicyDefinition({...element}) : new RedeliveryPolicyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRemoveHeaderDefinition = (element: any): RemoveHeaderDefinition => {
        if (element && typeof element === 'string') element = {name: element};
        const def = element ? new RemoveHeaderDefinition({...element}) : new RemoveHeaderDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRemoveHeadersDefinition = (element: any): RemoveHeadersDefinition => {
        if (element && typeof element === 'string') element = {pattern: element};
        const def = element ? new RemoveHeadersDefinition({...element}) : new RemoveHeadersDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRemovePropertiesDefinition = (element: any): RemovePropertiesDefinition => {
        if (element && typeof element === 'string') element = {pattern: element};
        const def = element ? new RemovePropertiesDefinition({...element}) : new RemovePropertiesDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRemovePropertyDefinition = (element: any): RemovePropertyDefinition => {
        if (element && typeof element === 'string') element = {name: element};
        const def = element ? new RemovePropertyDefinition({...element}) : new RemovePropertyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createResequenceDefinition = (element: any): ResequenceDefinition => {
        
        const def = element ? new ResequenceDefinition({...element}) : new ResequenceDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.streamConfig !== undefined) { 
            def.streamConfig = CamelDefinitionApi.createStreamResequencerConfig(element.streamConfig); 
        } 
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);
        if (element?.batchConfig !== undefined) { 
            def.batchConfig = CamelDefinitionApi.createBatchResequencerConfig(element.batchConfig); 
        } 

        return def;
    }

    static createResilience4jConfigurationDefinition = (element: any): Resilience4jConfigurationDefinition => {
        
        const def = element ? new Resilience4jConfigurationDefinition({...element}) : new Resilience4jConfigurationDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRestContextRefDefinition = (element: any): RestContextRefDefinition => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new RestContextRefDefinition({...element}) : new RestContextRefDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createResumableDefinition = (element: any): ResumableDefinition => {
        
        const def = element ? new ResumableDefinition({...element}) : new ResumableDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRollbackDefinition = (element: any): RollbackDefinition => {
        
        const def = element ? new RollbackDefinition({...element}) : new RollbackDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRouteBuilderDefinition = (element: any): RouteBuilderDefinition => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new RouteBuilderDefinition({...element}) : new RouteBuilderDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRouteConfigurationContextRefDefinition = (element: any): RouteConfigurationContextRefDefinition => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new RouteConfigurationContextRefDefinition({...element}) : new RouteConfigurationContextRefDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRouteConfigurationDefinition = (element: any): RouteConfigurationDefinition => {
        
        const def = element ? new RouteConfigurationDefinition({...element}) : new RouteConfigurationDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.onCompletion = element && element?.onCompletion ? element?.onCompletion.map((x:any) => CamelDefinitionApi.createOnCompletionDefinition(x)) :[]; 
        def.interceptSendToEndpoint = element && element?.interceptSendToEndpoint ? element?.interceptSendToEndpoint.map((x:any) => CamelDefinitionApi.createInterceptSendToEndpointDefinition(x)) :[]; 
        def.intercept = element && element?.intercept ? element?.intercept.map((x:any) => CamelDefinitionApi.createInterceptDefinition(x)) :[]; 
        if (element?.errorHandler !== undefined) { 
            def.errorHandler = CamelDefinitionApi.createErrorHandlerDefinition(element.errorHandler); 
        } 
        def.onException = element && element?.onException ? element?.onException.map((x:any) => CamelDefinitionApi.createOnExceptionDefinition(x)) :[]; 
        def.interceptFrom = element && element?.interceptFrom ? element?.interceptFrom.map((x:any) => CamelDefinitionApi.createInterceptFromDefinition(x)) :[]; 

        return def;
    }

    static createRouteContextRefDefinition = (element: any): RouteContextRefDefinition => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new RouteContextRefDefinition({...element}) : new RouteContextRefDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRouteDefinition = (element: any): RouteDefinition => {
        
        const def = element ? new RouteDefinition({...element}) : new RouteDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.from !== undefined) { 
            def.from = CamelDefinitionApi.createFromDefinition(element.from); 
        } 

        return def;
    }

    static createRouteTemplateBeanDefinition = (element: any): RouteTemplateBeanDefinition => {
        
        const def = element ? new RouteTemplateBeanDefinition({...element}) : new RouteTemplateBeanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.property = element && element?.property ? element?.property.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createRouteTemplateDefinition = (element: any): RouteTemplateDefinition => {
        
        const def = element ? new RouteTemplateDefinition({...element}) : new RouteTemplateDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.beans = element && element?.beans ? element?.beans.map((x:any) => CamelDefinitionApi.createNamedBeanDefinition(x)) :[]; 
        if (element?.from !== undefined) { 
            def.from = CamelDefinitionApi.createFromDefinition(element.from); 
        } 
        def.parameters = element && element?.parameters ? element?.parameters.map((x:any) => CamelDefinitionApi.createRouteTemplateParameterDefinition(x)) :[]; 

        return def;
    }

    static createRouteTemplateParameterDefinition = (element: any): RouteTemplateParameterDefinition => {
        
        const def = element ? new RouteTemplateParameterDefinition({...element}) : new RouteTemplateParameterDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRoutingSlipDefinition = (element: any): RoutingSlipDefinition => {
        
        const def = element ? new RoutingSlipDefinition({...element}) : new RoutingSlipDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSagaActionUriDefinition = (element: any): SagaActionUriDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new SagaActionUriDefinition({...element}) : new SagaActionUriDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSagaDefinition = (element: any): SagaDefinition => {
        
        const def = element ? new SagaDefinition({...element}) : new SagaDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);
        def.option = element && element?.option ? element?.option.map((x:any) => CamelDefinitionApi.createPropertyExpressionDefinition(x)) :[]; 

        return def;
    }

    static createSamplingDefinition = (element: any): SamplingDefinition => {
        
        const def = element ? new SamplingDefinition({...element}) : new SamplingDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createScriptDefinition = (element: any): ScriptDefinition => {
        
        const def = element ? new ScriptDefinition({...element}) : new ScriptDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSetBodyDefinition = (element: any): SetBodyDefinition => {
        
        const def = element ? new SetBodyDefinition({...element}) : new SetBodyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSetExchangePatternDefinition = (element: any): SetExchangePatternDefinition => {
        if (element && typeof element === 'string') element = {pattern: element};
        const def = element ? new SetExchangePatternDefinition({...element}) : new SetExchangePatternDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSetHeaderDefinition = (element: any): SetHeaderDefinition => {
        
        const def = element ? new SetHeaderDefinition({...element}) : new SetHeaderDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSetPropertyDefinition = (element: any): SetPropertyDefinition => {
        
        const def = element ? new SetPropertyDefinition({...element}) : new SetPropertyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSortDefinition = (element: any): SortDefinition => {
        
        const def = element ? new SortDefinition({...element}) : new SortDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createSplitDefinition = (element: any): SplitDefinition => {
        
        const def = element ? new SplitDefinition({...element}) : new SplitDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createStepDefinition = (element: any): StepDefinition => {
        
        const def = element ? new StepDefinition({...element}) : new StepDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createStopDefinition = (element: any): StopDefinition => {
        
        const def = element ? new StopDefinition({...element}) : new StopDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTemplatedRouteBeanDefinition = (element: any): TemplatedRouteBeanDefinition => {
        
        const def = element ? new TemplatedRouteBeanDefinition({...element}) : new TemplatedRouteBeanDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.property = element && element?.property ? element?.property.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createTemplatedRouteDefinition = (element: any): TemplatedRouteDefinition => {
        
        const def = element ? new TemplatedRouteDefinition({...element}) : new TemplatedRouteDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.beans = element && element?.beans ? element?.beans.map((x:any) => CamelDefinitionApi.createNamedBeanDefinition(x)) :[]; 
        def.parameters = element && element?.parameters ? element?.parameters.map((x:any) => CamelDefinitionApi.createTemplatedRouteParameterDefinition(x)) :[]; 

        return def;
    }

    static createTemplatedRouteParameterDefinition = (element: any): TemplatedRouteParameterDefinition => {
        
        const def = element ? new TemplatedRouteParameterDefinition({...element}) : new TemplatedRouteParameterDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createThreadPoolProfileDefinition = (element: any): ThreadPoolProfileDefinition => {
        
        const def = element ? new ThreadPoolProfileDefinition({...element}) : new ThreadPoolProfileDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createThreadsDefinition = (element: any): ThreadsDefinition => {
        
        const def = element ? new ThreadsDefinition({...element}) : new ThreadsDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createThrottleDefinition = (element: any): ThrottleDefinition => {
        
        const def = element ? new ThrottleDefinition({...element}) : new ThrottleDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        if (element?.correlationExpression !== undefined) { 
            def.correlationExpression = CamelDefinitionApi.createExpressionSubElementDefinition(element.correlationExpression); 
        } 

        return def;
    }

    static createThrowExceptionDefinition = (element: any): ThrowExceptionDefinition => {
        
        const def = element ? new ThrowExceptionDefinition({...element}) : new ThrowExceptionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createToDefinition = (element: any): ToDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new ToDefinition({...element}) : new ToDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createToDynamicDefinition = (element: any): ToDynamicDefinition => {
        if (element && typeof element === 'string') element = {uri: element};
        const def = element ? new ToDynamicDefinition({...element}) : new ToDynamicDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTransactedDefinition = (element: any): TransactedDefinition => {
        
        const def = element ? new TransactedDefinition({...element}) : new TransactedDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createTransformDefinition = (element: any): TransformDefinition => {
        
        const def = element ? new TransformDefinition({...element}) : new TransformDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createTryDefinition = (element: any): TryDefinition => {
        
        const def = element ? new TryDefinition({...element}) : new TryDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.doFinally !== undefined) { 
            def.doFinally = CamelDefinitionApi.createFinallyDefinition(element.doFinally); 
        } 
        def.doCatch = element && element?.doCatch ? element?.doCatch.map((x:any) => CamelDefinitionApi.createCatchDefinition(x)) :[]; 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createUnmarshalDefinition = (element: any): UnmarshalDefinition => {
        
        const def = element ? new UnmarshalDefinition({...element}) : new UnmarshalDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.univocityCsv !== undefined) { 
            def.univocityCsv = CamelDefinitionApi.createUniVocityCsvDataFormat(element.univocityCsv); 
        } 
        if (element?.protobuf !== undefined) { 
            def.protobuf = CamelDefinitionApi.createProtobufDataFormat(element.protobuf); 
        } 
        if (element?.tarFile !== undefined) { 
            def.tarFile = CamelDefinitionApi.createTarFileDataFormat(element.tarFile); 
        } 
        if (element?.tidyMarkup !== undefined) { 
            def.tidyMarkup = CamelDefinitionApi.createTidyMarkupDataFormat(element.tidyMarkup); 
        } 
        if (element?.csv !== undefined) { 
            def.csv = CamelDefinitionApi.createCsvDataFormat(element.csv); 
        } 
        if (element?.base64 !== undefined) { 
            def.base64 = CamelDefinitionApi.createBase64DataFormat(element.base64); 
        } 
        if (element?.zipDeflater !== undefined) { 
            def.zipDeflater = CamelDefinitionApi.createZipDeflaterDataFormat(element.zipDeflater); 
        } 
        if (element?.bindy !== undefined) { 
            def.bindy = CamelDefinitionApi.createBindyDataFormat(element.bindy); 
        } 
        if (element?.syslog !== undefined) { 
            def.syslog = CamelDefinitionApi.createSyslogDataFormat(element.syslog); 
        } 
        if (element?.zipFile !== undefined) { 
            def.zipFile = CamelDefinitionApi.createZipFileDataFormat(element.zipFile); 
        } 
        if (element?.jaxb !== undefined) { 
            def.jaxb = CamelDefinitionApi.createJaxbDataFormat(element.jaxb); 
        } 
        if (element?.rss !== undefined) { 
            def.rss = CamelDefinitionApi.createRssDataFormat(element.rss); 
        } 
        if (element?.mimeMultipart !== undefined) { 
            def.mimeMultipart = CamelDefinitionApi.createMimeMultipartDataFormat(element.mimeMultipart); 
        } 
        if (element?.asn1 !== undefined) { 
            def.asn1 = CamelDefinitionApi.createASN1DataFormat(element.asn1); 
        } 
        if (element?.pgp !== undefined) { 
            def.pgp = CamelDefinitionApi.createPGPDataFormat(element.pgp); 
        } 
        if (element?.thrift !== undefined) { 
            def.thrift = CamelDefinitionApi.createThriftDataFormat(element.thrift); 
        } 
        if (element?.json !== undefined) { 
            def.json = CamelDefinitionApi.createJsonDataFormat(element.json); 
        } 
        if (element?.lzf !== undefined) { 
            def.lzf = CamelDefinitionApi.createLZFDataFormat(element.lzf); 
        } 
        if (element?.fhirXml !== undefined) { 
            def.fhirXml = CamelDefinitionApi.createFhirXmlDataFormat(element.fhirXml); 
        } 
        if (element?.barcode !== undefined) { 
            def.barcode = CamelDefinitionApi.createBarcodeDataFormat(element.barcode); 
        } 
        if (element?.avro !== undefined) { 
            def.avro = CamelDefinitionApi.createAvroDataFormat(element.avro); 
        } 
        if (element?.yaml !== undefined) { 
            def.yaml = CamelDefinitionApi.createYAMLDataFormat(element.yaml); 
        } 
        if (element?.fhirJson !== undefined) { 
            def.fhirJson = CamelDefinitionApi.createFhirJsonDataFormat(element.fhirJson); 
        } 
        if (element?.any23 !== undefined) { 
            def.any23 = CamelDefinitionApi.createAny23DataFormat(element.any23); 
        } 
        if (element?.custom !== undefined) { 
            def.custom = CamelDefinitionApi.createCustomDataFormat(element.custom); 
        } 
        if (element?.flatpack !== undefined) { 
            def.flatpack = CamelDefinitionApi.createFlatpackDataFormat(element.flatpack); 
        } 
        if (element?.cbor !== undefined) { 
            def.cbor = CamelDefinitionApi.createCBORDataFormat(element.cbor); 
        } 
        if (element?.crypto !== undefined) { 
            def.crypto = CamelDefinitionApi.createCryptoDataFormat(element.crypto); 
        } 
        if (element?.univocityTsv !== undefined) { 
            def.univocityTsv = CamelDefinitionApi.createUniVocityTsvDataFormat(element.univocityTsv); 
        } 
        if (element?.hl7 !== undefined) { 
            def.hl7 = CamelDefinitionApi.createHL7DataFormat(element.hl7); 
        } 
        if (element?.jsonApi !== undefined) { 
            def.jsonApi = CamelDefinitionApi.createJsonApiDataFormat(element.jsonApi); 
        } 
        if (element?.xmlSecurity !== undefined) { 
            def.xmlSecurity = CamelDefinitionApi.createXMLSecurityDataFormat(element.xmlSecurity); 
        } 
        if (element?.ical !== undefined) { 
            def.ical = CamelDefinitionApi.createIcalDataFormat(element.ical); 
        } 
        if (element?.univocityFixed !== undefined) { 
            def.univocityFixed = CamelDefinitionApi.createUniVocityFixedDataFormat(element.univocityFixed); 
        } 
        if (element?.jacksonXml !== undefined) { 
            def.jacksonXml = CamelDefinitionApi.createJacksonXMLDataFormat(element.jacksonXml); 
        } 
        if (element?.grok !== undefined) { 
            def.grok = CamelDefinitionApi.createGrokDataFormat(element.grok); 
        } 
        if (element?.xstream !== undefined) { 
            def.xstream = CamelDefinitionApi.createXStreamDataFormat(element.xstream); 
        } 
        if (element?.gzipDeflater !== undefined) { 
            def.gzipDeflater = CamelDefinitionApi.createGzipDeflaterDataFormat(element.gzipDeflater); 
        } 
        if (element?.soap !== undefined) { 
            def.soap = CamelDefinitionApi.createSoapDataFormat(element.soap); 
        } 

        return def;
    }

    static createValidateDefinition = (element: any): ValidateDefinition => {
        
        const def = element ? new ValidateDefinition({...element}) : new ValidateDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createWhenDefinition = (element: any): WhenDefinition => {
        
        const def = element ? new WhenDefinition({...element}) : new WhenDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createWhenSkipSendToEndpointDefinition = (element: any): WhenSkipSendToEndpointDefinition => {
        
        const def = element ? new WhenSkipSendToEndpointDefinition({...element}) : new WhenSkipSendToEndpointDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 
        def.steps = CamelDefinitionApi.createSteps(element?.steps);

        return def;
    }

    static createWireTapDefinition = (element: any): WireTapDefinition => {
        
        const def = element ? new WireTapDefinition({...element}) : new WireTapDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBlacklistServiceCallServiceFilterConfiguration = (element: any): BlacklistServiceCallServiceFilterConfiguration => {
        
        const def = element ? new BlacklistServiceCallServiceFilterConfiguration({...element}) : new BlacklistServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createCachingServiceCallServiceDiscoveryConfiguration = (element: any): CachingServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new CachingServiceCallServiceDiscoveryConfiguration({...element}) : new CachingServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.dnsServiceDiscovery !== undefined) { 
            def.dnsServiceDiscovery = CamelDefinitionApi.createDnsServiceCallServiceDiscoveryConfiguration(element.dnsServiceDiscovery); 
        } 
        if (element?.kubernetesServiceDiscovery !== undefined) { 
            def.kubernetesServiceDiscovery = CamelDefinitionApi.createKubernetesServiceCallServiceDiscoveryConfiguration(element.kubernetesServiceDiscovery); 
        } 
        if (element?.consulServiceDiscovery !== undefined) { 
            def.consulServiceDiscovery = CamelDefinitionApi.createConsulServiceCallServiceDiscoveryConfiguration(element.consulServiceDiscovery); 
        } 
        if (element?.staticServiceDiscovery !== undefined) { 
            def.staticServiceDiscovery = CamelDefinitionApi.createStaticServiceCallServiceDiscoveryConfiguration(element.staticServiceDiscovery); 
        } 
        if (element?.combinedServiceDiscovery !== undefined) { 
            def.combinedServiceDiscovery = CamelDefinitionApi.createCombinedServiceCallServiceDiscoveryConfiguration(element.combinedServiceDiscovery); 
        } 
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createCombinedServiceCallServiceDiscoveryConfiguration = (element: any): CombinedServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new CombinedServiceCallServiceDiscoveryConfiguration({...element}) : new CombinedServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.cachingServiceDiscovery !== undefined) { 
            def.cachingServiceDiscovery = CamelDefinitionApi.createCachingServiceCallServiceDiscoveryConfiguration(element.cachingServiceDiscovery); 
        } 
        if (element?.dnsServiceDiscovery !== undefined) { 
            def.dnsServiceDiscovery = CamelDefinitionApi.createDnsServiceCallServiceDiscoveryConfiguration(element.dnsServiceDiscovery); 
        } 
        if (element?.kubernetesServiceDiscovery !== undefined) { 
            def.kubernetesServiceDiscovery = CamelDefinitionApi.createKubernetesServiceCallServiceDiscoveryConfiguration(element.kubernetesServiceDiscovery); 
        } 
        if (element?.consulServiceDiscovery !== undefined) { 
            def.consulServiceDiscovery = CamelDefinitionApi.createConsulServiceCallServiceDiscoveryConfiguration(element.consulServiceDiscovery); 
        } 
        if (element?.staticServiceDiscovery !== undefined) { 
            def.staticServiceDiscovery = CamelDefinitionApi.createStaticServiceCallServiceDiscoveryConfiguration(element.staticServiceDiscovery); 
        } 
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createCombinedServiceCallServiceFilterConfiguration = (element: any): CombinedServiceCallServiceFilterConfiguration => {
        
        const def = element ? new CombinedServiceCallServiceFilterConfiguration({...element}) : new CombinedServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.blacklistServiceFilter !== undefined) { 
            def.blacklistServiceFilter = CamelDefinitionApi.createBlacklistServiceCallServiceFilterConfiguration(element.blacklistServiceFilter); 
        } 
        if (element?.passThroughServiceFilter !== undefined) { 
            def.passThroughServiceFilter = CamelDefinitionApi.createPassThroughServiceCallServiceFilterConfiguration(element.passThroughServiceFilter); 
        } 
        if (element?.healthyServiceFilter !== undefined) { 
            def.healthyServiceFilter = CamelDefinitionApi.createHealthyServiceCallServiceFilterConfiguration(element.healthyServiceFilter); 
        } 
        if (element?.customServiceFilter !== undefined) { 
            def.customServiceFilter = CamelDefinitionApi.createCustomServiceCallServiceFilterConfiguration(element.customServiceFilter); 
        } 
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createConsulServiceCallServiceDiscoveryConfiguration = (element: any): ConsulServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new ConsulServiceCallServiceDiscoveryConfiguration({...element}) : new ConsulServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createCustomServiceCallServiceFilterConfiguration = (element: any): CustomServiceCallServiceFilterConfiguration => {
        
        const def = element ? new CustomServiceCallServiceFilterConfiguration({...element}) : new CustomServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createDefaultServiceCallServiceLoadBalancerConfiguration = (element: any): DefaultServiceCallServiceLoadBalancerConfiguration => {
        
        const def = element ? new DefaultServiceCallServiceLoadBalancerConfiguration({...element}) : new DefaultServiceCallServiceLoadBalancerConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createDnsServiceCallServiceDiscoveryConfiguration = (element: any): DnsServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new DnsServiceCallServiceDiscoveryConfiguration({...element}) : new DnsServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createHealthyServiceCallServiceFilterConfiguration = (element: any): HealthyServiceCallServiceFilterConfiguration => {
        
        const def = element ? new HealthyServiceCallServiceFilterConfiguration({...element}) : new HealthyServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createKubernetesServiceCallServiceDiscoveryConfiguration = (element: any): KubernetesServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new KubernetesServiceCallServiceDiscoveryConfiguration({...element}) : new KubernetesServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createPassThroughServiceCallServiceFilterConfiguration = (element: any): PassThroughServiceCallServiceFilterConfiguration => {
        
        const def = element ? new PassThroughServiceCallServiceFilterConfiguration({...element}) : new PassThroughServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createServiceCallConfigurationDefinition = (element: any): ServiceCallConfigurationDefinition => {
        
        const def = element ? new ServiceCallConfigurationDefinition({...element}) : new ServiceCallConfigurationDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.defaultLoadBalancer !== undefined) { 
            def.defaultLoadBalancer = CamelDefinitionApi.createDefaultServiceCallServiceLoadBalancerConfiguration(element.defaultLoadBalancer); 
        } 
        if (element?.expression !== undefined) { 
            def.expression = CamelDefinitionApi.createServiceCallExpressionConfiguration(element.expression); 
        } 
        if (element?.kubernetesServiceDiscovery !== undefined) { 
            def.kubernetesServiceDiscovery = CamelDefinitionApi.createKubernetesServiceCallServiceDiscoveryConfiguration(element.kubernetesServiceDiscovery); 
        } 
        if (element?.customServiceFilter !== undefined) { 
            def.customServiceFilter = CamelDefinitionApi.createCustomServiceCallServiceFilterConfiguration(element.customServiceFilter); 
        } 
        if (element?.zookeeperServiceDiscovery !== undefined) { 
            def.zookeeperServiceDiscovery = CamelDefinitionApi.createZooKeeperServiceCallServiceDiscoveryConfiguration(element.zookeeperServiceDiscovery); 
        } 
        if (element?.blacklistServiceFilter !== undefined) { 
            def.blacklistServiceFilter = CamelDefinitionApi.createBlacklistServiceCallServiceFilterConfiguration(element.blacklistServiceFilter); 
        } 
        if (element?.passThroughServiceFilter !== undefined) { 
            def.passThroughServiceFilter = CamelDefinitionApi.createPassThroughServiceCallServiceFilterConfiguration(element.passThroughServiceFilter); 
        } 
        if (element?.cachingServiceDiscovery !== undefined) { 
            def.cachingServiceDiscovery = CamelDefinitionApi.createCachingServiceCallServiceDiscoveryConfiguration(element.cachingServiceDiscovery); 
        } 
        if (element?.dnsServiceDiscovery !== undefined) { 
            def.dnsServiceDiscovery = CamelDefinitionApi.createDnsServiceCallServiceDiscoveryConfiguration(element.dnsServiceDiscovery); 
        } 
        if (element?.healthyServiceFilter !== undefined) { 
            def.healthyServiceFilter = CamelDefinitionApi.createHealthyServiceCallServiceFilterConfiguration(element.healthyServiceFilter); 
        } 
        if (element?.combinedServiceFilter !== undefined) { 
            def.combinedServiceFilter = CamelDefinitionApi.createCombinedServiceCallServiceFilterConfiguration(element.combinedServiceFilter); 
        } 
        if (element?.consulServiceDiscovery !== undefined) { 
            def.consulServiceDiscovery = CamelDefinitionApi.createConsulServiceCallServiceDiscoveryConfiguration(element.consulServiceDiscovery); 
        } 
        if (element?.staticServiceDiscovery !== undefined) { 
            def.staticServiceDiscovery = CamelDefinitionApi.createStaticServiceCallServiceDiscoveryConfiguration(element.staticServiceDiscovery); 
        } 
        if (element?.combinedServiceDiscovery !== undefined) { 
            def.combinedServiceDiscovery = CamelDefinitionApi.createCombinedServiceCallServiceDiscoveryConfiguration(element.combinedServiceDiscovery); 
        } 

        return def;
    }

    static createServiceCallDefinition = (element: any): ServiceCallDefinition => {
        if (element && typeof element === 'string') element = {name: element};
        const def = element ? new ServiceCallDefinition({...element}) : new ServiceCallDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.defaultLoadBalancer !== undefined) { 
            def.defaultLoadBalancer = CamelDefinitionApi.createDefaultServiceCallServiceLoadBalancerConfiguration(element.defaultLoadBalancer); 
        } 
        if (element?.expression !== undefined) { 
            def.expression = CamelDefinitionApi.createServiceCallExpressionConfiguration(element.expression); 
        } 
        if (element?.kubernetesServiceDiscovery !== undefined) { 
            def.kubernetesServiceDiscovery = CamelDefinitionApi.createKubernetesServiceCallServiceDiscoveryConfiguration(element.kubernetesServiceDiscovery); 
        } 
        if (element?.customServiceFilter !== undefined) { 
            def.customServiceFilter = CamelDefinitionApi.createCustomServiceCallServiceFilterConfiguration(element.customServiceFilter); 
        } 
        if (element?.zookeeperServiceDiscovery !== undefined) { 
            def.zookeeperServiceDiscovery = CamelDefinitionApi.createZooKeeperServiceCallServiceDiscoveryConfiguration(element.zookeeperServiceDiscovery); 
        } 
        if (element?.blacklistServiceFilter !== undefined) { 
            def.blacklistServiceFilter = CamelDefinitionApi.createBlacklistServiceCallServiceFilterConfiguration(element.blacklistServiceFilter); 
        } 
        if (element?.passThroughServiceFilter !== undefined) { 
            def.passThroughServiceFilter = CamelDefinitionApi.createPassThroughServiceCallServiceFilterConfiguration(element.passThroughServiceFilter); 
        } 
        if (element?.cachingServiceDiscovery !== undefined) { 
            def.cachingServiceDiscovery = CamelDefinitionApi.createCachingServiceCallServiceDiscoveryConfiguration(element.cachingServiceDiscovery); 
        } 
        if (element?.dnsServiceDiscovery !== undefined) { 
            def.dnsServiceDiscovery = CamelDefinitionApi.createDnsServiceCallServiceDiscoveryConfiguration(element.dnsServiceDiscovery); 
        } 
        if (element?.healthyServiceFilter !== undefined) { 
            def.healthyServiceFilter = CamelDefinitionApi.createHealthyServiceCallServiceFilterConfiguration(element.healthyServiceFilter); 
        } 
        if (element?.combinedServiceFilter !== undefined) { 
            def.combinedServiceFilter = CamelDefinitionApi.createCombinedServiceCallServiceFilterConfiguration(element.combinedServiceFilter); 
        } 
        if (element?.consulServiceDiscovery !== undefined) { 
            def.consulServiceDiscovery = CamelDefinitionApi.createConsulServiceCallServiceDiscoveryConfiguration(element.consulServiceDiscovery); 
        } 
        if (element?.staticServiceDiscovery !== undefined) { 
            def.staticServiceDiscovery = CamelDefinitionApi.createStaticServiceCallServiceDiscoveryConfiguration(element.staticServiceDiscovery); 
        } 
        if (element?.combinedServiceDiscovery !== undefined) { 
            def.combinedServiceDiscovery = CamelDefinitionApi.createCombinedServiceCallServiceDiscoveryConfiguration(element.combinedServiceDiscovery); 
        } 

        return def;
    }

    static createServiceCallExpressionConfiguration = (element: any): ServiceCallExpressionConfiguration => {
        
        const def = element ? new ServiceCallExpressionConfiguration({...element}) : new ServiceCallExpressionConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expressionType = CamelDefinitionApi.createExpressionDefinition(element.expressionType); 
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createServiceCallServiceChooserConfiguration = (element: any): ServiceCallServiceChooserConfiguration => {
        
        const def = element ? new ServiceCallServiceChooserConfiguration({...element}) : new ServiceCallServiceChooserConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createServiceCallServiceDiscoveryConfiguration = (element: any): ServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new ServiceCallServiceDiscoveryConfiguration({...element}) : new ServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createServiceCallServiceFilterConfiguration = (element: any): ServiceCallServiceFilterConfiguration => {
        
        const def = element ? new ServiceCallServiceFilterConfiguration({...element}) : new ServiceCallServiceFilterConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createServiceCallServiceLoadBalancerConfiguration = (element: any): ServiceCallServiceLoadBalancerConfiguration => {
        
        const def = element ? new ServiceCallServiceLoadBalancerConfiguration({...element}) : new ServiceCallServiceLoadBalancerConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createStaticServiceCallServiceDiscoveryConfiguration = (element: any): StaticServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new StaticServiceCallServiceDiscoveryConfiguration({...element}) : new StaticServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createZooKeeperServiceCallServiceDiscoveryConfiguration = (element: any): ZooKeeperServiceCallServiceDiscoveryConfiguration => {
        
        const def = element ? new ZooKeeperServiceCallServiceDiscoveryConfiguration({...element}) : new ZooKeeperServiceCallServiceDiscoveryConfiguration();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.properties = element && element?.properties ? element?.properties.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createBatchResequencerConfig = (element: any): BatchResequencerConfig => {
        
        const def = element ? new BatchResequencerConfig({...element}) : new BatchResequencerConfig();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createStreamResequencerConfig = (element: any): StreamResequencerConfig => {
        
        const def = element ? new StreamResequencerConfig({...element}) : new StreamResequencerConfig();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createASN1DataFormat = (element: any): ASN1DataFormat => {
        
        const def = element ? new ASN1DataFormat({...element}) : new ASN1DataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createAny23DataFormat = (element: any): Any23DataFormat => {
        
        const def = element ? new Any23DataFormat({...element}) : new Any23DataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.configuration = element && element?.configuration ? element?.configuration.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createAvroDataFormat = (element: any): AvroDataFormat => {
        
        const def = element ? new AvroDataFormat({...element}) : new AvroDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBarcodeDataFormat = (element: any): BarcodeDataFormat => {
        
        const def = element ? new BarcodeDataFormat({...element}) : new BarcodeDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBase64DataFormat = (element: any): Base64DataFormat => {
        
        const def = element ? new Base64DataFormat({...element}) : new Base64DataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBindyDataFormat = (element: any): BindyDataFormat => {
        
        const def = element ? new BindyDataFormat({...element}) : new BindyDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCBORDataFormat = (element: any): CBORDataFormat => {
        
        const def = element ? new CBORDataFormat({...element}) : new CBORDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCryptoDataFormat = (element: any): CryptoDataFormat => {
        
        const def = element ? new CryptoDataFormat({...element}) : new CryptoDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCsvDataFormat = (element: any): CsvDataFormat => {
        
        const def = element ? new CsvDataFormat({...element}) : new CsvDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCustomDataFormat = (element: any): CustomDataFormat => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new CustomDataFormat({...element}) : new CustomDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDataFormatsDefinition = (element: any): DataFormatsDefinition => {
        
        const def = element ? new DataFormatsDefinition({...element}) : new DataFormatsDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.univocityCsv !== undefined) { 
            def.univocityCsv = CamelDefinitionApi.createUniVocityCsvDataFormat(element.univocityCsv); 
        } 
        if (element?.protobuf !== undefined) { 
            def.protobuf = CamelDefinitionApi.createProtobufDataFormat(element.protobuf); 
        } 
        if (element?.tarFile !== undefined) { 
            def.tarFile = CamelDefinitionApi.createTarFileDataFormat(element.tarFile); 
        } 
        if (element?.tidyMarkup !== undefined) { 
            def.tidyMarkup = CamelDefinitionApi.createTidyMarkupDataFormat(element.tidyMarkup); 
        } 
        if (element?.csv !== undefined) { 
            def.csv = CamelDefinitionApi.createCsvDataFormat(element.csv); 
        } 
        if (element?.base64 !== undefined) { 
            def.base64 = CamelDefinitionApi.createBase64DataFormat(element.base64); 
        } 
        if (element?.zipDeflater !== undefined) { 
            def.zipDeflater = CamelDefinitionApi.createZipDeflaterDataFormat(element.zipDeflater); 
        } 
        if (element?.bindy !== undefined) { 
            def.bindy = CamelDefinitionApi.createBindyDataFormat(element.bindy); 
        } 
        if (element?.syslog !== undefined) { 
            def.syslog = CamelDefinitionApi.createSyslogDataFormat(element.syslog); 
        } 
        if (element?.zipFile !== undefined) { 
            def.zipFile = CamelDefinitionApi.createZipFileDataFormat(element.zipFile); 
        } 
        if (element?.jaxb !== undefined) { 
            def.jaxb = CamelDefinitionApi.createJaxbDataFormat(element.jaxb); 
        } 
        if (element?.rss !== undefined) { 
            def.rss = CamelDefinitionApi.createRssDataFormat(element.rss); 
        } 
        if (element?.mimeMultipart !== undefined) { 
            def.mimeMultipart = CamelDefinitionApi.createMimeMultipartDataFormat(element.mimeMultipart); 
        } 
        if (element?.asn1 !== undefined) { 
            def.asn1 = CamelDefinitionApi.createASN1DataFormat(element.asn1); 
        } 
        if (element?.pgp !== undefined) { 
            def.pgp = CamelDefinitionApi.createPGPDataFormat(element.pgp); 
        } 
        if (element?.thrift !== undefined) { 
            def.thrift = CamelDefinitionApi.createThriftDataFormat(element.thrift); 
        } 
        if (element?.json !== undefined) { 
            def.json = CamelDefinitionApi.createJsonDataFormat(element.json); 
        } 
        if (element?.lzf !== undefined) { 
            def.lzf = CamelDefinitionApi.createLZFDataFormat(element.lzf); 
        } 
        if (element?.fhirXml !== undefined) { 
            def.fhirXml = CamelDefinitionApi.createFhirXmlDataFormat(element.fhirXml); 
        } 
        if (element?.barcode !== undefined) { 
            def.barcode = CamelDefinitionApi.createBarcodeDataFormat(element.barcode); 
        } 
        if (element?.avro !== undefined) { 
            def.avro = CamelDefinitionApi.createAvroDataFormat(element.avro); 
        } 
        if (element?.yaml !== undefined) { 
            def.yaml = CamelDefinitionApi.createYAMLDataFormat(element.yaml); 
        } 
        if (element?.fhirJson !== undefined) { 
            def.fhirJson = CamelDefinitionApi.createFhirJsonDataFormat(element.fhirJson); 
        } 
        if (element?.any23 !== undefined) { 
            def.any23 = CamelDefinitionApi.createAny23DataFormat(element.any23); 
        } 
        if (element?.custom !== undefined) { 
            def.custom = CamelDefinitionApi.createCustomDataFormat(element.custom); 
        } 
        if (element?.flatpack !== undefined) { 
            def.flatpack = CamelDefinitionApi.createFlatpackDataFormat(element.flatpack); 
        } 
        if (element?.cbor !== undefined) { 
            def.cbor = CamelDefinitionApi.createCBORDataFormat(element.cbor); 
        } 
        if (element?.crypto !== undefined) { 
            def.crypto = CamelDefinitionApi.createCryptoDataFormat(element.crypto); 
        } 
        if (element?.univocityTsv !== undefined) { 
            def.univocityTsv = CamelDefinitionApi.createUniVocityTsvDataFormat(element.univocityTsv); 
        } 
        if (element?.hl7 !== undefined) { 
            def.hl7 = CamelDefinitionApi.createHL7DataFormat(element.hl7); 
        } 
        if (element?.jsonApi !== undefined) { 
            def.jsonApi = CamelDefinitionApi.createJsonApiDataFormat(element.jsonApi); 
        } 
        if (element?.xmlSecurity !== undefined) { 
            def.xmlSecurity = CamelDefinitionApi.createXMLSecurityDataFormat(element.xmlSecurity); 
        } 
        if (element?.ical !== undefined) { 
            def.ical = CamelDefinitionApi.createIcalDataFormat(element.ical); 
        } 
        if (element?.univocityFixed !== undefined) { 
            def.univocityFixed = CamelDefinitionApi.createUniVocityFixedDataFormat(element.univocityFixed); 
        } 
        if (element?.jacksonXml !== undefined) { 
            def.jacksonXml = CamelDefinitionApi.createJacksonXMLDataFormat(element.jacksonXml); 
        } 
        if (element?.grok !== undefined) { 
            def.grok = CamelDefinitionApi.createGrokDataFormat(element.grok); 
        } 
        if (element?.xstream !== undefined) { 
            def.xstream = CamelDefinitionApi.createXStreamDataFormat(element.xstream); 
        } 
        if (element?.gzipDeflater !== undefined) { 
            def.gzipDeflater = CamelDefinitionApi.createGzipDeflaterDataFormat(element.gzipDeflater); 
        } 
        if (element?.soap !== undefined) { 
            def.soap = CamelDefinitionApi.createSoapDataFormat(element.soap); 
        } 

        return def;
    }

    static createFhirJsonDataFormat = (element: any): FhirJsonDataFormat => {
        
        const def = element ? new FhirJsonDataFormat({...element}) : new FhirJsonDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createFhirXmlDataFormat = (element: any): FhirXmlDataFormat => {
        
        const def = element ? new FhirXmlDataFormat({...element}) : new FhirXmlDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createFlatpackDataFormat = (element: any): FlatpackDataFormat => {
        
        const def = element ? new FlatpackDataFormat({...element}) : new FlatpackDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createGrokDataFormat = (element: any): GrokDataFormat => {
        
        const def = element ? new GrokDataFormat({...element}) : new GrokDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createGzipDeflaterDataFormat = (element: any): GzipDeflaterDataFormat => {
        
        const def = element ? new GzipDeflaterDataFormat({...element}) : new GzipDeflaterDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createHL7DataFormat = (element: any): HL7DataFormat => {
        
        const def = element ? new HL7DataFormat({...element}) : new HL7DataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createIcalDataFormat = (element: any): IcalDataFormat => {
        
        const def = element ? new IcalDataFormat({...element}) : new IcalDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJacksonXMLDataFormat = (element: any): JacksonXMLDataFormat => {
        
        const def = element ? new JacksonXMLDataFormat({...element}) : new JacksonXMLDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJaxbDataFormat = (element: any): JaxbDataFormat => {
        
        const def = element ? new JaxbDataFormat({...element}) : new JaxbDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJsonApiDataFormat = (element: any): JsonApiDataFormat => {
        
        const def = element ? new JsonApiDataFormat({...element}) : new JsonApiDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJsonDataFormat = (element: any): JsonDataFormat => {
        
        const def = element ? new JsonDataFormat({...element}) : new JsonDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createLZFDataFormat = (element: any): LZFDataFormat => {
        
        const def = element ? new LZFDataFormat({...element}) : new LZFDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createMimeMultipartDataFormat = (element: any): MimeMultipartDataFormat => {
        
        const def = element ? new MimeMultipartDataFormat({...element}) : new MimeMultipartDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPGPDataFormat = (element: any): PGPDataFormat => {
        
        const def = element ? new PGPDataFormat({...element}) : new PGPDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createProtobufDataFormat = (element: any): ProtobufDataFormat => {
        
        const def = element ? new ProtobufDataFormat({...element}) : new ProtobufDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRssDataFormat = (element: any): RssDataFormat => {
        
        const def = element ? new RssDataFormat({...element}) : new RssDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSoapDataFormat = (element: any): SoapDataFormat => {
        if (element && typeof element === 'string') element = {contextPath: element};
        const def = element ? new SoapDataFormat({...element}) : new SoapDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSyslogDataFormat = (element: any): SyslogDataFormat => {
        
        const def = element ? new SyslogDataFormat({...element}) : new SyslogDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTarFileDataFormat = (element: any): TarFileDataFormat => {
        
        const def = element ? new TarFileDataFormat({...element}) : new TarFileDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createThriftDataFormat = (element: any): ThriftDataFormat => {
        
        const def = element ? new ThriftDataFormat({...element}) : new ThriftDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTidyMarkupDataFormat = (element: any): TidyMarkupDataFormat => {
        
        const def = element ? new TidyMarkupDataFormat({...element}) : new TidyMarkupDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createUniVocityCsvDataFormat = (element: any): UniVocityCsvDataFormat => {
        
        const def = element ? new UniVocityCsvDataFormat({...element}) : new UniVocityCsvDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.univocityHeader = element && element?.univocityHeader ? element?.univocityHeader.map((x:any) => CamelDefinitionApi.createUniVocityHeader(x)) :[]; 

        return def;
    }

    static createUniVocityFixedDataFormat = (element: any): UniVocityFixedDataFormat => {
        
        const def = element ? new UniVocityFixedDataFormat({...element}) : new UniVocityFixedDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.univocityHeader = element && element?.univocityHeader ? element?.univocityHeader.map((x:any) => CamelDefinitionApi.createUniVocityHeader(x)) :[]; 

        return def;
    }

    static createUniVocityHeader = (element: any): UniVocityHeader => {
        
        const def = element ? new UniVocityHeader({...element}) : new UniVocityHeader();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createUniVocityTsvDataFormat = (element: any): UniVocityTsvDataFormat => {
        
        const def = element ? new UniVocityTsvDataFormat({...element}) : new UniVocityTsvDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.univocityHeader = element && element?.univocityHeader ? element?.univocityHeader.map((x:any) => CamelDefinitionApi.createUniVocityHeader(x)) :[]; 

        return def;
    }

    static createXMLSecurityDataFormat = (element: any): XMLSecurityDataFormat => {
        
        const def = element ? new XMLSecurityDataFormat({...element}) : new XMLSecurityDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createXStreamDataFormat = (element: any): XStreamDataFormat => {
        
        const def = element ? new XStreamDataFormat({...element}) : new XStreamDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.omitFields = element && element?.omitFields ? element?.omitFields.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 
        def.aliases = element && element?.aliases ? element?.aliases.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 
        def.implicitCollections = element && element?.implicitCollections ? element?.implicitCollections.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 
        def.converters = element && element?.converters ? element?.converters.map((x:any) => CamelDefinitionApi.createPropertyDefinition(x)) :[]; 

        return def;
    }

    static createYAMLDataFormat = (element: any): YAMLDataFormat => {
        
        const def = element ? new YAMLDataFormat({...element}) : new YAMLDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.typeFilter = element && element?.typeFilter ? element?.typeFilter.map((x:any) => CamelDefinitionApi.createYAMLTypeFilterDefinition(x)) :[]; 

        return def;
    }

    static createYAMLTypeFilterDefinition = (element: any): YAMLTypeFilterDefinition => {
        
        const def = element ? new YAMLTypeFilterDefinition({...element}) : new YAMLTypeFilterDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createZipDeflaterDataFormat = (element: any): ZipDeflaterDataFormat => {
        
        const def = element ? new ZipDeflaterDataFormat({...element}) : new ZipDeflaterDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createZipFileDataFormat = (element: any): ZipFileDataFormat => {
        
        const def = element ? new ZipFileDataFormat({...element}) : new ZipFileDataFormat();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDeadLetterChannelDefinition = (element: any): DeadLetterChannelDefinition => {
        
        const def = element ? new DeadLetterChannelDefinition({...element}) : new DeadLetterChannelDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.redeliveryPolicy !== undefined) { 
            def.redeliveryPolicy = CamelDefinitionApi.createRedeliveryPolicyDefinition(element.redeliveryPolicy); 
        } 

        return def;
    }

    static createDefaultErrorHandlerDefinition = (element: any): DefaultErrorHandlerDefinition => {
        
        const def = element ? new DefaultErrorHandlerDefinition({...element}) : new DefaultErrorHandlerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.redeliveryPolicy !== undefined) { 
            def.redeliveryPolicy = CamelDefinitionApi.createRedeliveryPolicyDefinition(element.redeliveryPolicy); 
        } 

        return def;
    }

    static createErrorHandlerRefDefinition = (element: any): ErrorHandlerRefDefinition => {
        
        const def = element ? new ErrorHandlerRefDefinition({...element}) : new ErrorHandlerRefDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJtaTransactionErrorHandlerDefinition = (element: any): JtaTransactionErrorHandlerDefinition => {
        
        const def = element ? new JtaTransactionErrorHandlerDefinition({...element}) : new JtaTransactionErrorHandlerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.redeliveryPolicy !== undefined) { 
            def.redeliveryPolicy = CamelDefinitionApi.createRedeliveryPolicyDefinition(element.redeliveryPolicy); 
        } 

        return def;
    }

    static createNoErrorHandlerDefinition = (element: any): NoErrorHandlerDefinition => {
        
        const def = element ? new NoErrorHandlerDefinition({...element}) : new NoErrorHandlerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSpringTransactionErrorHandlerDefinition = (element: any): SpringTransactionErrorHandlerDefinition => {
        
        const def = element ? new SpringTransactionErrorHandlerDefinition({...element}) : new SpringTransactionErrorHandlerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.redeliveryPolicy !== undefined) { 
            def.redeliveryPolicy = CamelDefinitionApi.createRedeliveryPolicyDefinition(element.redeliveryPolicy); 
        } 

        return def;
    }

    static createCSimpleExpression = (element: any): CSimpleExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new CSimpleExpression({...element}) : new CSimpleExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createConstantExpression = (element: any): ConstantExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new ConstantExpression({...element}) : new ConstantExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDatasonnetExpression = (element: any): DatasonnetExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new DatasonnetExpression({...element}) : new DatasonnetExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createExchangePropertyExpression = (element: any): ExchangePropertyExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new ExchangePropertyExpression({...element}) : new ExchangePropertyExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createExpressionDefinition = (element: any): ExpressionDefinition => {
        
        const def = element ? new ExpressionDefinition({...element}) : new ExpressionDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.ognl !== undefined) { 
            def.ognl = CamelDefinitionApi.createOgnlExpression(element.ognl); 
        } 
        if (element?.constant !== undefined) { 
            def.constant = CamelDefinitionApi.createConstantExpression(element.constant); 
        } 
        if (element?.mvel !== undefined) { 
            def.mvel = CamelDefinitionApi.createMvelExpression(element.mvel); 
        } 
        if (element?.method !== undefined) { 
            def.method = CamelDefinitionApi.createMethodCallExpression(element.method); 
        } 
        if (element?.xquery !== undefined) { 
            def.xquery = CamelDefinitionApi.createXQueryExpression(element.xquery); 
        } 
        if (element?.datasonnet !== undefined) { 
            def.datasonnet = CamelDefinitionApi.createDatasonnetExpression(element.datasonnet); 
        } 
        if (element?.language !== undefined) { 
            def.language = CamelDefinitionApi.createLanguageExpression(element.language); 
        } 
        if (element?.simple !== undefined) { 
            def.simple = CamelDefinitionApi.createSimpleExpression(element.simple); 
        } 
        if (element?.hl7terser !== undefined) { 
            def.hl7terser = CamelDefinitionApi.createHl7TerserExpression(element.hl7terser); 
        } 
        if (element?.tokenize !== undefined) { 
            def.tokenize = CamelDefinitionApi.createTokenizerExpression(element.tokenize); 
        } 
        if (element?.spel !== undefined) { 
            def.spel = CamelDefinitionApi.createSpELExpression(element.spel); 
        } 
        if (element?.ref !== undefined) { 
            def.ref = CamelDefinitionApi.createRefExpression(element.ref); 
        } 
        if (element?.xpath !== undefined) { 
            def.xpath = CamelDefinitionApi.createXPathExpression(element.xpath); 
        } 
        if (element?.groovy !== undefined) { 
            def.groovy = CamelDefinitionApi.createGroovyExpression(element.groovy); 
        } 
        if (element?.csimple !== undefined) { 
            def.csimple = CamelDefinitionApi.createCSimpleExpression(element.csimple); 
        } 
        if (element?.exchangeProperty !== undefined) { 
            def.exchangeProperty = CamelDefinitionApi.createExchangePropertyExpression(element.exchangeProperty); 
        } 
        if (element?.jsonpath !== undefined) { 
            def.jsonpath = CamelDefinitionApi.createJsonPathExpression(element.jsonpath); 
        } 
        if (element?.header !== undefined) { 
            def.header = CamelDefinitionApi.createHeaderExpression(element.header); 
        } 
        if (element?.joor !== undefined) { 
            def.joor = CamelDefinitionApi.createJoorExpression(element.joor); 
        } 
        if (element?.xtokenize !== undefined) { 
            def.xtokenize = CamelDefinitionApi.createXMLTokenizerExpression(element.xtokenize); 
        } 

        return def;
    }

    static createGroovyExpression = (element: any): GroovyExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new GroovyExpression({...element}) : new GroovyExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createHeaderExpression = (element: any): HeaderExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new HeaderExpression({...element}) : new HeaderExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createHl7TerserExpression = (element: any): Hl7TerserExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new Hl7TerserExpression({...element}) : new Hl7TerserExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJoorExpression = (element: any): JoorExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new JoorExpression({...element}) : new JoorExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createJsonPathExpression = (element: any): JsonPathExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new JsonPathExpression({...element}) : new JsonPathExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createLanguageExpression = (element: any): LanguageExpression => {
        
        const def = element ? new LanguageExpression({...element}) : new LanguageExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createMethodCallExpression = (element: any): MethodCallExpression => {
        
        const def = element ? new MethodCallExpression({...element}) : new MethodCallExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createMvelExpression = (element: any): MvelExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new MvelExpression({...element}) : new MvelExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createOgnlExpression = (element: any): OgnlExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new OgnlExpression({...element}) : new OgnlExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRefExpression = (element: any): RefExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new RefExpression({...element}) : new RefExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSimpleExpression = (element: any): SimpleExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new SimpleExpression({...element}) : new SimpleExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createSpELExpression = (element: any): SpELExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new SpELExpression({...element}) : new SpELExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTokenizerExpression = (element: any): TokenizerExpression => {
        if (element && typeof element === 'string') element = {token: element};
        const def = element ? new TokenizerExpression({...element}) : new TokenizerExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createXMLTokenizerExpression = (element: any): XMLTokenizerExpression => {
        
        const def = element ? new XMLTokenizerExpression({...element}) : new XMLTokenizerExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createXPathExpression = (element: any): XPathExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new XPathExpression({...element}) : new XPathExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createXQueryExpression = (element: any): XQueryExpression => {
        if (element && typeof element === 'string') element = {expression: element};
        const def = element ? new XQueryExpression({...element}) : new XQueryExpression();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCustomLoadBalancerDefinition = (element: any): CustomLoadBalancerDefinition => {
        if (element && typeof element === 'string') element = {ref: element};
        const def = element ? new CustomLoadBalancerDefinition({...element}) : new CustomLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createFailoverLoadBalancerDefinition = (element: any): FailoverLoadBalancerDefinition => {
        
        const def = element ? new FailoverLoadBalancerDefinition({...element}) : new FailoverLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRandomLoadBalancerDefinition = (element: any): RandomLoadBalancerDefinition => {
        
        const def = element ? new RandomLoadBalancerDefinition({...element}) : new RandomLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRoundRobinLoadBalancerDefinition = (element: any): RoundRobinLoadBalancerDefinition => {
        
        const def = element ? new RoundRobinLoadBalancerDefinition({...element}) : new RoundRobinLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createStickyLoadBalancerDefinition = (element: any): StickyLoadBalancerDefinition => {
        
        const def = element ? new StickyLoadBalancerDefinition({...element}) : new StickyLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.correlationExpression !== undefined) { 
            def.correlationExpression = CamelDefinitionApi.createExpressionSubElementDefinition(element.correlationExpression); 
        } 

        return def;
    }

    static createTopicLoadBalancerDefinition = (element: any): TopicLoadBalancerDefinition => {
        
        const def = element ? new TopicLoadBalancerDefinition({...element}) : new TopicLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createWeightedLoadBalancerDefinition = (element: any): WeightedLoadBalancerDefinition => {
        
        const def = element ? new WeightedLoadBalancerDefinition({...element}) : new WeightedLoadBalancerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createApiKeyDefinition = (element: any): ApiKeyDefinition => {
        
        const def = element ? new ApiKeyDefinition({...element}) : new ApiKeyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBasicAuthDefinition = (element: any): BasicAuthDefinition => {
        
        const def = element ? new BasicAuthDefinition({...element}) : new BasicAuthDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createBearerTokenDefinition = (element: any): BearerTokenDefinition => {
        
        const def = element ? new BearerTokenDefinition({...element}) : new BearerTokenDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDeleteDefinition = (element: any): DeleteDefinition => {
        
        const def = element ? new DeleteDefinition({...element}) : new DeleteDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createGetDefinition = (element: any): GetDefinition => {
        
        const def = element ? new GetDefinition({...element}) : new GetDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createHeadDefinition = (element: any): HeadDefinition => {
        
        const def = element ? new HeadDefinition({...element}) : new HeadDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createMutualTLSDefinition = (element: any): MutualTLSDefinition => {
        
        const def = element ? new MutualTLSDefinition({...element}) : new MutualTLSDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createOAuth2Definition = (element: any): OAuth2Definition => {
        
        const def = element ? new OAuth2Definition({...element}) : new OAuth2Definition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.scopes = element && element?.scopes ? element?.scopes.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 

        return def;
    }

    static createOpenIdConnectDefinition = (element: any): OpenIdConnectDefinition => {
        
        const def = element ? new OpenIdConnectDefinition({...element}) : new OpenIdConnectDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createParamDefinition = (element: any): ParamDefinition => {
        
        const def = element ? new ParamDefinition({...element}) : new ParamDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.examples = element && element?.examples ? element?.examples.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 

        return def;
    }

    static createPatchDefinition = (element: any): PatchDefinition => {
        
        const def = element ? new PatchDefinition({...element}) : new PatchDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createPostDefinition = (element: any): PostDefinition => {
        
        const def = element ? new PostDefinition({...element}) : new PostDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createPutDefinition = (element: any): PutDefinition => {
        
        const def = element ? new PutDefinition({...element}) : new PutDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.security = element && element?.security ? element?.security.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.param = element && element?.param ? element?.param.map((x:any) => CamelDefinitionApi.createParamDefinition(x)) :[]; 
        def.responseMessage = element && element?.responseMessage ? element?.responseMessage.map((x:any) => CamelDefinitionApi.createResponseMessageDefinition(x)) :[]; 

        return def;
    }

    static createResponseHeaderDefinition = (element: any): ResponseHeaderDefinition => {
        
        const def = element ? new ResponseHeaderDefinition({...element}) : new ResponseHeaderDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createResponseMessageDefinition = (element: any): ResponseMessageDefinition => {
        
        const def = element ? new ResponseMessageDefinition({...element}) : new ResponseMessageDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.examples = element && element?.examples ? element?.examples.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.header = element && element?.header ? element?.header.map((x:any) => CamelDefinitionApi.createResponseHeaderDefinition(x)) :[]; 

        return def;
    }

    static createRestBindingDefinition = (element: any): RestBindingDefinition => {
        
        const def = element ? new RestBindingDefinition({...element}) : new RestBindingDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRestConfigurationDefinition = (element: any): RestConfigurationDefinition => {
        
        const def = element ? new RestConfigurationDefinition({...element}) : new RestConfigurationDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.corsHeaders = element && element?.corsHeaders ? element?.corsHeaders.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.dataFormatProperty = element && element?.dataFormatProperty ? element?.dataFormatProperty.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.consumerProperty = element && element?.consumerProperty ? element?.consumerProperty.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.apiProperty = element && element?.apiProperty ? element?.apiProperty.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.endpointProperty = element && element?.endpointProperty ? element?.endpointProperty.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 
        def.componentProperty = element && element?.componentProperty ? element?.componentProperty.map((x:any) => CamelDefinitionApi.createRestPropertyDefinition(x)) :[]; 

        return def;
    }

    static createRestDefinition = (element: any): RestDefinition => {
        
        const def = element ? new RestDefinition({...element}) : new RestDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.head = element && element?.head ? element?.head.map((x:any) => CamelDefinitionApi.createHeadDefinition(x)) :[]; 
        def.patch = element && element?.patch ? element?.patch.map((x:any) => CamelDefinitionApi.createPatchDefinition(x)) :[]; 
        def.post = element && element?.post ? element?.post.map((x:any) => CamelDefinitionApi.createPostDefinition(x)) :[]; 
        def.get = element && element?.get ? element?.get.map((x:any) => CamelDefinitionApi.createGetDefinition(x)) :[]; 
        def.securityRequirements = element && element?.securityRequirements ? element?.securityRequirements.map((x:any) => CamelDefinitionApi.createSecurityDefinition(x)) :[]; 
        def.delete = element && element?.delete ? element?.delete.map((x:any) => CamelDefinitionApi.createDeleteDefinition(x)) :[]; 
        if (element?.securityDefinitions !== undefined) { 
            def.securityDefinitions = CamelDefinitionApi.createRestSecuritiesDefinition(element.securityDefinitions); 
        } 
        def.put = element && element?.put ? element?.put.map((x:any) => CamelDefinitionApi.createPutDefinition(x)) :[]; 

        return def;
    }

    static createRestPropertyDefinition = (element: any): RestPropertyDefinition => {
        
        const def = element ? new RestPropertyDefinition({...element}) : new RestPropertyDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createRestSecuritiesDefinition = (element: any): RestSecuritiesDefinition => {
        
        const def = element ? new RestSecuritiesDefinition({...element}) : new RestSecuritiesDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.openIdConnect !== undefined) { 
            def.openIdConnect = CamelDefinitionApi.createOpenIdConnectDefinition(element.openIdConnect); 
        } 
        if (element?.apiKey !== undefined) { 
            def.apiKey = CamelDefinitionApi.createApiKeyDefinition(element.apiKey); 
        } 
        if (element?.basicAuth !== undefined) { 
            def.basicAuth = CamelDefinitionApi.createBasicAuthDefinition(element.basicAuth); 
        } 
        if (element?.mutualTls !== undefined) { 
            def.mutualTls = CamelDefinitionApi.createMutualTLSDefinition(element.mutualTls); 
        } 
        if (element?.bearer !== undefined) { 
            def.bearer = CamelDefinitionApi.createBearerTokenDefinition(element.bearer); 
        } 
        if (element?.oauth2 !== undefined) { 
            def.oauth2 = CamelDefinitionApi.createOAuth2Definition(element.oauth2); 
        } 

        return def;
    }

    static createRestsDefinition = (element: any): RestsDefinition => {
        
        const def = element ? new RestsDefinition({...element}) : new RestsDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.rest = element && element?.rest ? element?.rest.map((x:any) => CamelDefinitionApi.createRestDefinition(x)) :[]; 

        return def;
    }

    static createSecurityDefinition = (element: any): SecurityDefinition => {
        
        const def = element ? new SecurityDefinition({...element}) : new SecurityDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createCustomTransformerDefinition = (element: any): CustomTransformerDefinition => {
        
        const def = element ? new CustomTransformerDefinition({...element}) : new CustomTransformerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createDataFormatTransformerDefinition = (element: any): DataFormatTransformerDefinition => {
        
        const def = element ? new DataFormatTransformerDefinition({...element}) : new DataFormatTransformerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.univocityCsv !== undefined) { 
            def.univocityCsv = CamelDefinitionApi.createUniVocityCsvDataFormat(element.univocityCsv); 
        } 
        if (element?.protobuf !== undefined) { 
            def.protobuf = CamelDefinitionApi.createProtobufDataFormat(element.protobuf); 
        } 
        if (element?.tarFile !== undefined) { 
            def.tarFile = CamelDefinitionApi.createTarFileDataFormat(element.tarFile); 
        } 
        if (element?.tidyMarkup !== undefined) { 
            def.tidyMarkup = CamelDefinitionApi.createTidyMarkupDataFormat(element.tidyMarkup); 
        } 
        if (element?.csv !== undefined) { 
            def.csv = CamelDefinitionApi.createCsvDataFormat(element.csv); 
        } 
        if (element?.base64 !== undefined) { 
            def.base64 = CamelDefinitionApi.createBase64DataFormat(element.base64); 
        } 
        if (element?.zipDeflater !== undefined) { 
            def.zipDeflater = CamelDefinitionApi.createZipDeflaterDataFormat(element.zipDeflater); 
        } 
        if (element?.bindy !== undefined) { 
            def.bindy = CamelDefinitionApi.createBindyDataFormat(element.bindy); 
        } 
        if (element?.syslog !== undefined) { 
            def.syslog = CamelDefinitionApi.createSyslogDataFormat(element.syslog); 
        } 
        if (element?.zipFile !== undefined) { 
            def.zipFile = CamelDefinitionApi.createZipFileDataFormat(element.zipFile); 
        } 
        if (element?.jaxb !== undefined) { 
            def.jaxb = CamelDefinitionApi.createJaxbDataFormat(element.jaxb); 
        } 
        if (element?.rss !== undefined) { 
            def.rss = CamelDefinitionApi.createRssDataFormat(element.rss); 
        } 
        if (element?.mimeMultipart !== undefined) { 
            def.mimeMultipart = CamelDefinitionApi.createMimeMultipartDataFormat(element.mimeMultipart); 
        } 
        if (element?.asn1 !== undefined) { 
            def.asn1 = CamelDefinitionApi.createASN1DataFormat(element.asn1); 
        } 
        if (element?.pgp !== undefined) { 
            def.pgp = CamelDefinitionApi.createPGPDataFormat(element.pgp); 
        } 
        if (element?.thrift !== undefined) { 
            def.thrift = CamelDefinitionApi.createThriftDataFormat(element.thrift); 
        } 
        if (element?.json !== undefined) { 
            def.json = CamelDefinitionApi.createJsonDataFormat(element.json); 
        } 
        if (element?.lzf !== undefined) { 
            def.lzf = CamelDefinitionApi.createLZFDataFormat(element.lzf); 
        } 
        if (element?.fhirXml !== undefined) { 
            def.fhirXml = CamelDefinitionApi.createFhirXmlDataFormat(element.fhirXml); 
        } 
        if (element?.barcode !== undefined) { 
            def.barcode = CamelDefinitionApi.createBarcodeDataFormat(element.barcode); 
        } 
        if (element?.avro !== undefined) { 
            def.avro = CamelDefinitionApi.createAvroDataFormat(element.avro); 
        } 
        if (element?.yaml !== undefined) { 
            def.yaml = CamelDefinitionApi.createYAMLDataFormat(element.yaml); 
        } 
        if (element?.fhirJson !== undefined) { 
            def.fhirJson = CamelDefinitionApi.createFhirJsonDataFormat(element.fhirJson); 
        } 
        if (element?.any23 !== undefined) { 
            def.any23 = CamelDefinitionApi.createAny23DataFormat(element.any23); 
        } 
        if (element?.custom !== undefined) { 
            def.custom = CamelDefinitionApi.createCustomDataFormat(element.custom); 
        } 
        if (element?.flatpack !== undefined) { 
            def.flatpack = CamelDefinitionApi.createFlatpackDataFormat(element.flatpack); 
        } 
        if (element?.cbor !== undefined) { 
            def.cbor = CamelDefinitionApi.createCBORDataFormat(element.cbor); 
        } 
        if (element?.crypto !== undefined) { 
            def.crypto = CamelDefinitionApi.createCryptoDataFormat(element.crypto); 
        } 
        if (element?.univocityTsv !== undefined) { 
            def.univocityTsv = CamelDefinitionApi.createUniVocityTsvDataFormat(element.univocityTsv); 
        } 
        if (element?.hl7 !== undefined) { 
            def.hl7 = CamelDefinitionApi.createHL7DataFormat(element.hl7); 
        } 
        if (element?.jsonApi !== undefined) { 
            def.jsonApi = CamelDefinitionApi.createJsonApiDataFormat(element.jsonApi); 
        } 
        if (element?.xmlSecurity !== undefined) { 
            def.xmlSecurity = CamelDefinitionApi.createXMLSecurityDataFormat(element.xmlSecurity); 
        } 
        if (element?.ical !== undefined) { 
            def.ical = CamelDefinitionApi.createIcalDataFormat(element.ical); 
        } 
        if (element?.univocityFixed !== undefined) { 
            def.univocityFixed = CamelDefinitionApi.createUniVocityFixedDataFormat(element.univocityFixed); 
        } 
        if (element?.jacksonXml !== undefined) { 
            def.jacksonXml = CamelDefinitionApi.createJacksonXMLDataFormat(element.jacksonXml); 
        } 
        if (element?.grok !== undefined) { 
            def.grok = CamelDefinitionApi.createGrokDataFormat(element.grok); 
        } 
        if (element?.xstream !== undefined) { 
            def.xstream = CamelDefinitionApi.createXStreamDataFormat(element.xstream); 
        } 
        if (element?.gzipDeflater !== undefined) { 
            def.gzipDeflater = CamelDefinitionApi.createGzipDeflaterDataFormat(element.gzipDeflater); 
        } 
        if (element?.soap !== undefined) { 
            def.soap = CamelDefinitionApi.createSoapDataFormat(element.soap); 
        } 

        return def;
    }

    static createEndpointTransformerDefinition = (element: any): EndpointTransformerDefinition => {
        
        const def = element ? new EndpointTransformerDefinition({...element}) : new EndpointTransformerDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createTransformersDefinition = (element: any): TransformersDefinition => {
        
        const def = element ? new TransformersDefinition({...element}) : new TransformersDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.endpointTransformer !== undefined) { 
            def.endpointTransformer = CamelDefinitionApi.createEndpointTransformerDefinition(element.endpointTransformer); 
        } 
        if (element?.customTransformer !== undefined) { 
            def.customTransformer = CamelDefinitionApi.createCustomTransformerDefinition(element.customTransformer); 
        } 
        if (element?.dataFormatTransformer !== undefined) { 
            def.dataFormatTransformer = CamelDefinitionApi.createDataFormatTransformerDefinition(element.dataFormatTransformer); 
        } 

        return def;
    }

    static createCustomValidatorDefinition = (element: any): CustomValidatorDefinition => {
        
        const def = element ? new CustomValidatorDefinition({...element}) : new CustomValidatorDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createEndpointValidatorDefinition = (element: any): EndpointValidatorDefinition => {
        
        const def = element ? new EndpointValidatorDefinition({...element}) : new EndpointValidatorDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;

        return def;
    }

    static createPredicateValidatorDefinition = (element: any): PredicateValidatorDefinition => {
        
        const def = element ? new PredicateValidatorDefinition({...element}) : new PredicateValidatorDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        def.expression = CamelDefinitionApi.createExpressionDefinition(element.expression); 

        return def;
    }

    static createValidatorsDefinition = (element: any): ValidatorsDefinition => {
        
        const def = element ? new ValidatorsDefinition({...element}) : new ValidatorsDefinition();
        def.uuid = element?.uuid ? element.uuid : def.uuid;
        if (element?.predicateValidator !== undefined) { 
            def.predicateValidator = CamelDefinitionApi.createPredicateValidatorDefinition(element.predicateValidator); 
        } 
        if (element?.endpointValidator !== undefined) { 
            def.endpointValidator = CamelDefinitionApi.createEndpointValidatorDefinition(element.endpointValidator); 
        } 
        if (element?.customValidator !== undefined) { 
            def.customValidator = CamelDefinitionApi.createCustomValidatorDefinition(element.customValidator); 
        } 

        return def;
    }

    static createStep = (name: string, body: any, clone: boolean = false): CamelElement => {
       const newBody = CamelUtil.camelizeBody(name, body, clone);
       switch (name) { 
            case 'ProcessorDefinition': return CamelDefinitionApi.createProcessorDefinition(newBody);
            case 'BeansDeserializer': return CamelDefinitionApi.createBeansDeserializer(newBody);
            case 'ErrorHandlerBuilderDeserializer': return CamelDefinitionApi.createErrorHandlerBuilderDeserializer(newBody);
            case 'NamedBeanDefinition': return CamelDefinitionApi.createNamedBeanDefinition(newBody);
            case 'OutputAwareFromDefinition': return CamelDefinitionApi.createOutputAwareFromDefinition(newBody);
            case 'AggregateDefinition': return CamelDefinitionApi.createAggregateDefinition(newBody);
            case 'BeanDefinition': return CamelDefinitionApi.createBeanDefinition(newBody);
            case 'CatchDefinition': return CamelDefinitionApi.createCatchDefinition(newBody);
            case 'ChoiceDefinition': return CamelDefinitionApi.createChoiceDefinition(newBody);
            case 'CircuitBreakerDefinition': return CamelDefinitionApi.createCircuitBreakerDefinition(newBody);
            case 'ClaimCheckDefinition': return CamelDefinitionApi.createClaimCheckDefinition(newBody);
            case 'ContextScanDefinition': return CamelDefinitionApi.createContextScanDefinition(newBody);
            case 'ConvertBodyDefinition': return CamelDefinitionApi.createConvertBodyDefinition(newBody);
            case 'DataFormatDefinition': return CamelDefinitionApi.createDataFormatDefinition(newBody);
            case 'DelayDefinition': return CamelDefinitionApi.createDelayDefinition(newBody);
            case 'DescriptionDefinition': return CamelDefinitionApi.createDescriptionDefinition(newBody);
            case 'DynamicRouterDefinition': return CamelDefinitionApi.createDynamicRouterDefinition(newBody);
            case 'EnrichDefinition': return CamelDefinitionApi.createEnrichDefinition(newBody);
            case 'ErrorHandlerDefinition': return CamelDefinitionApi.createErrorHandlerDefinition(newBody);
            case 'ExpressionSubElementDefinition': return CamelDefinitionApi.createExpressionSubElementDefinition(newBody);
            case 'FaultToleranceConfigurationDefinition': return CamelDefinitionApi.createFaultToleranceConfigurationDefinition(newBody);
            case 'FilterDefinition': return CamelDefinitionApi.createFilterDefinition(newBody);
            case 'FinallyDefinition': return CamelDefinitionApi.createFinallyDefinition(newBody);
            case 'FromDefinition': return CamelDefinitionApi.createFromDefinition(newBody);
            case 'GlobalOptionDefinition': return CamelDefinitionApi.createGlobalOptionDefinition(newBody);
            case 'GlobalOptionsDefinition': return CamelDefinitionApi.createGlobalOptionsDefinition(newBody);
            case 'IdempotentConsumerDefinition': return CamelDefinitionApi.createIdempotentConsumerDefinition(newBody);
            case 'InOnlyDefinition': return CamelDefinitionApi.createInOnlyDefinition(newBody);
            case 'InOutDefinition': return CamelDefinitionApi.createInOutDefinition(newBody);
            case 'InputTypeDefinition': return CamelDefinitionApi.createInputTypeDefinition(newBody);
            case 'InterceptDefinition': return CamelDefinitionApi.createInterceptDefinition(newBody);
            case 'InterceptFromDefinition': return CamelDefinitionApi.createInterceptFromDefinition(newBody);
            case 'InterceptSendToEndpointDefinition': return CamelDefinitionApi.createInterceptSendToEndpointDefinition(newBody);
            case 'KameletDefinition': return CamelDefinitionApi.createKameletDefinition(newBody);
            case 'LoadBalanceDefinition': return CamelDefinitionApi.createLoadBalanceDefinition(newBody);
            case 'LogDefinition': return CamelDefinitionApi.createLogDefinition(newBody);
            case 'LoopDefinition': return CamelDefinitionApi.createLoopDefinition(newBody);
            case 'MarshalDefinition': return CamelDefinitionApi.createMarshalDefinition(newBody);
            case 'MulticastDefinition': return CamelDefinitionApi.createMulticastDefinition(newBody);
            case 'OnCompletionDefinition': return CamelDefinitionApi.createOnCompletionDefinition(newBody);
            case 'OnExceptionDefinition': return CamelDefinitionApi.createOnExceptionDefinition(newBody);
            case 'OnFallbackDefinition': return CamelDefinitionApi.createOnFallbackDefinition(newBody);
            case 'OptimisticLockRetryPolicyDefinition': return CamelDefinitionApi.createOptimisticLockRetryPolicyDefinition(newBody);
            case 'OtherwiseDefinition': return CamelDefinitionApi.createOtherwiseDefinition(newBody);
            case 'OutputDefinition': return CamelDefinitionApi.createOutputDefinition(newBody);
            case 'OutputTypeDefinition': return CamelDefinitionApi.createOutputTypeDefinition(newBody);
            case 'PackageScanDefinition': return CamelDefinitionApi.createPackageScanDefinition(newBody);
            case 'PausableDefinition': return CamelDefinitionApi.createPausableDefinition(newBody);
            case 'PipelineDefinition': return CamelDefinitionApi.createPipelineDefinition(newBody);
            case 'PolicyDefinition': return CamelDefinitionApi.createPolicyDefinition(newBody);
            case 'PollEnrichDefinition': return CamelDefinitionApi.createPollEnrichDefinition(newBody);
            case 'ProcessDefinition': return CamelDefinitionApi.createProcessDefinition(newBody);
            case 'PropertyDefinition': return CamelDefinitionApi.createPropertyDefinition(newBody);
            case 'PropertyExpressionDefinition': return CamelDefinitionApi.createPropertyExpressionDefinition(newBody);
            case 'RecipientListDefinition': return CamelDefinitionApi.createRecipientListDefinition(newBody);
            case 'RedeliveryPolicyDefinition': return CamelDefinitionApi.createRedeliveryPolicyDefinition(newBody);
            case 'RemoveHeaderDefinition': return CamelDefinitionApi.createRemoveHeaderDefinition(newBody);
            case 'RemoveHeadersDefinition': return CamelDefinitionApi.createRemoveHeadersDefinition(newBody);
            case 'RemovePropertiesDefinition': return CamelDefinitionApi.createRemovePropertiesDefinition(newBody);
            case 'RemovePropertyDefinition': return CamelDefinitionApi.createRemovePropertyDefinition(newBody);
            case 'ResequenceDefinition': return CamelDefinitionApi.createResequenceDefinition(newBody);
            case 'Resilience4jConfigurationDefinition': return CamelDefinitionApi.createResilience4jConfigurationDefinition(newBody);
            case 'RestContextRefDefinition': return CamelDefinitionApi.createRestContextRefDefinition(newBody);
            case 'ResumableDefinition': return CamelDefinitionApi.createResumableDefinition(newBody);
            case 'RollbackDefinition': return CamelDefinitionApi.createRollbackDefinition(newBody);
            case 'RouteBuilderDefinition': return CamelDefinitionApi.createRouteBuilderDefinition(newBody);
            case 'RouteConfigurationContextRefDefinition': return CamelDefinitionApi.createRouteConfigurationContextRefDefinition(newBody);
            case 'RouteConfigurationDefinition': return CamelDefinitionApi.createRouteConfigurationDefinition(newBody);
            case 'RouteContextRefDefinition': return CamelDefinitionApi.createRouteContextRefDefinition(newBody);
            case 'RouteDefinition': return CamelDefinitionApi.createRouteDefinition(newBody);
            case 'RouteTemplateBeanDefinition': return CamelDefinitionApi.createRouteTemplateBeanDefinition(newBody);
            case 'RouteTemplateDefinition': return CamelDefinitionApi.createRouteTemplateDefinition(newBody);
            case 'RouteTemplateParameterDefinition': return CamelDefinitionApi.createRouteTemplateParameterDefinition(newBody);
            case 'RoutingSlipDefinition': return CamelDefinitionApi.createRoutingSlipDefinition(newBody);
            case 'SagaActionUriDefinition': return CamelDefinitionApi.createSagaActionUriDefinition(newBody);
            case 'SagaDefinition': return CamelDefinitionApi.createSagaDefinition(newBody);
            case 'SamplingDefinition': return CamelDefinitionApi.createSamplingDefinition(newBody);
            case 'ScriptDefinition': return CamelDefinitionApi.createScriptDefinition(newBody);
            case 'SetBodyDefinition': return CamelDefinitionApi.createSetBodyDefinition(newBody);
            case 'SetExchangePatternDefinition': return CamelDefinitionApi.createSetExchangePatternDefinition(newBody);
            case 'SetHeaderDefinition': return CamelDefinitionApi.createSetHeaderDefinition(newBody);
            case 'SetPropertyDefinition': return CamelDefinitionApi.createSetPropertyDefinition(newBody);
            case 'SortDefinition': return CamelDefinitionApi.createSortDefinition(newBody);
            case 'SplitDefinition': return CamelDefinitionApi.createSplitDefinition(newBody);
            case 'StepDefinition': return CamelDefinitionApi.createStepDefinition(newBody);
            case 'StopDefinition': return CamelDefinitionApi.createStopDefinition(newBody);
            case 'TemplatedRouteBeanDefinition': return CamelDefinitionApi.createTemplatedRouteBeanDefinition(newBody);
            case 'TemplatedRouteDefinition': return CamelDefinitionApi.createTemplatedRouteDefinition(newBody);
            case 'TemplatedRouteParameterDefinition': return CamelDefinitionApi.createTemplatedRouteParameterDefinition(newBody);
            case 'ThreadPoolProfileDefinition': return CamelDefinitionApi.createThreadPoolProfileDefinition(newBody);
            case 'ThreadsDefinition': return CamelDefinitionApi.createThreadsDefinition(newBody);
            case 'ThrottleDefinition': return CamelDefinitionApi.createThrottleDefinition(newBody);
            case 'ThrowExceptionDefinition': return CamelDefinitionApi.createThrowExceptionDefinition(newBody);
            case 'ToDefinition': return CamelDefinitionApi.createToDefinition(newBody);
            case 'ToDynamicDefinition': return CamelDefinitionApi.createToDynamicDefinition(newBody);
            case 'TransactedDefinition': return CamelDefinitionApi.createTransactedDefinition(newBody);
            case 'TransformDefinition': return CamelDefinitionApi.createTransformDefinition(newBody);
            case 'TryDefinition': return CamelDefinitionApi.createTryDefinition(newBody);
            case 'UnmarshalDefinition': return CamelDefinitionApi.createUnmarshalDefinition(newBody);
            case 'ValidateDefinition': return CamelDefinitionApi.createValidateDefinition(newBody);
            case 'WhenDefinition': return CamelDefinitionApi.createWhenDefinition(newBody);
            case 'WhenSkipSendToEndpointDefinition': return CamelDefinitionApi.createWhenSkipSendToEndpointDefinition(newBody);
            case 'WireTapDefinition': return CamelDefinitionApi.createWireTapDefinition(newBody);
            case 'BlacklistServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createBlacklistServiceCallServiceFilterConfiguration(newBody);
            case 'CachingServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createCachingServiceCallServiceDiscoveryConfiguration(newBody);
            case 'CombinedServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createCombinedServiceCallServiceDiscoveryConfiguration(newBody);
            case 'CombinedServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createCombinedServiceCallServiceFilterConfiguration(newBody);
            case 'ConsulServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createConsulServiceCallServiceDiscoveryConfiguration(newBody);
            case 'CustomServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createCustomServiceCallServiceFilterConfiguration(newBody);
            case 'DefaultServiceCallServiceLoadBalancerConfiguration': return CamelDefinitionApi.createDefaultServiceCallServiceLoadBalancerConfiguration(newBody);
            case 'DnsServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createDnsServiceCallServiceDiscoveryConfiguration(newBody);
            case 'HealthyServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createHealthyServiceCallServiceFilterConfiguration(newBody);
            case 'KubernetesServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createKubernetesServiceCallServiceDiscoveryConfiguration(newBody);
            case 'PassThroughServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createPassThroughServiceCallServiceFilterConfiguration(newBody);
            case 'ServiceCallConfigurationDefinition': return CamelDefinitionApi.createServiceCallConfigurationDefinition(newBody);
            case 'ServiceCallDefinition': return CamelDefinitionApi.createServiceCallDefinition(newBody);
            case 'ServiceCallExpressionConfiguration': return CamelDefinitionApi.createServiceCallExpressionConfiguration(newBody);
            case 'ServiceCallServiceChooserConfiguration': return CamelDefinitionApi.createServiceCallServiceChooserConfiguration(newBody);
            case 'ServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createServiceCallServiceDiscoveryConfiguration(newBody);
            case 'ServiceCallServiceFilterConfiguration': return CamelDefinitionApi.createServiceCallServiceFilterConfiguration(newBody);
            case 'ServiceCallServiceLoadBalancerConfiguration': return CamelDefinitionApi.createServiceCallServiceLoadBalancerConfiguration(newBody);
            case 'StaticServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createStaticServiceCallServiceDiscoveryConfiguration(newBody);
            case 'ZooKeeperServiceCallServiceDiscoveryConfiguration': return CamelDefinitionApi.createZooKeeperServiceCallServiceDiscoveryConfiguration(newBody);
            case 'BatchResequencerConfig': return CamelDefinitionApi.createBatchResequencerConfig(newBody);
            case 'StreamResequencerConfig': return CamelDefinitionApi.createStreamResequencerConfig(newBody);
            case 'ASN1DataFormat': return CamelDefinitionApi.createASN1DataFormat(newBody);
            case 'Any23DataFormat': return CamelDefinitionApi.createAny23DataFormat(newBody);
            case 'AvroDataFormat': return CamelDefinitionApi.createAvroDataFormat(newBody);
            case 'BarcodeDataFormat': return CamelDefinitionApi.createBarcodeDataFormat(newBody);
            case 'Base64DataFormat': return CamelDefinitionApi.createBase64DataFormat(newBody);
            case 'BindyDataFormat': return CamelDefinitionApi.createBindyDataFormat(newBody);
            case 'CBORDataFormat': return CamelDefinitionApi.createCBORDataFormat(newBody);
            case 'CryptoDataFormat': return CamelDefinitionApi.createCryptoDataFormat(newBody);
            case 'CsvDataFormat': return CamelDefinitionApi.createCsvDataFormat(newBody);
            case 'CustomDataFormat': return CamelDefinitionApi.createCustomDataFormat(newBody);
            case 'DataFormatsDefinition': return CamelDefinitionApi.createDataFormatsDefinition(newBody);
            case 'FhirJsonDataFormat': return CamelDefinitionApi.createFhirJsonDataFormat(newBody);
            case 'FhirXmlDataFormat': return CamelDefinitionApi.createFhirXmlDataFormat(newBody);
            case 'FlatpackDataFormat': return CamelDefinitionApi.createFlatpackDataFormat(newBody);
            case 'GrokDataFormat': return CamelDefinitionApi.createGrokDataFormat(newBody);
            case 'GzipDeflaterDataFormat': return CamelDefinitionApi.createGzipDeflaterDataFormat(newBody);
            case 'HL7DataFormat': return CamelDefinitionApi.createHL7DataFormat(newBody);
            case 'IcalDataFormat': return CamelDefinitionApi.createIcalDataFormat(newBody);
            case 'JacksonXMLDataFormat': return CamelDefinitionApi.createJacksonXMLDataFormat(newBody);
            case 'JaxbDataFormat': return CamelDefinitionApi.createJaxbDataFormat(newBody);
            case 'JsonApiDataFormat': return CamelDefinitionApi.createJsonApiDataFormat(newBody);
            case 'JsonDataFormat': return CamelDefinitionApi.createJsonDataFormat(newBody);
            case 'LZFDataFormat': return CamelDefinitionApi.createLZFDataFormat(newBody);
            case 'MimeMultipartDataFormat': return CamelDefinitionApi.createMimeMultipartDataFormat(newBody);
            case 'PGPDataFormat': return CamelDefinitionApi.createPGPDataFormat(newBody);
            case 'ProtobufDataFormat': return CamelDefinitionApi.createProtobufDataFormat(newBody);
            case 'RssDataFormat': return CamelDefinitionApi.createRssDataFormat(newBody);
            case 'SoapDataFormat': return CamelDefinitionApi.createSoapDataFormat(newBody);
            case 'SyslogDataFormat': return CamelDefinitionApi.createSyslogDataFormat(newBody);
            case 'TarFileDataFormat': return CamelDefinitionApi.createTarFileDataFormat(newBody);
            case 'ThriftDataFormat': return CamelDefinitionApi.createThriftDataFormat(newBody);
            case 'TidyMarkupDataFormat': return CamelDefinitionApi.createTidyMarkupDataFormat(newBody);
            case 'UniVocityCsvDataFormat': return CamelDefinitionApi.createUniVocityCsvDataFormat(newBody);
            case 'UniVocityFixedDataFormat': return CamelDefinitionApi.createUniVocityFixedDataFormat(newBody);
            case 'UniVocityHeader': return CamelDefinitionApi.createUniVocityHeader(newBody);
            case 'UniVocityTsvDataFormat': return CamelDefinitionApi.createUniVocityTsvDataFormat(newBody);
            case 'XMLSecurityDataFormat': return CamelDefinitionApi.createXMLSecurityDataFormat(newBody);
            case 'XStreamDataFormat': return CamelDefinitionApi.createXStreamDataFormat(newBody);
            case 'YAMLDataFormat': return CamelDefinitionApi.createYAMLDataFormat(newBody);
            case 'YAMLTypeFilterDefinition': return CamelDefinitionApi.createYAMLTypeFilterDefinition(newBody);
            case 'ZipDeflaterDataFormat': return CamelDefinitionApi.createZipDeflaterDataFormat(newBody);
            case 'ZipFileDataFormat': return CamelDefinitionApi.createZipFileDataFormat(newBody);
            case 'DeadLetterChannelDefinition': return CamelDefinitionApi.createDeadLetterChannelDefinition(newBody);
            case 'DefaultErrorHandlerDefinition': return CamelDefinitionApi.createDefaultErrorHandlerDefinition(newBody);
            case 'ErrorHandlerRefDefinition': return CamelDefinitionApi.createErrorHandlerRefDefinition(newBody);
            case 'JtaTransactionErrorHandlerDefinition': return CamelDefinitionApi.createJtaTransactionErrorHandlerDefinition(newBody);
            case 'NoErrorHandlerDefinition': return CamelDefinitionApi.createNoErrorHandlerDefinition(newBody);
            case 'SpringTransactionErrorHandlerDefinition': return CamelDefinitionApi.createSpringTransactionErrorHandlerDefinition(newBody);
            case 'CSimpleExpression': return CamelDefinitionApi.createCSimpleExpression(newBody);
            case 'ConstantExpression': return CamelDefinitionApi.createConstantExpression(newBody);
            case 'DatasonnetExpression': return CamelDefinitionApi.createDatasonnetExpression(newBody);
            case 'ExchangePropertyExpression': return CamelDefinitionApi.createExchangePropertyExpression(newBody);
            case 'ExpressionDefinition': return CamelDefinitionApi.createExpressionDefinition(newBody);
            case 'GroovyExpression': return CamelDefinitionApi.createGroovyExpression(newBody);
            case 'HeaderExpression': return CamelDefinitionApi.createHeaderExpression(newBody);
            case 'Hl7TerserExpression': return CamelDefinitionApi.createHl7TerserExpression(newBody);
            case 'JoorExpression': return CamelDefinitionApi.createJoorExpression(newBody);
            case 'JsonPathExpression': return CamelDefinitionApi.createJsonPathExpression(newBody);
            case 'LanguageExpression': return CamelDefinitionApi.createLanguageExpression(newBody);
            case 'MethodCallExpression': return CamelDefinitionApi.createMethodCallExpression(newBody);
            case 'MvelExpression': return CamelDefinitionApi.createMvelExpression(newBody);
            case 'OgnlExpression': return CamelDefinitionApi.createOgnlExpression(newBody);
            case 'RefExpression': return CamelDefinitionApi.createRefExpression(newBody);
            case 'SimpleExpression': return CamelDefinitionApi.createSimpleExpression(newBody);
            case 'SpELExpression': return CamelDefinitionApi.createSpELExpression(newBody);
            case 'TokenizerExpression': return CamelDefinitionApi.createTokenizerExpression(newBody);
            case 'XMLTokenizerExpression': return CamelDefinitionApi.createXMLTokenizerExpression(newBody);
            case 'XPathExpression': return CamelDefinitionApi.createXPathExpression(newBody);
            case 'XQueryExpression': return CamelDefinitionApi.createXQueryExpression(newBody);
            case 'CustomLoadBalancerDefinition': return CamelDefinitionApi.createCustomLoadBalancerDefinition(newBody);
            case 'FailoverLoadBalancerDefinition': return CamelDefinitionApi.createFailoverLoadBalancerDefinition(newBody);
            case 'RandomLoadBalancerDefinition': return CamelDefinitionApi.createRandomLoadBalancerDefinition(newBody);
            case 'RoundRobinLoadBalancerDefinition': return CamelDefinitionApi.createRoundRobinLoadBalancerDefinition(newBody);
            case 'StickyLoadBalancerDefinition': return CamelDefinitionApi.createStickyLoadBalancerDefinition(newBody);
            case 'TopicLoadBalancerDefinition': return CamelDefinitionApi.createTopicLoadBalancerDefinition(newBody);
            case 'WeightedLoadBalancerDefinition': return CamelDefinitionApi.createWeightedLoadBalancerDefinition(newBody);
            case 'ApiKeyDefinition': return CamelDefinitionApi.createApiKeyDefinition(newBody);
            case 'BasicAuthDefinition': return CamelDefinitionApi.createBasicAuthDefinition(newBody);
            case 'BearerTokenDefinition': return CamelDefinitionApi.createBearerTokenDefinition(newBody);
            case 'DeleteDefinition': return CamelDefinitionApi.createDeleteDefinition(newBody);
            case 'GetDefinition': return CamelDefinitionApi.createGetDefinition(newBody);
            case 'HeadDefinition': return CamelDefinitionApi.createHeadDefinition(newBody);
            case 'MutualTLSDefinition': return CamelDefinitionApi.createMutualTLSDefinition(newBody);
            case 'OAuth2Definition': return CamelDefinitionApi.createOAuth2Definition(newBody);
            case 'OpenIdConnectDefinition': return CamelDefinitionApi.createOpenIdConnectDefinition(newBody);
            case 'ParamDefinition': return CamelDefinitionApi.createParamDefinition(newBody);
            case 'PatchDefinition': return CamelDefinitionApi.createPatchDefinition(newBody);
            case 'PostDefinition': return CamelDefinitionApi.createPostDefinition(newBody);
            case 'PutDefinition': return CamelDefinitionApi.createPutDefinition(newBody);
            case 'ResponseHeaderDefinition': return CamelDefinitionApi.createResponseHeaderDefinition(newBody);
            case 'ResponseMessageDefinition': return CamelDefinitionApi.createResponseMessageDefinition(newBody);
            case 'RestBindingDefinition': return CamelDefinitionApi.createRestBindingDefinition(newBody);
            case 'RestConfigurationDefinition': return CamelDefinitionApi.createRestConfigurationDefinition(newBody);
            case 'RestDefinition': return CamelDefinitionApi.createRestDefinition(newBody);
            case 'RestPropertyDefinition': return CamelDefinitionApi.createRestPropertyDefinition(newBody);
            case 'RestSecuritiesDefinition': return CamelDefinitionApi.createRestSecuritiesDefinition(newBody);
            case 'RestsDefinition': return CamelDefinitionApi.createRestsDefinition(newBody);
            case 'SecurityDefinition': return CamelDefinitionApi.createSecurityDefinition(newBody);
            case 'CustomTransformerDefinition': return CamelDefinitionApi.createCustomTransformerDefinition(newBody);
            case 'DataFormatTransformerDefinition': return CamelDefinitionApi.createDataFormatTransformerDefinition(newBody);
            case 'EndpointTransformerDefinition': return CamelDefinitionApi.createEndpointTransformerDefinition(newBody);
            case 'TransformersDefinition': return CamelDefinitionApi.createTransformersDefinition(newBody);
            case 'CustomValidatorDefinition': return CamelDefinitionApi.createCustomValidatorDefinition(newBody);
            case 'EndpointValidatorDefinition': return CamelDefinitionApi.createEndpointValidatorDefinition(newBody);
            case 'PredicateValidatorDefinition': return CamelDefinitionApi.createPredicateValidatorDefinition(newBody);
            case 'ValidatorsDefinition': return CamelDefinitionApi.createValidatorsDefinition(newBody);
            default: return new CamelElement('');
        }
    }

    static createExpression = (name: string, body: any): CamelElement => {
       const newBody = CamelUtil.camelizeBody(name, body, false);
       delete newBody.expressionName;
       delete newBody.dslName;
       switch (name) { 
            case 'XPathExpression': return CamelDefinitionApi.createXPathExpression(newBody);
            case 'ConstantExpression': return CamelDefinitionApi.createConstantExpression(newBody);
            case 'GroovyExpression': return CamelDefinitionApi.createGroovyExpression(newBody);
            case 'SimpleExpression': return CamelDefinitionApi.createSimpleExpression(newBody);
            case 'MvelExpression': return CamelDefinitionApi.createMvelExpression(newBody);
            case 'RefExpression': return CamelDefinitionApi.createRefExpression(newBody);
            case 'MethodCallExpression': return CamelDefinitionApi.createMethodCallExpression(newBody);
            case 'LanguageExpression': return CamelDefinitionApi.createLanguageExpression(newBody);
            case 'ExchangePropertyExpression': return CamelDefinitionApi.createExchangePropertyExpression(newBody);
            case 'OgnlExpression': return CamelDefinitionApi.createOgnlExpression(newBody);
            case 'XQueryExpression': return CamelDefinitionApi.createXQueryExpression(newBody);
            case 'HeaderExpression': return CamelDefinitionApi.createHeaderExpression(newBody);
            case 'CSimpleExpression': return CamelDefinitionApi.createCSimpleExpression(newBody);
            case 'XMLTokenizerExpression': return CamelDefinitionApi.createXMLTokenizerExpression(newBody);
            case 'DatasonnetExpression': return CamelDefinitionApi.createDatasonnetExpression(newBody);
            case 'TokenizerExpression': return CamelDefinitionApi.createTokenizerExpression(newBody);
            case 'SpELExpression': return CamelDefinitionApi.createSpELExpression(newBody);
            case 'JoorExpression': return CamelDefinitionApi.createJoorExpression(newBody);
            case 'JsonPathExpression': return CamelDefinitionApi.createJsonPathExpression(newBody);
            case 'Hl7TerserExpression': return CamelDefinitionApi.createHl7TerserExpression(newBody);
            default: return new SimpleExpression(newBody);
        }
    }

    static createDataFormat = (name: string, body: any): CamelElement => {
       const newBody = CamelUtil.camelizeBody(name, body, false);
       delete newBody.dataFormatName;
       delete newBody.dslName;
       switch (name) { 
            case 'Any23DataFormat': return CamelDefinitionApi.createAny23DataFormat(newBody);
            case 'TarFileDataFormat': return CamelDefinitionApi.createTarFileDataFormat(newBody);
            case 'CBORDataFormat': return CamelDefinitionApi.createCBORDataFormat(newBody);
            case 'LZFDataFormat': return CamelDefinitionApi.createLZFDataFormat(newBody);
            case 'UniVocityFixedDataFormat': return CamelDefinitionApi.createUniVocityFixedDataFormat(newBody);
            case 'JsonApiDataFormat': return CamelDefinitionApi.createJsonApiDataFormat(newBody);
            case 'XMLSecurityDataFormat': return CamelDefinitionApi.createXMLSecurityDataFormat(newBody);
            case 'TidyMarkupDataFormat': return CamelDefinitionApi.createTidyMarkupDataFormat(newBody);
            case 'FhirJsonDataFormat': return CamelDefinitionApi.createFhirJsonDataFormat(newBody);
            case 'ThriftDataFormat': return CamelDefinitionApi.createThriftDataFormat(newBody);
            case 'IcalDataFormat': return CamelDefinitionApi.createIcalDataFormat(newBody);
            case 'CryptoDataFormat': return CamelDefinitionApi.createCryptoDataFormat(newBody);
            case 'ZipFileDataFormat': return CamelDefinitionApi.createZipFileDataFormat(newBody);
            case 'JaxbDataFormat': return CamelDefinitionApi.createJaxbDataFormat(newBody);
            case 'UniVocityTsvDataFormat': return CamelDefinitionApi.createUniVocityTsvDataFormat(newBody);
            case 'BarcodeDataFormat': return CamelDefinitionApi.createBarcodeDataFormat(newBody);
            case 'CsvDataFormat': return CamelDefinitionApi.createCsvDataFormat(newBody);
            case 'GrokDataFormat': return CamelDefinitionApi.createGrokDataFormat(newBody);
            case 'FlatpackDataFormat': return CamelDefinitionApi.createFlatpackDataFormat(newBody);
            case 'SoapDataFormat': return CamelDefinitionApi.createSoapDataFormat(newBody);
            case 'AvroDataFormat': return CamelDefinitionApi.createAvroDataFormat(newBody);
            case 'GzipDeflaterDataFormat': return CamelDefinitionApi.createGzipDeflaterDataFormat(newBody);
            case 'JacksonXMLDataFormat': return CamelDefinitionApi.createJacksonXMLDataFormat(newBody);
            case 'ProtobufDataFormat': return CamelDefinitionApi.createProtobufDataFormat(newBody);
            case 'BindyDataFormat': return CamelDefinitionApi.createBindyDataFormat(newBody);
            case 'JsonDataFormat': return CamelDefinitionApi.createJsonDataFormat(newBody);
            case 'MimeMultipartDataFormat': return CamelDefinitionApi.createMimeMultipartDataFormat(newBody);
            case 'ZipDeflaterDataFormat': return CamelDefinitionApi.createZipDeflaterDataFormat(newBody);
            case 'ASN1DataFormat': return CamelDefinitionApi.createASN1DataFormat(newBody);
            case 'XStreamDataFormat': return CamelDefinitionApi.createXStreamDataFormat(newBody);
            case 'YAMLDataFormat': return CamelDefinitionApi.createYAMLDataFormat(newBody);
            case 'CustomDataFormat': return CamelDefinitionApi.createCustomDataFormat(newBody);
            case 'HL7DataFormat': return CamelDefinitionApi.createHL7DataFormat(newBody);
            case 'Base64DataFormat': return CamelDefinitionApi.createBase64DataFormat(newBody);
            case 'RssDataFormat': return CamelDefinitionApi.createRssDataFormat(newBody);
            case 'PGPDataFormat': return CamelDefinitionApi.createPGPDataFormat(newBody);
            case 'UniVocityCsvDataFormat': return CamelDefinitionApi.createUniVocityCsvDataFormat(newBody);
            case 'SyslogDataFormat': return CamelDefinitionApi.createSyslogDataFormat(newBody);
            case 'FhirXmlDataFormat': return CamelDefinitionApi.createFhirXmlDataFormat(newBody);
            default: return new JsonDataFormat(newBody);
        }
    }

    static createSteps = (elements: any[] | undefined): CamelElement[] => {
        const result: CamelElement[] = []
        if (elements !== undefined){
            elements.forEach(e => {
                result.push(CamelDefinitionApi.createStep(e.dslName, e));
            })
        }
        return result
    }
}
