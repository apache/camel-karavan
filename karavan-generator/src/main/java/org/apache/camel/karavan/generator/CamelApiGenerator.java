/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.karavan.generator;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class CamelApiGenerator extends AbstractGenerator {

    public String generate(Map<String, List<ElementProp>> models, Map<String, String> processors, Map<String, String> propertyToMapStrings){
        StringBuilder camelApi = new StringBuilder();
        camelApi.append(
                "/**\n" +
                        " * Generated by karavan build tools - do NOT edit this file!\n" +
                        " */\n");
        camelApi.append("import {\n");
        camelApi.append("    CamelElement, \n");
        camelApi.append("    CamelElementMeta, \n");
        camelApi.append("    From, \n");
        camelApi.append("    Expression, \n");
        processors.values().forEach(s -> {
            if (s.equalsIgnoreCase("otherwise")) {
                camelApi.append("    Otherwise, \n");
            } else if (s.equalsIgnoreCase("when")) {
                camelApi.append("    When, \n");
            } else {
                camelApi.append("    ").append(s).append(",\n");
            }
        });
        camelApi.append("} from '../model/CamelModel' \n");
        camelApi.append("import * as dataFormat from '../model/CamelDataFormat'; \n");
        camelApi.append("import {CamelUtil} from \"./CamelUtil\";  \n\n");

        camelApi.append("export class CamelApi { \n\n");

        camelApi.append(
                "    static createStep = (name: string, body: any, clone: boolean = false): CamelElement => {\n" +
                        "       const newBody = CamelUtil.camelizeBody(name, body, clone);\n" +
                        "       switch (name){\n" +
                        "            case 'from': return CamelApi.createFrom(newBody);\n" +
                        "            case 'expression': return CamelApi.createExpression(newBody);\n");
        processors.values().forEach(s ->
                camelApi.append("            case '").append(deCapitalize(s)).append("': return CamelApi.create").append(capitalize(s)).append("(newBody);\n"));
        camelApi.append("            default: return new CamelElement('');\n");
        camelApi.append("        }\n");
        camelApi.append("    }\n");


        camelApi.append(
                "    static createExpression = (element: any): Expression => {\n" +
                        "        return new Expression({...element})\n" +
                        "    }\n");
        camelApi.append(createCreateFunction("from", models.get("from"), "uri"));

        processors.values().forEach((model) -> camelApi.append(createCreateFunction(model, models.get(model), propertyToMapStrings.get(model))));


        camelApi.append(
                "    static createSteps = (elements: any[] | undefined): CamelElement[] => {\n" +
                        "        const result: CamelElement[] = []\n" +
                        "        if (elements !== undefined){\n" +
                        "            elements.forEach(e => {\n" +
                        "                result.push(CamelApi.createStep(CamelUtil.camelizeName(e.dslName, '-', true), e));\n" +
                        "            })\n" +
                        "        }\n" +
                        "        return result\n" +
                        "    }\n\n");

        // addStep functions
        camelApi.append(
                "    static addStep = (steps: CamelElement[], step: CamelElement, parentId: string, position?: number): CamelElement[] => {\n" +
                        "        const result: CamelElement[] = [];\n" +
                        "        steps.forEach(el => {\n" +
                        "            switch (el.dslName) {\n");
        models.entrySet().forEach(s -> {
            String name = deCapitalize(s.getKey());
            String stepClass = capitalize(s.getKey());
            String stepField = deCapitalize(s.getKey());

            if (name.equals("choice")) {
                camelApi.append(getTemplateFile("CamelApi.addStep.choiceStep.tx").concat("\n"));
            } else if (name.equals("otherwise")) {
                camelApi.append(getTemplateFile("CamelApi.addStep.otherwise.tx").concat("\n"));
            } else if (name.equals("when")) {
                camelApi.append(getTemplateFile("CamelApi.addStep.when.tx").concat("\n"));
            } else if (s.getValue().stream().filter(e -> e.name.equals("steps")).count() > 0) {
                camelApi.append(String.format(
                        "                case '%1$s':\n" +
                                "                    const %3$sChildren = (el as %2$s).steps || [];\n" +
                                "                    if (el.uuid === parentId) position !== undefined ? %3$sChildren.splice(position, 0, step) : %3$sChildren.push(step);\n" +
                                "                    else (el as %2$s).steps = CamelApi.addStep(%3$sChildren, step, parentId, position);\n" +
                                "                    break;\n",
                        stepField, stepClass, name));
            }
        });
        camelApi.append(
                "            }\n" +
                        "            result.push(el);\n" +
                        "        })\n" +
                        "        return result;\n" +
                        "    }\n\n");


        // deleteStep functions
        camelApi.append(
                "    static deleteStep = (steps: CamelElement[] | undefined, uuidToDelete: string): CamelElement[] => {\n" +
                        "        const result: CamelElement[] = []\n" +
                        "        if (steps !== undefined){\n" +
                        "            steps.forEach(step => {\n" +
                        "                if (step.uuid !== uuidToDelete){\n" +
                        "                    switch (step.dslName){\n");
        models.entrySet().forEach(s -> {
            String name = deCapitalize(s.getKey());
            String stepClass = capitalize(s.getKey());
            String stepField = deCapitalize(s.getKey());
            if (name.equals("otherwise")) {
                camelApi.append("                        case 'otherwise': (step as Otherwise).steps = CamelApi.deleteStep((step as Otherwise).steps, uuidToDelete); break;\n");
            } else if (name.equals("when")) {
                camelApi.append("                        case 'when': (step as When).steps = CamelApi.deleteStep((step as When).steps, uuidToDelete); break;\n");
            } else if (name.equals("choice")) {
                camelApi.append("                        case 'choice':\n" +
                        "                            const otherwise = (step as Choice).otherwise;\n" +
                        "                            if (otherwise && otherwise.uuid === uuidToDelete) {\n" +
                        "                                (step as Choice).otherwise = undefined;\n" +
                        "                            } else if (otherwise && otherwise.uuid !== uuidToDelete) {\n" +
                        "                                otherwise.steps = CamelApi.deleteStep(otherwise.steps, uuidToDelete);\n" +
                        "                                (step as Choice).otherwise = otherwise;\n" +
                        "                            }\n" +
                        "                            (step as Choice).when = CamelApi.deleteWhen((step as Choice).when, uuidToDelete);\n" +
                        "                            break;\n");
            } else if (s.getValue().stream().filter(e -> e.name.equals("steps")).count() > 0) {
                camelApi.append(String.format("                        case '%s': (step as %s).steps = CamelApi.deleteStep((step as %s).steps, uuidToDelete); break;\n",
                        stepField, stepClass, stepClass));
            }
        });
        camelApi.append(
                "                    }\n" +
                        "                    result.push(step);\n" +
                        "                }\n" +
                        "            })\n" +
                        "        }\n" +
                        "        return result\n" +
                        "    }\n\n");
        camelApi.append(getTemplateFile("CamelApi.deleteWhen.tx").concat("\n\n"));


        // findStep functions
        camelApi.append(getTemplateFile("CamelApi.findStep.header.tx").concat("\n"));
        models.entrySet().forEach(s -> {
            String name = deCapitalize(s.getKey());
            String stepClass = capitalize(s.getKey());
            String stepField = deCapitalize(s.getKey());

            if (name.equals("choice")) {
                camelApi.append(getTemplateFile("CamelApi.findStep.choiceStep.tx").concat("\n"));
            } else if (name.equals("otherwise")) {
                camelApi.append(getTemplateFile("CamelApi.findStep.otherwise.tx").concat("\n"));
            } else if (name.equals("when")) {
                camelApi.append(getTemplateFile("CamelApi.findStep.when.tx").concat("\n"));
            } else if (s.getValue().stream().filter(e -> e.name.equals("steps")).count() > 0) {
                camelApi.append(String.format(
                        "                        case '%1$s':\n" +
                                "                            result = CamelApi.findStep((step as %2$s).steps, uuid, step.uuid, result);\n" +
                                "                            if (result?.pathUuids !== undefined && result?.pathUuids.length > 0) result.pathUuids.push(step.uuid);\n" +
                                "                            break;\n",
                        stepField, stepClass));
            }
        });
        camelApi.append(getTemplateFile("CamelApi.findStep.footer.tx").concat("\n\n"));

        // Expression language finder
        camelApi.append("    static getExpressionLanguage = (init?: Partial<Expression>): string | undefined => {\n");
        models.get("expression").forEach(el -> {
            if (!el.name.equals("language"))
                camelApi.append(String.format("        if (init?.%s) return '%s'\n", el.name, el.name));
        });
        camelApi.append("        return undefined;\n");
        camelApi.append("    }\n");

        camelApi.append("}\n").append(System.lineSeparator());
        return camelApi.toString();
    }

    private String createCreateFunction(String name, List<ElementProp> elProps, String propertyToMapStrings) {
        if (name.equalsIgnoreCase("otherwise")) {
            return getTemplateFile("CamelApi.createOtherwise.tx").concat("\n\n");
        } else if (name.equalsIgnoreCase("when")) {
            return getTemplateFile("CamelApi.createWhen.tx").concat("\n\n");
        } else if (name.equalsIgnoreCase("choice")) {
            return getTemplateFile("CamelApi.createChoice.tx").concat("\n\n");
        }
        String stepClass = capitalize(name);
        String stepField = deCapitalize(name);
        String elementName = deCapitalize(name);
        String funcName = "create".concat(capitalize(name));
        StringBuilder f = new StringBuilder();
        f.append(String.format("    static %s = (element: any): %s => {\n", funcName, stepClass));
        if (stepClass.equals("To") || stepClass.equals("Tod")) {
            f.append(String.format("        if (typeof element !== 'object') element = {uri: element};\n", elementName));
        }
        // for oneOf string or object Definitions
        if (propertyToMapStrings != null){
            String p = deCapitalize(camelize(propertyToMapStrings, "-"));
            f.append(String.format("        if (element && typeof element === 'string') element = {%2$s: element};\n", elementName, p));
        }
        f.append(String.format("        const %1$s = element ? new %2$s({...element}) : new %2$s();\n", stepField, stepClass, elementName));
        elProps.stream().forEach(e -> {
            if (e.name.equals("steps")) {
                f.append(String.format("        %1$s.steps = CamelApi.createSteps(element?.steps);\n", stepField, elementName));
            } else if (e.isArray && e.isArrayTypeClass) {
                f.append(String.format("        %1$s.%3$s = element && element?.%2$s ? element?.%2$s?.%3$s.map((x:any) => CamelApi.create%4$s(x)) :[];\n", stepField, elementName, e.name, e.arrayType));
            } else if (e.name.equalsIgnoreCase("expression")) {
                f.append(String.format("        const implicitExpression = CamelApi.getExpressionLanguage(element);\n", elementName));
                f.append(String.format("        if (implicitExpression){\n"));
                f.append(String.format("            %1$s.expression = new Expression({[implicitExpression]: element[implicitExpression]});\n", stepField, elementName));
                f.append(String.format("            delete (%1$s as any)[implicitExpression];\n", stepField));
                f.append(String.format("        } else {\n"));
                f.append(String.format("            %1$s.expression = CamelApi.createExpression(element?.expression);\n", stepField));
                f.append(String.format("        }\n"));
            } else if (e.typeCode.startsWith("dataFormat.")) {
                String temp = "        if (element.%1$s !== undefined) %2$s.%1$s = new %3$s(element.%1$s);\n";
                f.append(String.format(temp, e.name, stepField, e.typeCode));
            } else if (e.isObject) {
                f.append(String.format("        %s.%s = CamelApi.create%s(element?.%s?.%s);\n", stepField, e.name, e.type, elementName, e.name));
            }
        });
        f.append(String.format("        %s.uuid = element?.uuid ? element.uuid : %s.uuid;\n", stepField, stepField));
        f.append(String.format("        return %s;\n", stepField));
        f.append("    }\n\n");
        return f.toString();
    }

    public String getTemplateFile(String name) {
        try {
            InputStream inputStream = CamelModelGenerator.class.getClassLoader().getResourceAsStream(name);
            String data = new BufferedReader(new InputStreamReader(inputStream))
                    .lines().collect(Collectors.joining(System.getProperty("line.separator")));
            return data;
        } catch (Exception e) {
            return null;
        }
    }

}
