apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: postgres
    app.kubernetes.io/component: postgres-dc
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/part-of: postgres
    app.openshift.io/runtime: postgres
    deploymentconfig: postgres
  name: postgres
  annotations:
    argocd.argoproj.io/sync-options: Validate=false
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    name: postgres
    app: postgres
    deploymentconfig: postgres
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      name: postgres
      labels:
        app: postgres
        name: postgres
        deploymentconfig: postgres
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          value: postgres
        - name: POSTGRESQL_PASSWORD
          value: postgres
        - name: POSTGRESQL_DATABASE
          value: demo
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - /var/lib/pgsql/demo/postStart.sh
          # postStart:
            # exec:
            #  command:
                  # - sleep 10 && echo ${SQL_TABLE} | psql -U ${POSTGRESQL_USER} -d ${POSTGRESQL_DATABASE};
                  # - sleep 10 && echo ${SQL_DB} | psql -U ${POSTGRESQL_USER} && echo ${SQL_TABLE} | psql -U ${POSTGRESQL_USER} -d ${POSTGRESQL_DATABASE};
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 5432
          timeoutSeconds: 1
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: '1'
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          capabilities: {}
          privileged: false
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgres-data
        - mountPath: /var/lib/pgsql/demo
          name: postgres-config 
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: postgres-data
        emptyDir: {}
      - configMap:
          defaultMode: 511
          name: postgres-config
        name: postgres-config  
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:latest
        namespace: openshift
    type: ImageChange
  - type: ConfigChange
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: postgres
    component: postgres
  name: postgres-config  
data:
  add-sample-db.sh: |
    #!/bin/bash
    until bash -c "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -c 'SELECT 1'"; do
      echo "Waiting for Postgres server..."
      sleep 1
    done 
    echo "----- creating sampledb"
    psql <<EOF 
      CREATE DATABASE demo OWNER postgres;
    EOF
    psql -d demo -U postgres <<'EOF'
      CREATE TABLE IF NOT EXISTS parcels (id varchar(250) NOT NULL, address varchar(250) NOT NULL, status varchar(250), PRIMARY KEY (id));
    EOF
  postStart.sh: |
    #!/bin/bash
    /var/lib/pgsql/demo/add-sample-db.sh &>  /proc/1/fd/1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
    app.kubernetes.io/component: postgres-svc
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/part-of: postgres
  name: postgres
spec:
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
    deploymentconfig: postgres
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
