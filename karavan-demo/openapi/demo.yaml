apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: demo.yaml
spec:
  flows:
    - rest:
        delete:
          - param:
              - name: api_key
                type: header
                dataType: string
                required: false
              - name: petId
                type: path
                dataType: integer
                description: Pet id to delete
                required: true
            id: deletePet
            path: /pet/{petId}
            to: direct:deletePet
          - param:
              - name: orderId
                type: path
                dataType: integer
                description: ID of the order that needs to be deleted
                required: true
            id: deleteOrder
            path: /store/order/{orderId}
            description: >-
              For valid response try integer IDs with positive integer value.
              Negative or non-integer values will generate API errors
            to: direct:deleteOrder
          - param:
              - name: username
                type: path
                dataType: string
                description: The name that needs to be deleted
                required: true
            id: deleteUser
            path: /user/{username}
            description: This can only be done by the logged in user.
            to: direct:deleteUser
        put:
          - param:
              - name: body
                type: body
                description: Pet object that needs to be added to the store
                required: true
            id: updatePet
            path: /pet
            consumes: application/json,application/xml
            to: direct:updatePet
          - param:
              - name: username
                type: path
                dataType: string
                description: name that need to be updated
                required: true
              - name: body
                type: body
                description: Updated user object
                required: true
            id: updateUser
            path: /user/{username}
            description: This can only be done by the logged in user.
            consumes: '*/*'
            to: direct:updateUser
        post:
          - param:
              - name: verbose
                type: query
                dataType: boolean
                defaultValue: 'false'
                description: Verbose data
                required: false
              - name: body
                type: body
                description: Pet object that needs to be added to the store
                required: true
            id: addPet
            path: /pet
            consumes: application/json,application/xml
            to: direct:addPet
          - param:
              - name: petId
                type: path
                dataType: integer
                description: ID of pet that needs to be updated
                required: true
              - name: name
                type: formData
                dataType: string
                description: Updated name of the pet
                required: true
              - name: status
                type: formData
                dataType: string
                description: Updated status of the pet
                required: true
            id: updatePetWithForm
            path: /pet/{petId}
            consumes: application/x-www-form-urlencoded
            to: direct:updatePetWithForm
          - param:
              - name: petId
                type: path
                dataType: integer
                description: ID of pet to update
                required: true
              - name: additionalMetadata
                type: formData
                dataType: string
                description: Additional data to pass to server
                required: true
              - name: file
                type: formData
                dataType: string
                description: file to upload
                required: true
            id: uploadFile
            path: /pet/{petId}/uploadImage
            consumes: multipart/form-data
            produces: application/json
            to: direct:uploadFile
          - param:
              - name: body
                type: body
                description: order placed for purchasing the pet
                required: true
            id: placeOrder
            path: /store/order
            consumes: '*/*'
            produces: application/xml,application/json
            to: direct:placeOrder
          - param:
              - name: body
                type: body
                description: Created user object
                required: true
            id: createUser
            path: /user
            description: This can only be done by the logged in user.
            consumes: '*/*'
            to: direct:createUser
          - param:
              - name: body
                type: body
                description: List of user object
                required: true
            id: createUsersWithArrayInput
            path: /user/createWithArray
            consumes: '*/*'
            to: direct:createUsersWithArrayInput
          - param:
              - name: body
                type: body
                description: List of user object
                required: true
            id: createUsersWithListInput
            path: /user/createWithList
            consumes: '*/*'
            to: direct:createUsersWithListInput
        get:
          - param:
              - name: status
                type: query
                arrayType: string
                collectionFormat: multi
                dataType: array
                description: Status values that need to be considered for filter
                required: true
            id: findPetsByStatus
            path: /pet/findByStatus
            description: >-
              Multiple status values can be provided with comma separated
              strings
            produces: application/xml,application/json
            to: direct:findPetsByStatus
          - param:
              - name: tags
                type: query
                arrayType: string
                collectionFormat: multi
                dataType: array
                description: Tags to filter by
                required: true
            id: findPetsByTags
            path: /pet/findByTags
            description: >-
              Muliple tags can be provided with comma separated strings. Use
              tag1, tag2, tag3 for testing.
            produces: application/xml,application/json
            to: direct:findPetsByTags
          - param:
              - name: petId
                type: path
                dataType: integer
                description: ID of pet to return
                required: true
            id: getPetById
            path: /pet/{petId}
            description: Returns a single pet
            produces: application/xml,application/json
            to: direct:getPetById
          - id: getInventory
            path: /store/inventory
            description: Returns a map of status codes to quantities
            produces: application/json
            to: direct:getInventory
          - param:
              - name: orderId
                type: path
                dataType: integer
                description: ID of pet that needs to be fetched
                required: true
            id: getOrderById
            path: /store/order/{orderId}
            description: >-
              For valid response try integer IDs with value >= 1 and <= 10.
              Other values will generated exceptions
            produces: application/xml,application/json
            to: direct:getOrderById
          - param:
              - name: username
                type: query
                dataType: string
                description: The user name for login
                required: true
              - name: password
                type: query
                dataType: string
                description: The password for login in clear text
                required: true
            id: loginUser
            path: /user/login
            produces: application/xml,application/json
            to: direct:loginUser
          - id: logoutUser
            path: /user/logout
            to: direct:logoutUser
          - param:
              - name: username
                type: path
                dataType: string
                description: 'The name that needs to be fetched. Use user1 for testing. '
                required: true
            id: getUserByName
            path: /user/{username}
            produces: application/xml,application/json
            to: direct:getUserByName
        path: /api/v3
